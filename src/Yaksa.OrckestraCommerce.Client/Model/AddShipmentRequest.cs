/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Carts are entities used for assembling an order before submitting.
    /// </summary>
    [DataContract(Name = "AddShipmentRequest")]
    public partial class AddShipmentRequest : IEquatable<AddShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// The fulfillment schedule mode.
        /// </summary>
        /// <value>The fulfillment schedule mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentScheduleModeEnum
        {
            /// <summary>
            /// Enum Asap for value: Asap
            /// </summary>
            [EnumMember(Value = "Asap")]
            Asap = 1,

            /// <summary>
            /// Enum Specified for value: Specified
            /// </summary>
            [EnumMember(Value = "Specified")]
            Specified = 2

        }


        /// <summary>
        /// The fulfillment schedule mode.
        /// </summary>
        /// <value>The fulfillment schedule mode.</value>
        [DataMember(Name = "fulfillmentScheduleMode", EmitDefaultValue = false)]
        public FulfillmentScheduleModeEnum? FulfillmentScheduleMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddShipmentRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The culture name in which language the data will be returned..</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed..</param>
        /// <param name="fulfillmentMethodCarrierName">The carrier name  for the fulfillment method..</param>
        /// <param name="fulfillmentMethodCarrierOptionDisplayName">fulfillmentMethodCarrierOptionDisplayName.</param>
        /// <param name="fulfillmentMethodCarrierServiceLevel">The carrier service level for this fulfillment method..</param>
        /// <param name="fulfillmentMethodDisplayName">fulfillmentMethodDisplayName.</param>
        /// <param name="fulfillmentMethodName">The unique identifier of the Shipment.FulfillmentMethod..</param>
        /// <param name="fulfillmentScheduledTimeBeginDate">the requested schedule begin date and time..</param>
        /// <param name="fulfillmentScheduledTimeEndDate">the requested schedule end date and time..</param>
        /// <param name="fulfillmentScheduleMode">The fulfillment schedule mode..</param>
        /// <param name="id">The unique identifier of the Shipment to create..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="shippingProviderId">The unique identifier of the shipping provider..</param>
        public AddShipmentRequest(string cultureName = default(string), string workflowToExecute = default(string), string fulfillmentMethodCarrierName = default(string), Dictionary<string, string> fulfillmentMethodCarrierOptionDisplayName = default(Dictionary<string, string>), string fulfillmentMethodCarrierServiceLevel = default(string), Dictionary<string, string> fulfillmentMethodDisplayName = default(Dictionary<string, string>), string fulfillmentMethodName = default(string), DateTime fulfillmentScheduledTimeBeginDate = default(DateTime), DateTime fulfillmentScheduledTimeEndDate = default(DateTime), FulfillmentScheduleModeEnum? fulfillmentScheduleMode = default(FulfillmentScheduleModeEnum?), string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), Address shippingAddress = default(Address), string shippingProviderId = default(string))
        {
            this.CultureName = cultureName;
            this.WorkflowToExecute = workflowToExecute;
            this.FulfillmentMethodCarrierName = fulfillmentMethodCarrierName;
            this.FulfillmentMethodCarrierOptionDisplayName = fulfillmentMethodCarrierOptionDisplayName;
            this.FulfillmentMethodCarrierServiceLevel = fulfillmentMethodCarrierServiceLevel;
            this.FulfillmentMethodDisplayName = fulfillmentMethodDisplayName;
            this.FulfillmentMethodName = fulfillmentMethodName;
            this.FulfillmentScheduledTimeBeginDate = fulfillmentScheduledTimeBeginDate;
            this.FulfillmentScheduledTimeEndDate = fulfillmentScheduledTimeEndDate;
            this.FulfillmentScheduleMode = fulfillmentScheduleMode;
            this.Id = id;
            this.PropertyBag = propertyBag;
            this.ShippingAddress = shippingAddress;
            this.ShippingProviderId = shippingProviderId;
        }

        /// <summary>
        /// The culture name in which language the data will be returned.
        /// </summary>
        /// <value>The culture name in which language the data will be returned.</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The name of the workflow that should be executed.
        /// </summary>
        /// <value>The name of the workflow that should be executed.</value>
        [DataMember(Name = "workflowToExecute", EmitDefaultValue = false)]
        public string WorkflowToExecute { get; set; }

        /// <summary>
        /// The carrier name  for the fulfillment method.
        /// </summary>
        /// <value>The carrier name  for the fulfillment method.</value>
        [DataMember(Name = "fulfillmentMethodCarrierName", EmitDefaultValue = false)]
        public string FulfillmentMethodCarrierName { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentMethodCarrierOptionDisplayName
        /// </summary>
        [DataMember(Name = "fulfillmentMethodCarrierOptionDisplayName", EmitDefaultValue = false)]
        public Dictionary<string, string> FulfillmentMethodCarrierOptionDisplayName { get; set; }

        /// <summary>
        /// The carrier service level for this fulfillment method.
        /// </summary>
        /// <value>The carrier service level for this fulfillment method.</value>
        [DataMember(Name = "fulfillmentMethodCarrierServiceLevel", EmitDefaultValue = false)]
        public string FulfillmentMethodCarrierServiceLevel { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentMethodDisplayName
        /// </summary>
        [DataMember(Name = "fulfillmentMethodDisplayName", EmitDefaultValue = false)]
        public Dictionary<string, string> FulfillmentMethodDisplayName { get; set; }

        /// <summary>
        /// The unique identifier of the Shipment.FulfillmentMethod.
        /// </summary>
        /// <value>The unique identifier of the Shipment.FulfillmentMethod.</value>
        [DataMember(Name = "fulfillmentMethodName", EmitDefaultValue = false)]
        public string FulfillmentMethodName { get; set; }

        /// <summary>
        /// the requested schedule begin date and time.
        /// </summary>
        /// <value>the requested schedule begin date and time.</value>
        [DataMember(Name = "fulfillmentScheduledTimeBeginDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeBeginDate { get; set; }

        /// <summary>
        /// the requested schedule end date and time.
        /// </summary>
        /// <value>the requested schedule end date and time.</value>
        [DataMember(Name = "fulfillmentScheduledTimeEndDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeEndDate { get; set; }

        /// <summary>
        /// The unique identifier of the Shipment to create.
        /// </summary>
        /// <value>The unique identifier of the Shipment to create.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "shippingAddress", EmitDefaultValue = false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// The unique identifier of the shipping provider.
        /// </summary>
        /// <value>The unique identifier of the shipping provider.</value>
        [DataMember(Name = "shippingProviderId", EmitDefaultValue = false)]
        public string ShippingProviderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddShipmentRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  WorkflowToExecute: ").Append(WorkflowToExecute).Append("\n");
            sb.Append("  FulfillmentMethodCarrierName: ").Append(FulfillmentMethodCarrierName).Append("\n");
            sb.Append("  FulfillmentMethodCarrierOptionDisplayName: ").Append(FulfillmentMethodCarrierOptionDisplayName).Append("\n");
            sb.Append("  FulfillmentMethodCarrierServiceLevel: ").Append(FulfillmentMethodCarrierServiceLevel).Append("\n");
            sb.Append("  FulfillmentMethodDisplayName: ").Append(FulfillmentMethodDisplayName).Append("\n");
            sb.Append("  FulfillmentMethodName: ").Append(FulfillmentMethodName).Append("\n");
            sb.Append("  FulfillmentScheduledTimeBeginDate: ").Append(FulfillmentScheduledTimeBeginDate).Append("\n");
            sb.Append("  FulfillmentScheduledTimeEndDate: ").Append(FulfillmentScheduledTimeEndDate).Append("\n");
            sb.Append("  FulfillmentScheduleMode: ").Append(FulfillmentScheduleMode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  ShippingProviderId: ").Append(ShippingProviderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddShipmentRequest);
        }

        /// <summary>
        /// Returns true if AddShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddShipmentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.WorkflowToExecute == input.WorkflowToExecute ||
                    (this.WorkflowToExecute != null &&
                    this.WorkflowToExecute.Equals(input.WorkflowToExecute))
                ) && 
                (
                    this.FulfillmentMethodCarrierName == input.FulfillmentMethodCarrierName ||
                    (this.FulfillmentMethodCarrierName != null &&
                    this.FulfillmentMethodCarrierName.Equals(input.FulfillmentMethodCarrierName))
                ) && 
                (
                    this.FulfillmentMethodCarrierOptionDisplayName == input.FulfillmentMethodCarrierOptionDisplayName ||
                    this.FulfillmentMethodCarrierOptionDisplayName != null &&
                    input.FulfillmentMethodCarrierOptionDisplayName != null &&
                    this.FulfillmentMethodCarrierOptionDisplayName.SequenceEqual(input.FulfillmentMethodCarrierOptionDisplayName)
                ) && 
                (
                    this.FulfillmentMethodCarrierServiceLevel == input.FulfillmentMethodCarrierServiceLevel ||
                    (this.FulfillmentMethodCarrierServiceLevel != null &&
                    this.FulfillmentMethodCarrierServiceLevel.Equals(input.FulfillmentMethodCarrierServiceLevel))
                ) && 
                (
                    this.FulfillmentMethodDisplayName == input.FulfillmentMethodDisplayName ||
                    this.FulfillmentMethodDisplayName != null &&
                    input.FulfillmentMethodDisplayName != null &&
                    this.FulfillmentMethodDisplayName.SequenceEqual(input.FulfillmentMethodDisplayName)
                ) && 
                (
                    this.FulfillmentMethodName == input.FulfillmentMethodName ||
                    (this.FulfillmentMethodName != null &&
                    this.FulfillmentMethodName.Equals(input.FulfillmentMethodName))
                ) && 
                (
                    this.FulfillmentScheduledTimeBeginDate == input.FulfillmentScheduledTimeBeginDate ||
                    (this.FulfillmentScheduledTimeBeginDate != null &&
                    this.FulfillmentScheduledTimeBeginDate.Equals(input.FulfillmentScheduledTimeBeginDate))
                ) && 
                (
                    this.FulfillmentScheduledTimeEndDate == input.FulfillmentScheduledTimeEndDate ||
                    (this.FulfillmentScheduledTimeEndDate != null &&
                    this.FulfillmentScheduledTimeEndDate.Equals(input.FulfillmentScheduledTimeEndDate))
                ) && 
                (
                    this.FulfillmentScheduleMode == input.FulfillmentScheduleMode ||
                    this.FulfillmentScheduleMode.Equals(input.FulfillmentScheduleMode)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.ShippingProviderId == input.ShippingProviderId ||
                    (this.ShippingProviderId != null &&
                    this.ShippingProviderId.Equals(input.ShippingProviderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.WorkflowToExecute != null)
                    hashCode = hashCode * 59 + this.WorkflowToExecute.GetHashCode();
                if (this.FulfillmentMethodCarrierName != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethodCarrierName.GetHashCode();
                if (this.FulfillmentMethodCarrierOptionDisplayName != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethodCarrierOptionDisplayName.GetHashCode();
                if (this.FulfillmentMethodCarrierServiceLevel != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethodCarrierServiceLevel.GetHashCode();
                if (this.FulfillmentMethodDisplayName != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethodDisplayName.GetHashCode();
                if (this.FulfillmentMethodName != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethodName.GetHashCode();
                if (this.FulfillmentScheduledTimeBeginDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeBeginDate.GetHashCode();
                if (this.FulfillmentScheduledTimeEndDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeEndDate.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentScheduleMode.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.ShippingProviderId != null)
                    hashCode = hashCode * 59 + this.ShippingProviderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
