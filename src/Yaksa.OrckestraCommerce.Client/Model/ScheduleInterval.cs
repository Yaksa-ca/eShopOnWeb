/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ScheduleInterval
    /// </summary>
    [DataContract(Name = "ScheduleInterval")]
    public partial class ScheduleInterval : IEquatable<ScheduleInterval>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleInterval" /> class.
        /// </summary>
        /// <param name="beginingTime">The date and hour of the day from which the time interval is beginning..</param>
        /// <param name="endingTime">The date and hour of the day to which the time interval is ending..</param>
        public ScheduleInterval(string beginingTime = default(string), string endingTime = default(string))
        {
            this.BeginingTime = beginingTime;
            this.EndingTime = endingTime;
        }

        /// <summary>
        /// The date and hour of the day from which the time interval is beginning.
        /// </summary>
        /// <value>The date and hour of the day from which the time interval is beginning.</value>
        [DataMember(Name = "beginingTime", EmitDefaultValue = false)]
        public string BeginingTime { get; set; }

        /// <summary>
        /// The date and hour of the day to which the time interval is ending.
        /// </summary>
        /// <value>The date and hour of the day to which the time interval is ending.</value>
        [DataMember(Name = "endingTime", EmitDefaultValue = false)]
        public string EndingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleInterval {\n");
            sb.Append("  BeginingTime: ").Append(BeginingTime).Append("\n");
            sb.Append("  EndingTime: ").Append(EndingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleInterval);
        }

        /// <summary>
        /// Returns true if ScheduleInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleInterval input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BeginingTime == input.BeginingTime ||
                    (this.BeginingTime != null &&
                    this.BeginingTime.Equals(input.BeginingTime))
                ) && 
                (
                    this.EndingTime == input.EndingTime ||
                    (this.EndingTime != null &&
                    this.EndingTime.Equals(input.EndingTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BeginingTime != null)
                    hashCode = hashCode * 59 + this.BeginingTime.GetHashCode();
                if (this.EndingTime != null)
                    hashCode = hashCode * 59 + this.EndingTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
