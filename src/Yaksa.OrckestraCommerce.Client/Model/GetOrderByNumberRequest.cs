/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "GetOrderByNumberRequest")]
    public partial class GetOrderByNumberRequest : IEquatable<GetOrderByNumberRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOrderByNumberRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="customerId">The customer identifier for the request.</param>
        /// <param name="includeLineItems">a value indicating whether include line items or not..</param>
        /// <param name="includePayment">a value indicating whether include payments or not..</param>
        /// <param name="includeShipment">a value indicating whether include shipment or not..</param>
        /// <param name="orderNumber">The order number for the request..</param>
        public GetOrderByNumberRequest(string scopeId = default(string), string customerId = default(string), bool includeLineItems = default(bool), bool includePayment = default(bool), bool includeShipment = default(bool), string orderNumber = default(string))
        {
            this.ScopeId = scopeId;
            this.CustomerId = customerId;
            this.IncludeLineItems = includeLineItems;
            this.IncludePayment = includePayment;
            this.IncludeShipment = includeShipment;
            this.OrderNumber = orderNumber;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The customer identifier for the request
        /// </summary>
        /// <value>The customer identifier for the request</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// a value indicating whether include line items or not.
        /// </summary>
        /// <value>a value indicating whether include line items or not.</value>
        [DataMember(Name = "includeLineItems", EmitDefaultValue = true)]
        public bool IncludeLineItems { get; set; }

        /// <summary>
        /// a value indicating whether include payments or not.
        /// </summary>
        /// <value>a value indicating whether include payments or not.</value>
        [DataMember(Name = "includePayment", EmitDefaultValue = true)]
        public bool IncludePayment { get; set; }

        /// <summary>
        /// a value indicating whether include shipment or not.
        /// </summary>
        /// <value>a value indicating whether include shipment or not.</value>
        [DataMember(Name = "includeShipment", EmitDefaultValue = true)]
        public bool IncludeShipment { get; set; }

        /// <summary>
        /// The order number for the request.
        /// </summary>
        /// <value>The order number for the request.</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetOrderByNumberRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  IncludeLineItems: ").Append(IncludeLineItems).Append("\n");
            sb.Append("  IncludePayment: ").Append(IncludePayment).Append("\n");
            sb.Append("  IncludeShipment: ").Append(IncludeShipment).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetOrderByNumberRequest);
        }

        /// <summary>
        /// Returns true if GetOrderByNumberRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetOrderByNumberRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOrderByNumberRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.IncludeLineItems == input.IncludeLineItems ||
                    this.IncludeLineItems.Equals(input.IncludeLineItems)
                ) && 
                (
                    this.IncludePayment == input.IncludePayment ||
                    this.IncludePayment.Equals(input.IncludePayment)
                ) && 
                (
                    this.IncludeShipment == input.IncludeShipment ||
                    this.IncludeShipment.Equals(input.IncludeShipment)
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeLineItems.GetHashCode();
                hashCode = hashCode * 59 + this.IncludePayment.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeShipment.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
