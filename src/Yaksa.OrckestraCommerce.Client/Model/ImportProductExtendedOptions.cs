/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ImportProductExtendedOptions
    /// </summary>
    [DataContract(Name = "ImportProductExtendedOptions")]
    public partial class ImportProductExtendedOptions : IEquatable<ImportProductExtendedOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportProductExtendedOptions" /> class.
        /// </summary>
        /// <param name="removeImportedProductsAssociations">Indicates whether the associations of imported products are removed prior to import..</param>
        /// <param name="removeImportedCategoriesAssociations">Indicates whether existing associations of imported categories are removed prior to import..</param>
        /// <param name="removeAllProductAssociations">Indicates whether all existing product associations are removed prior to import..</param>
        /// <param name="removeAllCategoryAssociations">Indicates whether all existing category associations are removed prior to import..</param>
        /// <param name="importEmptyAttributes">Indicates whether whether [empty attributes are imported], otherwise the latter are ignored..</param>
        /// <param name="importPublicationStatus">Indicates the status of imported products..</param>
        /// <param name="importType">Indicates the import type, can be full, or products, categories, associations, or relations.</param>
        /// <param name="validationOnly">Indicates whether only validation should be done and changes should not be committed..</param>
        public ImportProductExtendedOptions(bool removeImportedProductsAssociations = default(bool), bool removeImportedCategoriesAssociations = default(bool), bool removeAllProductAssociations = default(bool), bool removeAllCategoryAssociations = default(bool), bool importEmptyAttributes = default(bool), string importPublicationStatus = default(string), string importType = default(string), bool validationOnly = default(bool))
        {
            this.RemoveImportedProductsAssociations = removeImportedProductsAssociations;
            this.RemoveImportedCategoriesAssociations = removeImportedCategoriesAssociations;
            this.RemoveAllProductAssociations = removeAllProductAssociations;
            this.RemoveAllCategoryAssociations = removeAllCategoryAssociations;
            this.ImportEmptyAttributes = importEmptyAttributes;
            this.ImportPublicationStatus = importPublicationStatus;
            this.ImportType = importType;
            this.ValidationOnly = validationOnly;
        }

        /// <summary>
        /// Indicates whether the associations of imported products are removed prior to import.
        /// </summary>
        /// <value>Indicates whether the associations of imported products are removed prior to import.</value>
        [DataMember(Name = "removeImportedProductsAssociations", EmitDefaultValue = true)]
        public bool RemoveImportedProductsAssociations { get; set; }

        /// <summary>
        /// Indicates whether existing associations of imported categories are removed prior to import.
        /// </summary>
        /// <value>Indicates whether existing associations of imported categories are removed prior to import.</value>
        [DataMember(Name = "removeImportedCategoriesAssociations", EmitDefaultValue = true)]
        public bool RemoveImportedCategoriesAssociations { get; set; }

        /// <summary>
        /// Indicates whether all existing product associations are removed prior to import.
        /// </summary>
        /// <value>Indicates whether all existing product associations are removed prior to import.</value>
        [DataMember(Name = "removeAllProductAssociations", EmitDefaultValue = true)]
        public bool RemoveAllProductAssociations { get; set; }

        /// <summary>
        /// Indicates whether all existing category associations are removed prior to import.
        /// </summary>
        /// <value>Indicates whether all existing category associations are removed prior to import.</value>
        [DataMember(Name = "removeAllCategoryAssociations", EmitDefaultValue = true)]
        public bool RemoveAllCategoryAssociations { get; set; }

        /// <summary>
        /// Indicates whether whether [empty attributes are imported], otherwise the latter are ignored.
        /// </summary>
        /// <value>Indicates whether whether [empty attributes are imported], otherwise the latter are ignored.</value>
        [DataMember(Name = "importEmptyAttributes", EmitDefaultValue = true)]
        public bool ImportEmptyAttributes { get; set; }

        /// <summary>
        /// Indicates the status of imported products.
        /// </summary>
        /// <value>Indicates the status of imported products.</value>
        [DataMember(Name = "importPublicationStatus", EmitDefaultValue = false)]
        public string ImportPublicationStatus { get; set; }

        /// <summary>
        /// Indicates the import type, can be full, or products, categories, associations, or relations
        /// </summary>
        /// <value>Indicates the import type, can be full, or products, categories, associations, or relations</value>
        [DataMember(Name = "importType", EmitDefaultValue = false)]
        public string ImportType { get; set; }

        /// <summary>
        /// Indicates whether only validation should be done and changes should not be committed.
        /// </summary>
        /// <value>Indicates whether only validation should be done and changes should not be committed.</value>
        [DataMember(Name = "validationOnly", EmitDefaultValue = true)]
        public bool ValidationOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportProductExtendedOptions {\n");
            sb.Append("  RemoveImportedProductsAssociations: ").Append(RemoveImportedProductsAssociations).Append("\n");
            sb.Append("  RemoveImportedCategoriesAssociations: ").Append(RemoveImportedCategoriesAssociations).Append("\n");
            sb.Append("  RemoveAllProductAssociations: ").Append(RemoveAllProductAssociations).Append("\n");
            sb.Append("  RemoveAllCategoryAssociations: ").Append(RemoveAllCategoryAssociations).Append("\n");
            sb.Append("  ImportEmptyAttributes: ").Append(ImportEmptyAttributes).Append("\n");
            sb.Append("  ImportPublicationStatus: ").Append(ImportPublicationStatus).Append("\n");
            sb.Append("  ImportType: ").Append(ImportType).Append("\n");
            sb.Append("  ValidationOnly: ").Append(ValidationOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportProductExtendedOptions);
        }

        /// <summary>
        /// Returns true if ImportProductExtendedOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportProductExtendedOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportProductExtendedOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RemoveImportedProductsAssociations == input.RemoveImportedProductsAssociations ||
                    this.RemoveImportedProductsAssociations.Equals(input.RemoveImportedProductsAssociations)
                ) && 
                (
                    this.RemoveImportedCategoriesAssociations == input.RemoveImportedCategoriesAssociations ||
                    this.RemoveImportedCategoriesAssociations.Equals(input.RemoveImportedCategoriesAssociations)
                ) && 
                (
                    this.RemoveAllProductAssociations == input.RemoveAllProductAssociations ||
                    this.RemoveAllProductAssociations.Equals(input.RemoveAllProductAssociations)
                ) && 
                (
                    this.RemoveAllCategoryAssociations == input.RemoveAllCategoryAssociations ||
                    this.RemoveAllCategoryAssociations.Equals(input.RemoveAllCategoryAssociations)
                ) && 
                (
                    this.ImportEmptyAttributes == input.ImportEmptyAttributes ||
                    this.ImportEmptyAttributes.Equals(input.ImportEmptyAttributes)
                ) && 
                (
                    this.ImportPublicationStatus == input.ImportPublicationStatus ||
                    (this.ImportPublicationStatus != null &&
                    this.ImportPublicationStatus.Equals(input.ImportPublicationStatus))
                ) && 
                (
                    this.ImportType == input.ImportType ||
                    (this.ImportType != null &&
                    this.ImportType.Equals(input.ImportType))
                ) && 
                (
                    this.ValidationOnly == input.ValidationOnly ||
                    this.ValidationOnly.Equals(input.ValidationOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.RemoveImportedProductsAssociations.GetHashCode();
                hashCode = hashCode * 59 + this.RemoveImportedCategoriesAssociations.GetHashCode();
                hashCode = hashCode * 59 + this.RemoveAllProductAssociations.GetHashCode();
                hashCode = hashCode * 59 + this.RemoveAllCategoryAssociations.GetHashCode();
                hashCode = hashCode * 59 + this.ImportEmptyAttributes.GetHashCode();
                if (this.ImportPublicationStatus != null)
                    hashCode = hashCode * 59 + this.ImportPublicationStatus.GetHashCode();
                if (this.ImportType != null)
                    hashCode = hashCode * 59 + this.ImportType.GetHashCode();
                hashCode = hashCode * 59 + this.ValidationOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
