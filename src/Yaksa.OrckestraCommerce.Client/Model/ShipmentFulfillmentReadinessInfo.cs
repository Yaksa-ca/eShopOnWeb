/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ShipmentFulfillmentReadinessInfo
    /// </summary>
    [DataContract(Name = "ShipmentFulfillmentReadinessInfo")]
    public partial class ShipmentFulfillmentReadinessInfo : IEquatable<ShipmentFulfillmentReadinessInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentFulfillmentReadinessInfo" /> class.
        /// </summary>
        /// <param name="readyToBeginFulfillmentOn">the date indicating when the shipment is ready to be processed..</param>
        /// <param name="shipmentId">the unique system shipment identifier..</param>
        public ShipmentFulfillmentReadinessInfo(DateTime readyToBeginFulfillmentOn = default(DateTime), string shipmentId = default(string))
        {
            this.ReadyToBeginFulfillmentOn = readyToBeginFulfillmentOn;
            this.ShipmentId = shipmentId;
        }

        /// <summary>
        /// the date indicating when the shipment is ready to be processed.
        /// </summary>
        /// <value>the date indicating when the shipment is ready to be processed.</value>
        [DataMember(Name = "readyToBeginFulfillmentOn", EmitDefaultValue = false)]
        public DateTime ReadyToBeginFulfillmentOn { get; set; }

        /// <summary>
        /// the unique system shipment identifier.
        /// </summary>
        /// <value>the unique system shipment identifier.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentFulfillmentReadinessInfo {\n");
            sb.Append("  ReadyToBeginFulfillmentOn: ").Append(ReadyToBeginFulfillmentOn).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentFulfillmentReadinessInfo);
        }

        /// <summary>
        /// Returns true if ShipmentFulfillmentReadinessInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentFulfillmentReadinessInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentFulfillmentReadinessInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReadyToBeginFulfillmentOn == input.ReadyToBeginFulfillmentOn ||
                    (this.ReadyToBeginFulfillmentOn != null &&
                    this.ReadyToBeginFulfillmentOn.Equals(input.ReadyToBeginFulfillmentOn))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReadyToBeginFulfillmentOn != null)
                    hashCode = hashCode * 59 + this.ReadyToBeginFulfillmentOn.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
