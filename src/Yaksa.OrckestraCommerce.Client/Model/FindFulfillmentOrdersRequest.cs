/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "FindFulfillmentOrdersRequest")]
    public partial class FindFulfillmentOrdersRequest : IEquatable<FindFulfillmentOrdersRequest>, IValidatableObject
    {
        /// <summary>
        /// Whether it should use ascending order (using order creation date) or descending order (using order last modified date).
        /// </summary>
        /// <value>Whether it should use ascending order (using order creation date) or descending order (using order last modified date).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 1,

            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 2

        }


        /// <summary>
        /// Whether it should use ascending order (using order creation date) or descending order (using order last modified date).
        /// </summary>
        /// <value>Whether it should use ascending order (using order creation date) or descending order (using order last modified date).</value>
        [DataMember(Name = "sortDirection", EmitDefaultValue = false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindFulfillmentOrdersRequest" /> class.
        /// </summary>
        /// <param name="fulfillmentLocationId">The fulfillment location id orders&#39; shipment need to be associated to..</param>
        /// <param name="fulfillmentShipmentStatuses">The list of fulfillment shipment statuses orders&#39; shipment need to be associated to..</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 50.</param>
        /// <param name="minimumLimitDate">a date in the past defining the limit to get orders based on its creation date. It is ignored when &#39;SearchTerms&#39; has a value..</param>
        /// <param name="orderIds">A list of specific order ids needed to be fetched..</param>
        /// <param name="searchTerms">A series of terms that will be used in the search for shipments..</param>
        /// <param name="sortDirection">Whether it should use ascending order (using order creation date) or descending order (using order last modified date)..</param>
        /// <param name="startingIndex">The starting index in the results to start getting the orders..</param>
        public FindFulfillmentOrdersRequest(string fulfillmentLocationId = default(string), List<FulfillmentShipmentStatus> fulfillmentShipmentStatuses = default(List<FulfillmentShipmentStatus>), int maximumItems = default(int), DateTime minimumLimitDate = default(DateTime), List<string> orderIds = default(List<string>), string searchTerms = default(string), SortDirectionEnum? sortDirection = default(SortDirectionEnum?), int startingIndex = default(int))
        {
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.FulfillmentShipmentStatuses = fulfillmentShipmentStatuses;
            this.MaximumItems = maximumItems;
            this.MinimumLimitDate = minimumLimitDate;
            this.OrderIds = orderIds;
            this.SearchTerms = searchTerms;
            this.SortDirection = sortDirection;
            this.StartingIndex = startingIndex;
        }

        /// <summary>
        /// The fulfillment location id orders&#39; shipment need to be associated to.
        /// </summary>
        /// <value>The fulfillment location id orders&#39; shipment need to be associated to.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// The list of fulfillment shipment statuses orders&#39; shipment need to be associated to.
        /// </summary>
        /// <value>The list of fulfillment shipment statuses orders&#39; shipment need to be associated to.</value>
        [DataMember(Name = "fulfillmentShipmentStatuses", EmitDefaultValue = false)]
        public List<FulfillmentShipmentStatus> FulfillmentShipmentStatuses { get; set; }

        /// <summary>
        /// The maximum number of results to return. Default value : 50
        /// </summary>
        /// <value>The maximum number of results to return. Default value : 50</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// a date in the past defining the limit to get orders based on its creation date. It is ignored when &#39;SearchTerms&#39; has a value.
        /// </summary>
        /// <value>a date in the past defining the limit to get orders based on its creation date. It is ignored when &#39;SearchTerms&#39; has a value.</value>
        [DataMember(Name = "minimumLimitDate", EmitDefaultValue = false)]
        public DateTime MinimumLimitDate { get; set; }

        /// <summary>
        /// A list of specific order ids needed to be fetched.
        /// </summary>
        /// <value>A list of specific order ids needed to be fetched.</value>
        [DataMember(Name = "orderIds", EmitDefaultValue = false)]
        public List<string> OrderIds { get; set; }

        /// <summary>
        /// A series of terms that will be used in the search for shipments.
        /// </summary>
        /// <value>A series of terms that will be used in the search for shipments.</value>
        [DataMember(Name = "searchTerms", EmitDefaultValue = false)]
        public string SearchTerms { get; set; }

        /// <summary>
        /// The starting index in the results to start getting the orders.
        /// </summary>
        /// <value>The starting index in the results to start getting the orders.</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindFulfillmentOrdersRequest {\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentShipmentStatuses: ").Append(FulfillmentShipmentStatuses).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  MinimumLimitDate: ").Append(MinimumLimitDate).Append("\n");
            sb.Append("  OrderIds: ").Append(OrderIds).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindFulfillmentOrdersRequest);
        }

        /// <summary>
        /// Returns true if FindFulfillmentOrdersRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindFulfillmentOrdersRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindFulfillmentOrdersRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentShipmentStatuses == input.FulfillmentShipmentStatuses ||
                    this.FulfillmentShipmentStatuses != null &&
                    input.FulfillmentShipmentStatuses != null &&
                    this.FulfillmentShipmentStatuses.SequenceEqual(input.FulfillmentShipmentStatuses)
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.MinimumLimitDate == input.MinimumLimitDate ||
                    (this.MinimumLimitDate != null &&
                    this.MinimumLimitDate.Equals(input.MinimumLimitDate))
                ) && 
                (
                    this.OrderIds == input.OrderIds ||
                    this.OrderIds != null &&
                    input.OrderIds != null &&
                    this.OrderIds.SequenceEqual(input.OrderIds)
                ) && 
                (
                    this.SearchTerms == input.SearchTerms ||
                    (this.SearchTerms != null &&
                    this.SearchTerms.Equals(input.SearchTerms))
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    this.SortDirection.Equals(input.SortDirection)
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.FulfillmentShipmentStatuses != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipmentStatuses.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                if (this.MinimumLimitDate != null)
                    hashCode = hashCode * 59 + this.MinimumLimitDate.GetHashCode();
                if (this.OrderIds != null)
                    hashCode = hashCode * 59 + this.OrderIds.GetHashCode();
                if (this.SearchTerms != null)
                    hashCode = hashCode * 59 + this.SearchTerms.GetHashCode();
                hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
