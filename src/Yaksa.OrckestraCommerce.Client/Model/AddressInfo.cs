/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// AddressInfo
    /// </summary>
    [DataContract(Name = "AddressInfo")]
    public partial class AddressInfo : IEquatable<AddressInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressInfo" /> class.
        /// </summary>
        /// <param name="city">City of the address.</param>
        /// <param name="countryCode">2 letter country ISO code.</param>
        /// <param name="id">Unique identifier.</param>
        /// <param name="isPreferredBilling">a boolean which specifies whether this address is the customer&#39;s preferred choice for Billing. (Only applicable to Customer addresses).</param>
        /// <param name="isPreferredShipping">a boolean which specifies whether this address is the customer&#39;s preferred choice for Shipping. (Only applicable to Customer addresses).</param>
        /// <param name="latitude">Latitude coordinate of the Address.</param>
        /// <param name="line1">First line of the address.</param>
        /// <param name="line2">Second line of the address.</param>
        /// <param name="longitude">Longitude coordinate of the address.</param>
        /// <param name="postalCode">Postal code of the address.</param>
        /// <param name="regionCode">2 letter region ISO code.</param>
        public AddressInfo(string city = default(string), string countryCode = default(string), string id = default(string), bool isPreferredBilling = default(bool), bool isPreferredShipping = default(bool), double latitude = default(double), string line1 = default(string), string line2 = default(string), double longitude = default(double), string postalCode = default(string), string regionCode = default(string))
        {
            this.City = city;
            this.CountryCode = countryCode;
            this.Id = id;
            this.IsPreferredBilling = isPreferredBilling;
            this.IsPreferredShipping = isPreferredShipping;
            this.Latitude = latitude;
            this.Line1 = line1;
            this.Line2 = line2;
            this.Longitude = longitude;
            this.PostalCode = postalCode;
            this.RegionCode = regionCode;
        }

        /// <summary>
        /// City of the address
        /// </summary>
        /// <value>City of the address</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// 2 letter country ISO code
        /// </summary>
        /// <value>2 letter country ISO code</value>
        [DataMember(Name = "countryCode", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Unique identifier
        /// </summary>
        /// <value>Unique identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// a boolean which specifies whether this address is the customer&#39;s preferred choice for Billing. (Only applicable to Customer addresses)
        /// </summary>
        /// <value>a boolean which specifies whether this address is the customer&#39;s preferred choice for Billing. (Only applicable to Customer addresses)</value>
        [DataMember(Name = "isPreferredBilling", EmitDefaultValue = true)]
        public bool IsPreferredBilling { get; set; }

        /// <summary>
        /// a boolean which specifies whether this address is the customer&#39;s preferred choice for Shipping. (Only applicable to Customer addresses)
        /// </summary>
        /// <value>a boolean which specifies whether this address is the customer&#39;s preferred choice for Shipping. (Only applicable to Customer addresses)</value>
        [DataMember(Name = "isPreferredShipping", EmitDefaultValue = true)]
        public bool IsPreferredShipping { get; set; }

        /// <summary>
        /// Latitude coordinate of the Address
        /// </summary>
        /// <value>Latitude coordinate of the Address</value>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public double Latitude { get; set; }

        /// <summary>
        /// First line of the address
        /// </summary>
        /// <value>First line of the address</value>
        [DataMember(Name = "line1", EmitDefaultValue = false)]
        public string Line1 { get; set; }

        /// <summary>
        /// Second line of the address
        /// </summary>
        /// <value>Second line of the address</value>
        [DataMember(Name = "line2", EmitDefaultValue = false)]
        public string Line2 { get; set; }

        /// <summary>
        /// Longitude coordinate of the address
        /// </summary>
        /// <value>Longitude coordinate of the address</value>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Postal code of the address
        /// </summary>
        /// <value>Postal code of the address</value>
        [DataMember(Name = "postalCode", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// 2 letter region ISO code
        /// </summary>
        /// <value>2 letter region ISO code</value>
        [DataMember(Name = "regionCode", EmitDefaultValue = false)]
        public string RegionCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressInfo {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPreferredBilling: ").Append(IsPreferredBilling).Append("\n");
            sb.Append("  IsPreferredShipping: ").Append(IsPreferredShipping).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  RegionCode: ").Append(RegionCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressInfo);
        }

        /// <summary>
        /// Returns true if AddressInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsPreferredBilling == input.IsPreferredBilling ||
                    this.IsPreferredBilling.Equals(input.IsPreferredBilling)
                ) && 
                (
                    this.IsPreferredShipping == input.IsPreferredShipping ||
                    this.IsPreferredShipping.Equals(input.IsPreferredShipping)
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.Line1 == input.Line1 ||
                    (this.Line1 != null &&
                    this.Line1.Equals(input.Line1))
                ) && 
                (
                    this.Line2 == input.Line2 ||
                    (this.Line2 != null &&
                    this.Line2.Equals(input.Line2))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.RegionCode == input.RegionCode ||
                    (this.RegionCode != null &&
                    this.RegionCode.Equals(input.RegionCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsPreferredBilling.GetHashCode();
                hashCode = hashCode * 59 + this.IsPreferredShipping.GetHashCode();
                hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Line1 != null)
                    hashCode = hashCode * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hashCode = hashCode * 59 + this.Line2.GetHashCode();
                hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.RegionCode != null)
                    hashCode = hashCode * 59 + this.RegionCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
