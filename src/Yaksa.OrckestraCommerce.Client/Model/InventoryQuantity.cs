/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// InventoryQuantity
    /// </summary>
    [DataContract(Name = "InventoryQuantity")]
    public partial class InventoryQuantity : IEquatable<InventoryQuantity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryQuantity" /> class.
        /// </summary>
        /// <param name="availableToPromiseQuantity">The computed available to promise quantity of this item.</param>
        /// <param name="backOrderLimit">The maximum number of product that can be taken from the inventory in back order.</param>
        /// <param name="backOrderReservedQuantity">The reserved quantity for back order.</param>
        /// <param name="created">The creation date.</param>
        /// <param name="createdBy">The username of the user who created.</param>
        /// <param name="id">The inventory quantity identifier.</param>
        /// <param name="inventoryLocationId">The inventory location identifier.</param>
        /// <param name="isBackOrderable">The value indicating whether this instance is back orderable.</param>
        /// <param name="isPreOrderable">The value indicating whether this instance is pre orderable.</param>
        /// <param name="lastModified">The last modification date.</param>
        /// <param name="lastModifiedBy">The username of the user who last modified.</param>
        /// <param name="lastRestocked">The date the item was last restocked.</param>
        /// <param name="lastRestockedBy">The username of the user who last restocked the item.</param>
        /// <param name="preOrderLimit">The maximum number of product that can be taken from the inventory.</param>
        /// <param name="preOrderReservedQuantity">The reserved quantity for pre order.</param>
        /// <param name="quantity">The quantity of this item.</param>
        /// <param name="reOrderPoint">The number of items which should trigger an alert to re-order the item.</param>
        /// <param name="reservedQuantity">The reserved quantity of this item.</param>
        /// <param name="safetyStock">The the safety stock quantity of this item.</param>
        /// <param name="sku">The sku of the product.</param>
        public InventoryQuantity(double availableToPromiseQuantity = default(double), double backOrderLimit = default(double), double backOrderReservedQuantity = default(double), DateTime created = default(DateTime), string createdBy = default(string), string id = default(string), string inventoryLocationId = default(string), bool isBackOrderable = default(bool), bool isPreOrderable = default(bool), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), DateTime lastRestocked = default(DateTime), string lastRestockedBy = default(string), double preOrderLimit = default(double), double preOrderReservedQuantity = default(double), double quantity = default(double), double reOrderPoint = default(double), double reservedQuantity = default(double), double safetyStock = default(double), string sku = default(string))
        {
            this.AvailableToPromiseQuantity = availableToPromiseQuantity;
            this.BackOrderLimit = backOrderLimit;
            this.BackOrderReservedQuantity = backOrderReservedQuantity;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.Id = id;
            this.InventoryLocationId = inventoryLocationId;
            this.IsBackOrderable = isBackOrderable;
            this.IsPreOrderable = isPreOrderable;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.LastRestocked = lastRestocked;
            this.LastRestockedBy = lastRestockedBy;
            this.PreOrderLimit = preOrderLimit;
            this.PreOrderReservedQuantity = preOrderReservedQuantity;
            this.Quantity = quantity;
            this.ReOrderPoint = reOrderPoint;
            this.ReservedQuantity = reservedQuantity;
            this.SafetyStock = safetyStock;
            this.Sku = sku;
        }

        /// <summary>
        /// The computed available to promise quantity of this item
        /// </summary>
        /// <value>The computed available to promise quantity of this item</value>
        [DataMember(Name = "availableToPromiseQuantity", EmitDefaultValue = false)]
        public double AvailableToPromiseQuantity { get; set; }

        /// <summary>
        /// The maximum number of product that can be taken from the inventory in back order
        /// </summary>
        /// <value>The maximum number of product that can be taken from the inventory in back order</value>
        [DataMember(Name = "backOrderLimit", EmitDefaultValue = false)]
        public double BackOrderLimit { get; set; }

        /// <summary>
        /// The reserved quantity for back order
        /// </summary>
        /// <value>The reserved quantity for back order</value>
        [DataMember(Name = "backOrderReservedQuantity", EmitDefaultValue = false)]
        public double BackOrderReservedQuantity { get; set; }

        /// <summary>
        /// The creation date
        /// </summary>
        /// <value>The creation date</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The username of the user who created
        /// </summary>
        /// <value>The username of the user who created</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The inventory quantity identifier
        /// </summary>
        /// <value>The inventory quantity identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The inventory location identifier
        /// </summary>
        /// <value>The inventory location identifier</value>
        [DataMember(Name = "inventoryLocationId", EmitDefaultValue = false)]
        public string InventoryLocationId { get; set; }

        /// <summary>
        /// The value indicating whether this instance is back orderable
        /// </summary>
        /// <value>The value indicating whether this instance is back orderable</value>
        [DataMember(Name = "isBackOrderable", EmitDefaultValue = true)]
        public bool IsBackOrderable { get; set; }

        /// <summary>
        /// The value indicating whether this instance is pre orderable
        /// </summary>
        /// <value>The value indicating whether this instance is pre orderable</value>
        [DataMember(Name = "isPreOrderable", EmitDefaultValue = true)]
        public bool IsPreOrderable { get; set; }

        /// <summary>
        /// The last modification date
        /// </summary>
        /// <value>The last modification date</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The username of the user who last modified
        /// </summary>
        /// <value>The username of the user who last modified</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The date the item was last restocked
        /// </summary>
        /// <value>The date the item was last restocked</value>
        [DataMember(Name = "lastRestocked", EmitDefaultValue = false)]
        public DateTime LastRestocked { get; set; }

        /// <summary>
        /// The username of the user who last restocked the item
        /// </summary>
        /// <value>The username of the user who last restocked the item</value>
        [DataMember(Name = "lastRestockedBy", EmitDefaultValue = false)]
        public string LastRestockedBy { get; set; }

        /// <summary>
        /// The maximum number of product that can be taken from the inventory
        /// </summary>
        /// <value>The maximum number of product that can be taken from the inventory</value>
        [DataMember(Name = "preOrderLimit", EmitDefaultValue = false)]
        public double PreOrderLimit { get; set; }

        /// <summary>
        /// The reserved quantity for pre order
        /// </summary>
        /// <value>The reserved quantity for pre order</value>
        [DataMember(Name = "preOrderReservedQuantity", EmitDefaultValue = false)]
        public double PreOrderReservedQuantity { get; set; }

        /// <summary>
        /// The quantity of this item
        /// </summary>
        /// <value>The quantity of this item</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// The number of items which should trigger an alert to re-order the item
        /// </summary>
        /// <value>The number of items which should trigger an alert to re-order the item</value>
        [DataMember(Name = "reOrderPoint", EmitDefaultValue = false)]
        public double ReOrderPoint { get; set; }

        /// <summary>
        /// The reserved quantity of this item
        /// </summary>
        /// <value>The reserved quantity of this item</value>
        [DataMember(Name = "reservedQuantity", EmitDefaultValue = false)]
        public double ReservedQuantity { get; set; }

        /// <summary>
        /// The the safety stock quantity of this item
        /// </summary>
        /// <value>The the safety stock quantity of this item</value>
        [DataMember(Name = "safetyStock", EmitDefaultValue = false)]
        public double SafetyStock { get; set; }

        /// <summary>
        /// The sku of the product
        /// </summary>
        /// <value>The sku of the product</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryQuantity {\n");
            sb.Append("  AvailableToPromiseQuantity: ").Append(AvailableToPromiseQuantity).Append("\n");
            sb.Append("  BackOrderLimit: ").Append(BackOrderLimit).Append("\n");
            sb.Append("  BackOrderReservedQuantity: ").Append(BackOrderReservedQuantity).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InventoryLocationId: ").Append(InventoryLocationId).Append("\n");
            sb.Append("  IsBackOrderable: ").Append(IsBackOrderable).Append("\n");
            sb.Append("  IsPreOrderable: ").Append(IsPreOrderable).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastRestocked: ").Append(LastRestocked).Append("\n");
            sb.Append("  LastRestockedBy: ").Append(LastRestockedBy).Append("\n");
            sb.Append("  PreOrderLimit: ").Append(PreOrderLimit).Append("\n");
            sb.Append("  PreOrderReservedQuantity: ").Append(PreOrderReservedQuantity).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReOrderPoint: ").Append(ReOrderPoint).Append("\n");
            sb.Append("  ReservedQuantity: ").Append(ReservedQuantity).Append("\n");
            sb.Append("  SafetyStock: ").Append(SafetyStock).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryQuantity);
        }

        /// <summary>
        /// Returns true if InventoryQuantity instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryQuantity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryQuantity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AvailableToPromiseQuantity == input.AvailableToPromiseQuantity ||
                    this.AvailableToPromiseQuantity.Equals(input.AvailableToPromiseQuantity)
                ) && 
                (
                    this.BackOrderLimit == input.BackOrderLimit ||
                    this.BackOrderLimit.Equals(input.BackOrderLimit)
                ) && 
                (
                    this.BackOrderReservedQuantity == input.BackOrderReservedQuantity ||
                    this.BackOrderReservedQuantity.Equals(input.BackOrderReservedQuantity)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InventoryLocationId == input.InventoryLocationId ||
                    (this.InventoryLocationId != null &&
                    this.InventoryLocationId.Equals(input.InventoryLocationId))
                ) && 
                (
                    this.IsBackOrderable == input.IsBackOrderable ||
                    this.IsBackOrderable.Equals(input.IsBackOrderable)
                ) && 
                (
                    this.IsPreOrderable == input.IsPreOrderable ||
                    this.IsPreOrderable.Equals(input.IsPreOrderable)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LastRestocked == input.LastRestocked ||
                    (this.LastRestocked != null &&
                    this.LastRestocked.Equals(input.LastRestocked))
                ) && 
                (
                    this.LastRestockedBy == input.LastRestockedBy ||
                    (this.LastRestockedBy != null &&
                    this.LastRestockedBy.Equals(input.LastRestockedBy))
                ) && 
                (
                    this.PreOrderLimit == input.PreOrderLimit ||
                    this.PreOrderLimit.Equals(input.PreOrderLimit)
                ) && 
                (
                    this.PreOrderReservedQuantity == input.PreOrderReservedQuantity ||
                    this.PreOrderReservedQuantity.Equals(input.PreOrderReservedQuantity)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.ReOrderPoint == input.ReOrderPoint ||
                    this.ReOrderPoint.Equals(input.ReOrderPoint)
                ) && 
                (
                    this.ReservedQuantity == input.ReservedQuantity ||
                    this.ReservedQuantity.Equals(input.ReservedQuantity)
                ) && 
                (
                    this.SafetyStock == input.SafetyStock ||
                    this.SafetyStock.Equals(input.SafetyStock)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AvailableToPromiseQuantity.GetHashCode();
                hashCode = hashCode * 59 + this.BackOrderLimit.GetHashCode();
                hashCode = hashCode * 59 + this.BackOrderReservedQuantity.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InventoryLocationId != null)
                    hashCode = hashCode * 59 + this.InventoryLocationId.GetHashCode();
                hashCode = hashCode * 59 + this.IsBackOrderable.GetHashCode();
                hashCode = hashCode * 59 + this.IsPreOrderable.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.LastRestocked != null)
                    hashCode = hashCode * 59 + this.LastRestocked.GetHashCode();
                if (this.LastRestockedBy != null)
                    hashCode = hashCode * 59 + this.LastRestockedBy.GetHashCode();
                hashCode = hashCode * 59 + this.PreOrderLimit.GetHashCode();
                hashCode = hashCode * 59 + this.PreOrderReservedQuantity.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                hashCode = hashCode * 59 + this.ReOrderPoint.GetHashCode();
                hashCode = hashCode * 59 + this.ReservedQuantity.GetHashCode();
                hashCode = hashCode * 59 + this.SafetyStock.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
