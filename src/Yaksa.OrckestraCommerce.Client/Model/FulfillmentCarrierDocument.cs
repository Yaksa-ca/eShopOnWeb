/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentCarrierDocument
    /// </summary>
    [DataContract(Name = "FulfillmentCarrierDocument")]
    public partial class FulfillmentCarrierDocument : IEquatable<FulfillmentCarrierDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentCarrierDocument" /> class.
        /// </summary>
        /// <param name="quoteDocumentId">quoteDocumentId.</param>
        /// <param name="documentFormat">documentFormat.</param>
        /// <param name="quoteId">quoteId.</param>
        /// <param name="trackingNumber">trackingNumber.</param>
        /// <param name="trackingUrl">trackingUrl.</param>
        /// <param name="labelUrl">labelUrl.</param>
        /// <param name="manifestReferenceId">manifestReferenceId.</param>
        /// <param name="manifestUrl">manifestUrl.</param>
        public FulfillmentCarrierDocument(string quoteDocumentId = default(string), string documentFormat = default(string), string quoteId = default(string), string trackingNumber = default(string), string trackingUrl = default(string), string labelUrl = default(string), string manifestReferenceId = default(string), string manifestUrl = default(string))
        {
            this.QuoteDocumentId = quoteDocumentId;
            this.DocumentFormat = documentFormat;
            this.QuoteId = quoteId;
            this.TrackingNumber = trackingNumber;
            this.TrackingUrl = trackingUrl;
            this.LabelUrl = labelUrl;
            this.ManifestReferenceId = manifestReferenceId;
            this.ManifestUrl = manifestUrl;
        }

        /// <summary>
        /// Gets or Sets QuoteDocumentId
        /// </summary>
        [DataMember(Name = "quoteDocumentId", EmitDefaultValue = false)]
        public string QuoteDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFormat
        /// </summary>
        [DataMember(Name = "documentFormat", EmitDefaultValue = false)]
        public string DocumentFormat { get; set; }

        /// <summary>
        /// Gets or Sets QuoteId
        /// </summary>
        [DataMember(Name = "quoteId", EmitDefaultValue = false)]
        public string QuoteId { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets TrackingUrl
        /// </summary>
        [DataMember(Name = "trackingUrl", EmitDefaultValue = false)]
        public string TrackingUrl { get; set; }

        /// <summary>
        /// Gets or Sets LabelUrl
        /// </summary>
        [DataMember(Name = "labelUrl", EmitDefaultValue = false)]
        public string LabelUrl { get; set; }

        /// <summary>
        /// Gets or Sets ManifestReferenceId
        /// </summary>
        [DataMember(Name = "manifestReferenceId", EmitDefaultValue = false)]
        public string ManifestReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ManifestUrl
        /// </summary>
        [DataMember(Name = "manifestUrl", EmitDefaultValue = false)]
        public string ManifestUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentCarrierDocument {\n");
            sb.Append("  QuoteDocumentId: ").Append(QuoteDocumentId).Append("\n");
            sb.Append("  DocumentFormat: ").Append(DocumentFormat).Append("\n");
            sb.Append("  QuoteId: ").Append(QuoteId).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  TrackingUrl: ").Append(TrackingUrl).Append("\n");
            sb.Append("  LabelUrl: ").Append(LabelUrl).Append("\n");
            sb.Append("  ManifestReferenceId: ").Append(ManifestReferenceId).Append("\n");
            sb.Append("  ManifestUrl: ").Append(ManifestUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentCarrierDocument);
        }

        /// <summary>
        /// Returns true if FulfillmentCarrierDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentCarrierDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentCarrierDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuoteDocumentId == input.QuoteDocumentId ||
                    (this.QuoteDocumentId != null &&
                    this.QuoteDocumentId.Equals(input.QuoteDocumentId))
                ) && 
                (
                    this.DocumentFormat == input.DocumentFormat ||
                    (this.DocumentFormat != null &&
                    this.DocumentFormat.Equals(input.DocumentFormat))
                ) && 
                (
                    this.QuoteId == input.QuoteId ||
                    (this.QuoteId != null &&
                    this.QuoteId.Equals(input.QuoteId))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.TrackingUrl == input.TrackingUrl ||
                    (this.TrackingUrl != null &&
                    this.TrackingUrl.Equals(input.TrackingUrl))
                ) && 
                (
                    this.LabelUrl == input.LabelUrl ||
                    (this.LabelUrl != null &&
                    this.LabelUrl.Equals(input.LabelUrl))
                ) && 
                (
                    this.ManifestReferenceId == input.ManifestReferenceId ||
                    (this.ManifestReferenceId != null &&
                    this.ManifestReferenceId.Equals(input.ManifestReferenceId))
                ) && 
                (
                    this.ManifestUrl == input.ManifestUrl ||
                    (this.ManifestUrl != null &&
                    this.ManifestUrl.Equals(input.ManifestUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuoteDocumentId != null)
                    hashCode = hashCode * 59 + this.QuoteDocumentId.GetHashCode();
                if (this.DocumentFormat != null)
                    hashCode = hashCode * 59 + this.DocumentFormat.GetHashCode();
                if (this.QuoteId != null)
                    hashCode = hashCode * 59 + this.QuoteId.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.TrackingUrl != null)
                    hashCode = hashCode * 59 + this.TrackingUrl.GetHashCode();
                if (this.LabelUrl != null)
                    hashCode = hashCode * 59 + this.LabelUrl.GetHashCode();
                if (this.ManifestReferenceId != null)
                    hashCode = hashCode * 59 + this.ManifestReferenceId.GetHashCode();
                if (this.ManifestUrl != null)
                    hashCode = hashCode * 59 + this.ManifestUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
