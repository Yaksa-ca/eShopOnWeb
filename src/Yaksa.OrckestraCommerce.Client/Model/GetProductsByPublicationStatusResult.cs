/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// GetProductsByPublicationStatusResult
    /// </summary>
    [DataContract(Name = "GetProductsByPublicationStatusResult")]
    public partial class GetProductsByPublicationStatusResult : IEquatable<GetProductsByPublicationStatusResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsByPublicationStatusResult" /> class.
        /// </summary>
        /// <param name="continuationToken">continuationToken.</param>
        /// <param name="counts">ICollection&lt;QuickLinkCountDetails&gt;.</param>
        /// <param name="products">ICollection&lt;ProductByPublicationStatus&gt;.</param>
        public GetProductsByPublicationStatusResult(string continuationToken = default(string), Object counts = default(Object), Object products = default(Object))
        {
            this.ContinuationToken = continuationToken;
            this.Counts = counts;
            this.Products = products;
        }

        /// <summary>
        /// Gets or Sets ContinuationToken
        /// </summary>
        [DataMember(Name = "continuationToken", EmitDefaultValue = false)]
        public string ContinuationToken { get; set; }

        /// <summary>
        /// ICollection&lt;QuickLinkCountDetails&gt;
        /// </summary>
        /// <value>ICollection&lt;QuickLinkCountDetails&gt;</value>
        [DataMember(Name = "counts", EmitDefaultValue = false)]
        public Object Counts { get; set; }

        /// <summary>
        /// ICollection&lt;ProductByPublicationStatus&gt;
        /// </summary>
        /// <value>ICollection&lt;ProductByPublicationStatus&gt;</value>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public Object Products { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProductsByPublicationStatusResult {\n");
            sb.Append("  ContinuationToken: ").Append(ContinuationToken).Append("\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProductsByPublicationStatusResult);
        }

        /// <summary>
        /// Returns true if GetProductsByPublicationStatusResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProductsByPublicationStatusResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProductsByPublicationStatusResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContinuationToken == input.ContinuationToken ||
                    (this.ContinuationToken != null &&
                    this.ContinuationToken.Equals(input.ContinuationToken))
                ) && 
                (
                    this.Counts == input.Counts ||
                    (this.Counts != null &&
                    this.Counts.Equals(input.Counts))
                ) && 
                (
                    this.Products == input.Products ||
                    (this.Products != null &&
                    this.Products.Equals(input.Products))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContinuationToken != null)
                    hashCode = hashCode * 59 + this.ContinuationToken.GetHashCode();
                if (this.Counts != null)
                    hashCode = hashCode * 59 + this.Counts.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
