/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentCarrierPackage
    /// </summary>
    [DataContract(Name = "FulfillmentCarrierPackage")]
    public partial class FulfillmentCarrierPackage : IEquatable<FulfillmentCarrierPackage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentCarrierPackage" /> class.
        /// </summary>
        /// <param name="packageId">packageId.</param>
        /// <param name="packageType">packageType.</param>
        /// <param name="weightUOM">weightUOM.</param>
        /// <param name="weight">weight.</param>
        /// <param name="distanceUOM">distanceUOM.</param>
        /// <param name="length">length.</param>
        /// <param name="height">height.</param>
        /// <param name="width">width.</param>
        /// <param name="items">items.</param>
        public FulfillmentCarrierPackage(string packageId = default(string), string packageType = default(string), string weightUOM = default(string), double weight = default(double), string distanceUOM = default(string), double length = default(double), double height = default(double), double width = default(double), List<FulfillmentCarrierPackageItem> items = default(List<FulfillmentCarrierPackageItem>))
        {
            this.PackageId = packageId;
            this.PackageType = packageType;
            this.WeightUOM = weightUOM;
            this.Weight = weight;
            this.DistanceUOM = distanceUOM;
            this.Length = length;
            this.Height = height;
            this.Width = width;
            this.Items = items;
        }

        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [DataMember(Name = "packageId", EmitDefaultValue = false)]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or Sets PackageType
        /// </summary>
        [DataMember(Name = "packageType", EmitDefaultValue = false)]
        public string PackageType { get; set; }

        /// <summary>
        /// Gets or Sets WeightUOM
        /// </summary>
        [DataMember(Name = "weightUOM", EmitDefaultValue = false)]
        public string WeightUOM { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public double Weight { get; set; }

        /// <summary>
        /// Gets or Sets DistanceUOM
        /// </summary>
        [DataMember(Name = "distanceUOM", EmitDefaultValue = false)]
        public string DistanceUOM { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public double Length { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public double Height { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public double Width { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<FulfillmentCarrierPackageItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentCarrierPackage {\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  PackageType: ").Append(PackageType).Append("\n");
            sb.Append("  WeightUOM: ").Append(WeightUOM).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  DistanceUOM: ").Append(DistanceUOM).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentCarrierPackage);
        }

        /// <summary>
        /// Returns true if FulfillmentCarrierPackage instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentCarrierPackage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentCarrierPackage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) && 
                (
                    this.PackageType == input.PackageType ||
                    (this.PackageType != null &&
                    this.PackageType.Equals(input.PackageType))
                ) && 
                (
                    this.WeightUOM == input.WeightUOM ||
                    (this.WeightUOM != null &&
                    this.WeightUOM.Equals(input.WeightUOM))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.DistanceUOM == input.DistanceUOM ||
                    (this.DistanceUOM != null &&
                    this.DistanceUOM.Equals(input.DistanceUOM))
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PackageId != null)
                    hashCode = hashCode * 59 + this.PackageId.GetHashCode();
                if (this.PackageType != null)
                    hashCode = hashCode * 59 + this.PackageType.GetHashCode();
                if (this.WeightUOM != null)
                    hashCode = hashCode * 59 + this.WeightUOM.GetHashCode();
                hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.DistanceUOM != null)
                    hashCode = hashCode * 59 + this.DistanceUOM.GetHashCode();
                hashCode = hashCode * 59 + this.Length.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
