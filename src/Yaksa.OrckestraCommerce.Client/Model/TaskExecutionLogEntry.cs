/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// TaskExecutionLogEntry
    /// </summary>
    [DataContract(Name = "TaskExecutionLogEntry")]
    public partial class TaskExecutionLogEntry : IEquatable<TaskExecutionLogEntry>, IValidatableObject
    {
        /// <summary>
        /// The TaskLogLevel of the task.
        /// </summary>
        /// <value>The TaskLogLevel of the task.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LogLevelEnum
        {
            /// <summary>
            /// Enum Info for value: Info
            /// </summary>
            [EnumMember(Value = "Info")]
            Info = 1,

            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3

        }


        /// <summary>
        /// The TaskLogLevel of the task.
        /// </summary>
        /// <value>The TaskLogLevel of the task.</value>
        [DataMember(Name = "logLevel", EmitDefaultValue = false)]
        public LogLevelEnum? LogLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExecutionLogEntry" /> class.
        /// </summary>
        /// <param name="executionTime">The time of execution at which the entry was made.</param>
        /// <param name="id">The unique Id of the log entry.</param>
        /// <param name="logLevel">The TaskLogLevel of the task..</param>
        /// <param name="message">The message logged in the entry.</param>
        /// <param name="taskId">Get or set the unique Guid task identifier.</param>
        public TaskExecutionLogEntry(DateTime executionTime = default(DateTime), string id = default(string), LogLevelEnum? logLevel = default(LogLevelEnum?), string message = default(string), string taskId = default(string))
        {
            this.ExecutionTime = executionTime;
            this.Id = id;
            this.LogLevel = logLevel;
            this.Message = message;
            this.TaskId = taskId;
        }

        /// <summary>
        /// The time of execution at which the entry was made
        /// </summary>
        /// <value>The time of execution at which the entry was made</value>
        [DataMember(Name = "executionTime", EmitDefaultValue = false)]
        public DateTime ExecutionTime { get; set; }

        /// <summary>
        /// The unique Id of the log entry
        /// </summary>
        /// <value>The unique Id of the log entry</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The message logged in the entry
        /// </summary>
        /// <value>The message logged in the entry</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Get or set the unique Guid task identifier
        /// </summary>
        /// <value>Get or set the unique Guid task identifier</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskExecutionLogEntry {\n");
            sb.Append("  ExecutionTime: ").Append(ExecutionTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskExecutionLogEntry);
        }

        /// <summary>
        /// Returns true if TaskExecutionLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskExecutionLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskExecutionLogEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExecutionTime == input.ExecutionTime ||
                    (this.ExecutionTime != null &&
                    this.ExecutionTime.Equals(input.ExecutionTime))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LogLevel == input.LogLevel ||
                    this.LogLevel.Equals(input.LogLevel)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecutionTime != null)
                    hashCode = hashCode * 59 + this.ExecutionTime.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.LogLevel.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
