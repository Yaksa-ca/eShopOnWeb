/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "GetProductsByPublicationStatusRequest")]
    public partial class GetProductsByPublicationStatusRequest : IEquatable<GetProductsByPublicationStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// The sorting direction
        /// </summary>
        /// <value>The sorting direction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 1,

            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 2

        }


        /// <summary>
        /// The sorting direction
        /// </summary>
        /// <value>The sorting direction</value>
        [DataMember(Name = "sortDirection", EmitDefaultValue = false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsByPublicationStatusRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetProductsByPublicationStatusRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsByPublicationStatusRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The culture in which the data will be returned (required).</param>
        /// <param name="includePrice">The flag to include product&#39;s default price.</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10.</param>
        /// <param name="propertyNames">the list of properties to return.</param>
        /// <param name="publicationStatus">The publication status to filter the products by.</param>
        /// <param name="sortBy">The name of the property to be sorted.</param>
        /// <param name="sortDirection">The sorting direction.</param>
        /// <param name="categories">The list of category ids.</param>
        /// <param name="continuationToken">The continuation token used for pagination.</param>
        /// <param name="includeCount">The flag to include product count.</param>
        /// <param name="uncategorized">The flag to filter results to un-categorized products.</param>
        public GetProductsByPublicationStatusRequest(string cultureName = default(string), bool includePrice = default(bool), int maximumItems = default(int), List<string> propertyNames = default(List<string>), string publicationStatus = default(string), string sortBy = default(string), SortDirectionEnum? sortDirection = default(SortDirectionEnum?), List<string> categories = default(List<string>), string continuationToken = default(string), bool includeCount = default(bool), bool uncategorized = default(bool))
        {
            // to ensure "cultureName" is required (not null)
            this.CultureName = cultureName ?? throw new ArgumentNullException("cultureName is a required property for GetProductsByPublicationStatusRequest and cannot be null");
            this.IncludePrice = includePrice;
            this.MaximumItems = maximumItems;
            this.PropertyNames = propertyNames;
            this.PublicationStatus = publicationStatus;
            this.SortBy = sortBy;
            this.SortDirection = sortDirection;
            this.Categories = categories;
            this.ContinuationToken = continuationToken;
            this.IncludeCount = includeCount;
            this.Uncategorized = uncategorized;
        }

        /// <summary>
        /// The culture in which the data will be returned
        /// </summary>
        /// <value>The culture in which the data will be returned</value>
        [DataMember(Name = "cultureName", IsRequired = true, EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The flag to include product&#39;s default price
        /// </summary>
        /// <value>The flag to include product&#39;s default price</value>
        [DataMember(Name = "includePrice", EmitDefaultValue = true)]
        public bool IncludePrice { get; set; }

        /// <summary>
        /// The maximum number of results to return. Default value : 10
        /// </summary>
        /// <value>The maximum number of results to return. Default value : 10</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// the list of properties to return
        /// </summary>
        /// <value>the list of properties to return</value>
        [DataMember(Name = "propertyNames", EmitDefaultValue = false)]
        public List<string> PropertyNames { get; set; }

        /// <summary>
        /// The publication status to filter the products by
        /// </summary>
        /// <value>The publication status to filter the products by</value>
        [DataMember(Name = "publicationStatus", EmitDefaultValue = false)]
        public string PublicationStatus { get; set; }

        /// <summary>
        /// The name of the property to be sorted
        /// </summary>
        /// <value>The name of the property to be sorted</value>
        [DataMember(Name = "sortBy", EmitDefaultValue = false)]
        public string SortBy { get; set; }

        /// <summary>
        /// The list of category ids
        /// </summary>
        /// <value>The list of category ids</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// The continuation token used for pagination
        /// </summary>
        /// <value>The continuation token used for pagination</value>
        [DataMember(Name = "continuationToken", EmitDefaultValue = false)]
        public string ContinuationToken { get; set; }

        /// <summary>
        /// The flag to include product count
        /// </summary>
        /// <value>The flag to include product count</value>
        [DataMember(Name = "includeCount", EmitDefaultValue = true)]
        public bool IncludeCount { get; set; }

        /// <summary>
        /// The flag to filter results to un-categorized products
        /// </summary>
        /// <value>The flag to filter results to un-categorized products</value>
        [DataMember(Name = "uncategorized", EmitDefaultValue = true)]
        public bool Uncategorized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProductsByPublicationStatusRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  IncludePrice: ").Append(IncludePrice).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  PropertyNames: ").Append(PropertyNames).Append("\n");
            sb.Append("  PublicationStatus: ").Append(PublicationStatus).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  ContinuationToken: ").Append(ContinuationToken).Append("\n");
            sb.Append("  IncludeCount: ").Append(IncludeCount).Append("\n");
            sb.Append("  Uncategorized: ").Append(Uncategorized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProductsByPublicationStatusRequest);
        }

        /// <summary>
        /// Returns true if GetProductsByPublicationStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProductsByPublicationStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProductsByPublicationStatusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.IncludePrice == input.IncludePrice ||
                    this.IncludePrice.Equals(input.IncludePrice)
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.PropertyNames == input.PropertyNames ||
                    this.PropertyNames != null &&
                    input.PropertyNames != null &&
                    this.PropertyNames.SequenceEqual(input.PropertyNames)
                ) && 
                (
                    this.PublicationStatus == input.PublicationStatus ||
                    (this.PublicationStatus != null &&
                    this.PublicationStatus.Equals(input.PublicationStatus))
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    (this.SortBy != null &&
                    this.SortBy.Equals(input.SortBy))
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    this.SortDirection.Equals(input.SortDirection)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.ContinuationToken == input.ContinuationToken ||
                    (this.ContinuationToken != null &&
                    this.ContinuationToken.Equals(input.ContinuationToken))
                ) && 
                (
                    this.IncludeCount == input.IncludeCount ||
                    this.IncludeCount.Equals(input.IncludeCount)
                ) && 
                (
                    this.Uncategorized == input.Uncategorized ||
                    this.Uncategorized.Equals(input.Uncategorized)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludePrice.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                if (this.PropertyNames != null)
                    hashCode = hashCode * 59 + this.PropertyNames.GetHashCode();
                if (this.PublicationStatus != null)
                    hashCode = hashCode * 59 + this.PublicationStatus.GetHashCode();
                if (this.SortBy != null)
                    hashCode = hashCode * 59 + this.SortBy.GetHashCode();
                hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.ContinuationToken != null)
                    hashCode = hashCode * 59 + this.ContinuationToken.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeCount.GetHashCode();
                hashCode = hashCode * 59 + this.Uncategorized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
