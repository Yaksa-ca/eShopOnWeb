/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PromotionEngineResult
    /// </summary>
    [DataContract(Name = "PromotionEngineResult")]
    public partial class PromotionEngineResult : IEquatable<PromotionEngineResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionEngineResult" /> class.
        /// </summary>
        /// <param name="availablePromotions">The list of all the processed promotions considered available for the customer (i.e. the targeting condition was met), at a given time..</param>
        /// <param name="cart">cart.</param>
        /// <param name="customer">customer.</param>
        /// <param name="isMaxProcessedPromotionsReached">The maximum of processed promotions (500) is reached..</param>
        /// <param name="liveCampaigns">The live campaigns..</param>
        /// <param name="processedPromotions">The list of all the processed promotions considered, at a given time..</param>
        public PromotionEngineResult(List<Promotion> availablePromotions = default(List<Promotion>), Cart cart = default(Cart), Customer customer = default(Customer), bool isMaxProcessedPromotionsReached = default(bool), List<Campaign> liveCampaigns = default(List<Campaign>), List<PromotionProcessingResult> processedPromotions = default(List<PromotionProcessingResult>))
        {
            this.AvailablePromotions = availablePromotions;
            this.Cart = cart;
            this.Customer = customer;
            this.IsMaxProcessedPromotionsReached = isMaxProcessedPromotionsReached;
            this.LiveCampaigns = liveCampaigns;
            this.ProcessedPromotions = processedPromotions;
        }

        /// <summary>
        /// The list of all the processed promotions considered available for the customer (i.e. the targeting condition was met), at a given time.
        /// </summary>
        /// <value>The list of all the processed promotions considered available for the customer (i.e. the targeting condition was met), at a given time.</value>
        [DataMember(Name = "availablePromotions", EmitDefaultValue = false)]
        public List<Promotion> AvailablePromotions { get; set; }

        /// <summary>
        /// Gets or Sets Cart
        /// </summary>
        [DataMember(Name = "cart", EmitDefaultValue = false)]
        public Cart Cart { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// The maximum of processed promotions (500) is reached.
        /// </summary>
        /// <value>The maximum of processed promotions (500) is reached.</value>
        [DataMember(Name = "isMaxProcessedPromotionsReached", EmitDefaultValue = true)]
        public bool IsMaxProcessedPromotionsReached { get; set; }

        /// <summary>
        /// The live campaigns.
        /// </summary>
        /// <value>The live campaigns.</value>
        [DataMember(Name = "liveCampaigns", EmitDefaultValue = false)]
        public List<Campaign> LiveCampaigns { get; set; }

        /// <summary>
        /// The list of all the processed promotions considered, at a given time.
        /// </summary>
        /// <value>The list of all the processed promotions considered, at a given time.</value>
        [DataMember(Name = "processedPromotions", EmitDefaultValue = false)]
        public List<PromotionProcessingResult> ProcessedPromotions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromotionEngineResult {\n");
            sb.Append("  AvailablePromotions: ").Append(AvailablePromotions).Append("\n");
            sb.Append("  Cart: ").Append(Cart).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  IsMaxProcessedPromotionsReached: ").Append(IsMaxProcessedPromotionsReached).Append("\n");
            sb.Append("  LiveCampaigns: ").Append(LiveCampaigns).Append("\n");
            sb.Append("  ProcessedPromotions: ").Append(ProcessedPromotions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromotionEngineResult);
        }

        /// <summary>
        /// Returns true if PromotionEngineResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PromotionEngineResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromotionEngineResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AvailablePromotions == input.AvailablePromotions ||
                    this.AvailablePromotions != null &&
                    input.AvailablePromotions != null &&
                    this.AvailablePromotions.SequenceEqual(input.AvailablePromotions)
                ) && 
                (
                    this.Cart == input.Cart ||
                    (this.Cart != null &&
                    this.Cart.Equals(input.Cart))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.IsMaxProcessedPromotionsReached == input.IsMaxProcessedPromotionsReached ||
                    this.IsMaxProcessedPromotionsReached.Equals(input.IsMaxProcessedPromotionsReached)
                ) && 
                (
                    this.LiveCampaigns == input.LiveCampaigns ||
                    this.LiveCampaigns != null &&
                    input.LiveCampaigns != null &&
                    this.LiveCampaigns.SequenceEqual(input.LiveCampaigns)
                ) && 
                (
                    this.ProcessedPromotions == input.ProcessedPromotions ||
                    this.ProcessedPromotions != null &&
                    input.ProcessedPromotions != null &&
                    this.ProcessedPromotions.SequenceEqual(input.ProcessedPromotions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AvailablePromotions != null)
                    hashCode = hashCode * 59 + this.AvailablePromotions.GetHashCode();
                if (this.Cart != null)
                    hashCode = hashCode * 59 + this.Cart.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                hashCode = hashCode * 59 + this.IsMaxProcessedPromotionsReached.GetHashCode();
                if (this.LiveCampaigns != null)
                    hashCode = hashCode * 59 + this.LiveCampaigns.GetHashCode();
                if (this.ProcessedPromotions != null)
                    hashCode = hashCode * 59 + this.ProcessedPromotions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
