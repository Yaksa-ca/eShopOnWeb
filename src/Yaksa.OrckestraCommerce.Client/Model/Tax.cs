/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Tax
    /// </summary>
    [DataContract(Name = "Tax")]
    public partial class Tax : IEquatable<Tax>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tax" /> class.
        /// </summary>
        /// <param name="code">The tax code. For example, this could be GST or HST in Canada..</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="id">The unique identifier of the tax..</param>
        /// <param name="isShippingFeeTax">Indicates that this item is the tax for the additionbal shipping fees.</param>
        /// <param name="isShippingTax">Indicates that this item is the tax for the shipping charge.</param>
        /// <param name="lineItemIds">The unique identifier of all the LineItem on which the tax is applied..</param>
        /// <param name="percentage">The percentage to apply for this tax..</param>
        /// <param name="taxAmount">The tax amount to apply this tax percentage on. This should be the total of the LineItem prices..</param>
        /// <param name="taxCategoryId">The unique identifier of the tax category..</param>
        /// <param name="taxForShipmentId">The id of the shipment if this tax IsShippingTax or IsShippingFeeTax..</param>
        /// <param name="taxTotal">The cost of the tax to pay. This should be the rounded TaxAmount * Percentage..</param>
        public Tax(string code = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), string id = default(string), bool isShippingFeeTax = default(bool), bool isShippingTax = default(bool), List<string> lineItemIds = default(List<string>), double percentage = default(double), double taxAmount = default(double), string taxCategoryId = default(string), string taxForShipmentId = default(string), double taxTotal = default(double))
        {
            this.Code = code;
            this.DisplayName = displayName;
            this.Id = id;
            this.IsShippingFeeTax = isShippingFeeTax;
            this.IsShippingTax = isShippingTax;
            this.LineItemIds = lineItemIds;
            this.Percentage = percentage;
            this.TaxAmount = taxAmount;
            this.TaxCategoryId = taxCategoryId;
            this.TaxForShipmentId = taxForShipmentId;
            this.TaxTotal = taxTotal;
        }

        /// <summary>
        /// The tax code. For example, this could be GST or HST in Canada.
        /// </summary>
        /// <value>The tax code. For example, this could be GST or HST in Canada.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The unique identifier of the tax.
        /// </summary>
        /// <value>The unique identifier of the tax.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates that this item is the tax for the additionbal shipping fees
        /// </summary>
        /// <value>Indicates that this item is the tax for the additionbal shipping fees</value>
        [DataMember(Name = "isShippingFeeTax", EmitDefaultValue = true)]
        public bool IsShippingFeeTax { get; set; }

        /// <summary>
        /// Indicates that this item is the tax for the shipping charge
        /// </summary>
        /// <value>Indicates that this item is the tax for the shipping charge</value>
        [DataMember(Name = "isShippingTax", EmitDefaultValue = true)]
        public bool IsShippingTax { get; set; }

        /// <summary>
        /// The unique identifier of all the LineItem on which the tax is applied.
        /// </summary>
        /// <value>The unique identifier of all the LineItem on which the tax is applied.</value>
        [DataMember(Name = "lineItemIds", EmitDefaultValue = false)]
        public List<string> LineItemIds { get; set; }

        /// <summary>
        /// The percentage to apply for this tax.
        /// </summary>
        /// <value>The percentage to apply for this tax.</value>
        [DataMember(Name = "percentage", EmitDefaultValue = false)]
        public double Percentage { get; set; }

        /// <summary>
        /// The tax amount to apply this tax percentage on. This should be the total of the LineItem prices.
        /// </summary>
        /// <value>The tax amount to apply this tax percentage on. This should be the total of the LineItem prices.</value>
        [DataMember(Name = "taxAmount", EmitDefaultValue = false)]
        public double TaxAmount { get; set; }

        /// <summary>
        /// The unique identifier of the tax category.
        /// </summary>
        /// <value>The unique identifier of the tax category.</value>
        [DataMember(Name = "taxCategoryId", EmitDefaultValue = false)]
        public string TaxCategoryId { get; set; }

        /// <summary>
        /// The id of the shipment if this tax IsShippingTax or IsShippingFeeTax.
        /// </summary>
        /// <value>The id of the shipment if this tax IsShippingTax or IsShippingFeeTax.</value>
        [DataMember(Name = "taxForShipmentId", EmitDefaultValue = false)]
        public string TaxForShipmentId { get; set; }

        /// <summary>
        /// The cost of the tax to pay. This should be the rounded TaxAmount * Percentage.
        /// </summary>
        /// <value>The cost of the tax to pay. This should be the rounded TaxAmount * Percentage.</value>
        [DataMember(Name = "taxTotal", EmitDefaultValue = false)]
        public double TaxTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tax {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsShippingFeeTax: ").Append(IsShippingFeeTax).Append("\n");
            sb.Append("  IsShippingTax: ").Append(IsShippingTax).Append("\n");
            sb.Append("  LineItemIds: ").Append(LineItemIds).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxCategoryId: ").Append(TaxCategoryId).Append("\n");
            sb.Append("  TaxForShipmentId: ").Append(TaxForShipmentId).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tax);
        }

        /// <summary>
        /// Returns true if Tax instances are equal
        /// </summary>
        /// <param name="input">Instance of Tax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tax input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsShippingFeeTax == input.IsShippingFeeTax ||
                    this.IsShippingFeeTax.Equals(input.IsShippingFeeTax)
                ) && 
                (
                    this.IsShippingTax == input.IsShippingTax ||
                    this.IsShippingTax.Equals(input.IsShippingTax)
                ) && 
                (
                    this.LineItemIds == input.LineItemIds ||
                    this.LineItemIds != null &&
                    input.LineItemIds != null &&
                    this.LineItemIds.SequenceEqual(input.LineItemIds)
                ) && 
                (
                    this.Percentage == input.Percentage ||
                    this.Percentage.Equals(input.Percentage)
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    this.TaxAmount.Equals(input.TaxAmount)
                ) && 
                (
                    this.TaxCategoryId == input.TaxCategoryId ||
                    (this.TaxCategoryId != null &&
                    this.TaxCategoryId.Equals(input.TaxCategoryId))
                ) && 
                (
                    this.TaxForShipmentId == input.TaxForShipmentId ||
                    (this.TaxForShipmentId != null &&
                    this.TaxForShipmentId.Equals(input.TaxForShipmentId))
                ) && 
                (
                    this.TaxTotal == input.TaxTotal ||
                    this.TaxTotal.Equals(input.TaxTotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsShippingFeeTax.GetHashCode();
                hashCode = hashCode * 59 + this.IsShippingTax.GetHashCode();
                if (this.LineItemIds != null)
                    hashCode = hashCode * 59 + this.LineItemIds.GetHashCode();
                hashCode = hashCode * 59 + this.Percentage.GetHashCode();
                hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxCategoryId != null)
                    hashCode = hashCode * 59 + this.TaxCategoryId.GetHashCode();
                if (this.TaxForShipmentId != null)
                    hashCode = hashCode * 59 + this.TaxForShipmentId.GetHashCode();
                hashCode = hashCode * 59 + this.TaxTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
