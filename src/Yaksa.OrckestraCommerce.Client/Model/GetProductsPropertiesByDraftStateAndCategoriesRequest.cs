/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "GetProductsPropertiesByDraftStateAndCategoriesRequest")]
    public partial class GetProductsPropertiesByDraftStateAndCategoriesRequest : IEquatable<GetProductsPropertiesByDraftStateAndCategoriesRequest>, IValidatableObject
    {
        /// <summary>
        /// The name of the property to be sorted
        /// </summary>
        /// <value>The name of the property to be sorted</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortByEnum
        {
            /// <summary>
            /// Enum DisplayName for value: DisplayName
            /// </summary>
            [EnumMember(Value = "DisplayName")]
            DisplayName = 1,

            /// <summary>
            /// Enum ProductId for value: ProductId
            /// </summary>
            [EnumMember(Value = "ProductId")]
            ProductId = 2,

            /// <summary>
            /// Enum Price for value: Price
            /// </summary>
            [EnumMember(Value = "Price")]
            Price = 3

        }


        /// <summary>
        /// The name of the property to be sorted
        /// </summary>
        /// <value>The name of the property to be sorted</value>
        [DataMember(Name = "sortBy", EmitDefaultValue = false)]
        public SortByEnum? SortBy { get; set; }
        /// <summary>
        /// The sorting direction
        /// </summary>
        /// <value>The sorting direction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 1,

            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 2

        }


        /// <summary>
        /// The sorting direction
        /// </summary>
        /// <value>The sorting direction</value>
        [DataMember(Name = "sortDirection", EmitDefaultValue = false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsPropertiesByDraftStateAndCategoriesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetProductsPropertiesByDraftStateAndCategoriesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsPropertiesByDraftStateAndCategoriesRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The culture in which the data will be returned (required).</param>
        /// <param name="draftState">The draft state used to filter the products.</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10.</param>
        /// <param name="propertiesNames">the list of properties to return.</param>
        /// <param name="sortBy">The name of the property to be sorted.</param>
        /// <param name="sortDirection">The sorting direction.</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose).</param>
        /// <param name="categories">The list of category ids.</param>
        /// <param name="hasNotification">The flag to filter results to products with change notifications.</param>
        /// <param name="includeCount">The flag to include product count.</param>
        /// <param name="isNew">The flag to filter results to new products only.</param>
        /// <param name="uncategorized">The flag to filter results to uncategorized products.</param>
        public GetProductsPropertiesByDraftStateAndCategoriesRequest(string cultureName = default(string), string draftState = default(string), int maximumItems = default(int), List<string> propertiesNames = default(List<string>), SortByEnum? sortBy = default(SortByEnum?), SortDirectionEnum? sortDirection = default(SortDirectionEnum?), int startingIndex = default(int), List<string> categories = default(List<string>), bool hasNotification = default(bool), bool includeCount = default(bool), bool isNew = default(bool), bool uncategorized = default(bool))
        {
            // to ensure "cultureName" is required (not null)
            this.CultureName = cultureName ?? throw new ArgumentNullException("cultureName is a required property for GetProductsPropertiesByDraftStateAndCategoriesRequest and cannot be null");
            this.DraftState = draftState;
            this.MaximumItems = maximumItems;
            this.PropertiesNames = propertiesNames;
            this.SortBy = sortBy;
            this.SortDirection = sortDirection;
            this.StartingIndex = startingIndex;
            this.Categories = categories;
            this.HasNotification = hasNotification;
            this.IncludeCount = includeCount;
            this.IsNew = isNew;
            this.Uncategorized = uncategorized;
        }

        /// <summary>
        /// The culture in which the data will be returned
        /// </summary>
        /// <value>The culture in which the data will be returned</value>
        [DataMember(Name = "cultureName", IsRequired = true, EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The draft state used to filter the products
        /// </summary>
        /// <value>The draft state used to filter the products</value>
        [DataMember(Name = "draftState", EmitDefaultValue = false)]
        public string DraftState { get; set; }

        /// <summary>
        /// The maximum number of results to return. Default value : 10
        /// </summary>
        /// <value>The maximum number of results to return. Default value : 10</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// the list of properties to return
        /// </summary>
        /// <value>the list of properties to return</value>
        [DataMember(Name = "propertiesNames", EmitDefaultValue = false)]
        public List<string> PropertiesNames { get; set; }

        /// <summary>
        /// the starting index in the results to start getting the products (used for paging purpose)
        /// </summary>
        /// <value>the starting index in the results to start getting the products (used for paging purpose)</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// The list of category ids
        /// </summary>
        /// <value>The list of category ids</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// The flag to filter results to products with change notifications
        /// </summary>
        /// <value>The flag to filter results to products with change notifications</value>
        [DataMember(Name = "hasNotification", EmitDefaultValue = true)]
        public bool HasNotification { get; set; }

        /// <summary>
        /// The flag to include product count
        /// </summary>
        /// <value>The flag to include product count</value>
        [DataMember(Name = "includeCount", EmitDefaultValue = true)]
        public bool IncludeCount { get; set; }

        /// <summary>
        /// The flag to filter results to new products only
        /// </summary>
        /// <value>The flag to filter results to new products only</value>
        [DataMember(Name = "isNew", EmitDefaultValue = true)]
        public bool IsNew { get; set; }

        /// <summary>
        /// The flag to filter results to uncategorized products
        /// </summary>
        /// <value>The flag to filter results to uncategorized products</value>
        [DataMember(Name = "uncategorized", EmitDefaultValue = true)]
        public bool Uncategorized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProductsPropertiesByDraftStateAndCategoriesRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  DraftState: ").Append(DraftState).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  PropertiesNames: ").Append(PropertiesNames).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  HasNotification: ").Append(HasNotification).Append("\n");
            sb.Append("  IncludeCount: ").Append(IncludeCount).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("  Uncategorized: ").Append(Uncategorized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProductsPropertiesByDraftStateAndCategoriesRequest);
        }

        /// <summary>
        /// Returns true if GetProductsPropertiesByDraftStateAndCategoriesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProductsPropertiesByDraftStateAndCategoriesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProductsPropertiesByDraftStateAndCategoriesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.DraftState == input.DraftState ||
                    (this.DraftState != null &&
                    this.DraftState.Equals(input.DraftState))
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.PropertiesNames == input.PropertiesNames ||
                    this.PropertiesNames != null &&
                    input.PropertiesNames != null &&
                    this.PropertiesNames.SequenceEqual(input.PropertiesNames)
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    this.SortBy.Equals(input.SortBy)
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    this.SortDirection.Equals(input.SortDirection)
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.HasNotification == input.HasNotification ||
                    this.HasNotification.Equals(input.HasNotification)
                ) && 
                (
                    this.IncludeCount == input.IncludeCount ||
                    this.IncludeCount.Equals(input.IncludeCount)
                ) && 
                (
                    this.IsNew == input.IsNew ||
                    this.IsNew.Equals(input.IsNew)
                ) && 
                (
                    this.Uncategorized == input.Uncategorized ||
                    this.Uncategorized.Equals(input.Uncategorized)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.DraftState != null)
                    hashCode = hashCode * 59 + this.DraftState.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                if (this.PropertiesNames != null)
                    hashCode = hashCode * 59 + this.PropertiesNames.GetHashCode();
                hashCode = hashCode * 59 + this.SortBy.GetHashCode();
                hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                hashCode = hashCode * 59 + this.HasNotification.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeCount.GetHashCode();
                hashCode = hashCode * 59 + this.IsNew.GetHashCode();
                hashCode = hashCode * 59 + this.Uncategorized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
