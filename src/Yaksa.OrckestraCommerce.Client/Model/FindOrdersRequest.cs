/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "FindOrdersRequest")]
    public partial class FindOrdersRequest : IEquatable<FindOrdersRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindOrdersRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FindOrdersRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindOrdersRequest" /> class.
        /// </summary>
        /// <param name="configurationName">The name of the configuration to use to process this request.</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US) (required).</param>
        /// <param name="query">query.</param>
        /// <param name="createdDateRange">createdDateRange.</param>
        /// <param name="customerId">Customer id.</param>
        /// <param name="filterNeedingAttentionOnly">Whether results are filtered by needing attention only..</param>
        /// <param name="fulfillmentDateRange">fulfillmentDateRange.</param>
        /// <param name="fulfillmentLocationId">the fulfillment location id..</param>
        /// <param name="fulfillmentMethodType">the fulfillment method thype..</param>
        /// <param name="includeActiveFulfillmentSLAs">Whether we should retrieve the active fulfillment SLAs or not..</param>
        /// <param name="includeFulfillmentStates">Whether we should retrieve the fulfillmentStates or not..</param>
        /// <param name="lastModifiedDateRange">lastModifiedDateRange.</param>
        /// <param name="orderStatus">the order status..</param>
        /// <param name="paymentStatus">the list of payment status..</param>
        /// <param name="searchFulltextFields">Whether the search term is used on full-text indexed fields or not.</param>
        /// <param name="searchTerms">A series of terms that will be used in the search for orders..</param>
        /// <param name="shipmentStatus">the list of shipment status..</param>
        public FindOrdersRequest(string configurationName = default(string), string cultureName = default(string), Query query = default(Query), RangeDateTime createdDateRange = default(RangeDateTime), string customerId = default(string), bool filterNeedingAttentionOnly = default(bool), RangeDateTime fulfillmentDateRange = default(RangeDateTime), string fulfillmentLocationId = default(string), string fulfillmentMethodType = default(string), bool includeActiveFulfillmentSLAs = default(bool), bool includeFulfillmentStates = default(bool), RangeDateTime lastModifiedDateRange = default(RangeDateTime), List<string> orderStatus = default(List<string>), List<string> paymentStatus = default(List<string>), bool searchFulltextFields = default(bool), string searchTerms = default(string), List<string> shipmentStatus = default(List<string>))
        {
            // to ensure "cultureName" is required (not null)
            this.CultureName = cultureName ?? throw new ArgumentNullException("cultureName is a required property for FindOrdersRequest and cannot be null");
            this.ConfigurationName = configurationName;
            this.Query = query;
            this.CreatedDateRange = createdDateRange;
            this.CustomerId = customerId;
            this.FilterNeedingAttentionOnly = filterNeedingAttentionOnly;
            this.FulfillmentDateRange = fulfillmentDateRange;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.FulfillmentMethodType = fulfillmentMethodType;
            this.IncludeActiveFulfillmentSLAs = includeActiveFulfillmentSLAs;
            this.IncludeFulfillmentStates = includeFulfillmentStates;
            this.LastModifiedDateRange = lastModifiedDateRange;
            this.OrderStatus = orderStatus;
            this.PaymentStatus = paymentStatus;
            this.SearchFulltextFields = searchFulltextFields;
            this.SearchTerms = searchTerms;
            this.ShipmentStatus = shipmentStatus;
        }

        /// <summary>
        /// The name of the configuration to use to process this request
        /// </summary>
        /// <value>The name of the configuration to use to process this request</value>
        [DataMember(Name = "configurationName", EmitDefaultValue = false)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// The culture (language) to use to process the request (en-US)
        /// </summary>
        /// <value>The culture (language) to use to process the request (en-US)</value>
        [DataMember(Name = "cultureName", IsRequired = true, EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public Query Query { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateRange
        /// </summary>
        [DataMember(Name = "createdDateRange", EmitDefaultValue = false)]
        public RangeDateTime CreatedDateRange { get; set; }

        /// <summary>
        /// Customer id
        /// </summary>
        /// <value>Customer id</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Whether results are filtered by needing attention only.
        /// </summary>
        /// <value>Whether results are filtered by needing attention only.</value>
        [DataMember(Name = "filterNeedingAttentionOnly", EmitDefaultValue = true)]
        public bool FilterNeedingAttentionOnly { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentDateRange
        /// </summary>
        [DataMember(Name = "fulfillmentDateRange", EmitDefaultValue = false)]
        public RangeDateTime FulfillmentDateRange { get; set; }

        /// <summary>
        /// the fulfillment location id.
        /// </summary>
        /// <value>the fulfillment location id.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// the fulfillment method thype.
        /// </summary>
        /// <value>the fulfillment method thype.</value>
        [DataMember(Name = "fulfillmentMethodType", EmitDefaultValue = false)]
        public string FulfillmentMethodType { get; set; }

        /// <summary>
        /// Whether we should retrieve the active fulfillment SLAs or not.
        /// </summary>
        /// <value>Whether we should retrieve the active fulfillment SLAs or not.</value>
        [DataMember(Name = "includeActiveFulfillmentSLAs", EmitDefaultValue = true)]
        public bool IncludeActiveFulfillmentSLAs { get; set; }

        /// <summary>
        /// Whether we should retrieve the fulfillmentStates or not.
        /// </summary>
        /// <value>Whether we should retrieve the fulfillmentStates or not.</value>
        [DataMember(Name = "includeFulfillmentStates", EmitDefaultValue = true)]
        public bool IncludeFulfillmentStates { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateRange
        /// </summary>
        [DataMember(Name = "lastModifiedDateRange", EmitDefaultValue = false)]
        public RangeDateTime LastModifiedDateRange { get; set; }

        /// <summary>
        /// the order status.
        /// </summary>
        /// <value>the order status.</value>
        [DataMember(Name = "orderStatus", EmitDefaultValue = false)]
        public List<string> OrderStatus { get; set; }

        /// <summary>
        /// the list of payment status.
        /// </summary>
        /// <value>the list of payment status.</value>
        [DataMember(Name = "paymentStatus", EmitDefaultValue = false)]
        public List<string> PaymentStatus { get; set; }

        /// <summary>
        /// Whether the search term is used on full-text indexed fields or not
        /// </summary>
        /// <value>Whether the search term is used on full-text indexed fields or not</value>
        [DataMember(Name = "searchFulltextFields", EmitDefaultValue = true)]
        public bool SearchFulltextFields { get; set; }

        /// <summary>
        /// A series of terms that will be used in the search for orders.
        /// </summary>
        /// <value>A series of terms that will be used in the search for orders.</value>
        [DataMember(Name = "searchTerms", EmitDefaultValue = false)]
        public string SearchTerms { get; set; }

        /// <summary>
        /// the list of shipment status.
        /// </summary>
        /// <value>the list of shipment status.</value>
        [DataMember(Name = "shipmentStatus", EmitDefaultValue = false)]
        public List<string> ShipmentStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindOrdersRequest {\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  CreatedDateRange: ").Append(CreatedDateRange).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  FilterNeedingAttentionOnly: ").Append(FilterNeedingAttentionOnly).Append("\n");
            sb.Append("  FulfillmentDateRange: ").Append(FulfillmentDateRange).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentMethodType: ").Append(FulfillmentMethodType).Append("\n");
            sb.Append("  IncludeActiveFulfillmentSLAs: ").Append(IncludeActiveFulfillmentSLAs).Append("\n");
            sb.Append("  IncludeFulfillmentStates: ").Append(IncludeFulfillmentStates).Append("\n");
            sb.Append("  LastModifiedDateRange: ").Append(LastModifiedDateRange).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  SearchFulltextFields: ").Append(SearchFulltextFields).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindOrdersRequest);
        }

        /// <summary>
        /// Returns true if FindOrdersRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindOrdersRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindOrdersRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.CreatedDateRange == input.CreatedDateRange ||
                    (this.CreatedDateRange != null &&
                    this.CreatedDateRange.Equals(input.CreatedDateRange))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.FilterNeedingAttentionOnly == input.FilterNeedingAttentionOnly ||
                    this.FilterNeedingAttentionOnly.Equals(input.FilterNeedingAttentionOnly)
                ) && 
                (
                    this.FulfillmentDateRange == input.FulfillmentDateRange ||
                    (this.FulfillmentDateRange != null &&
                    this.FulfillmentDateRange.Equals(input.FulfillmentDateRange))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentMethodType == input.FulfillmentMethodType ||
                    (this.FulfillmentMethodType != null &&
                    this.FulfillmentMethodType.Equals(input.FulfillmentMethodType))
                ) && 
                (
                    this.IncludeActiveFulfillmentSLAs == input.IncludeActiveFulfillmentSLAs ||
                    this.IncludeActiveFulfillmentSLAs.Equals(input.IncludeActiveFulfillmentSLAs)
                ) && 
                (
                    this.IncludeFulfillmentStates == input.IncludeFulfillmentStates ||
                    this.IncludeFulfillmentStates.Equals(input.IncludeFulfillmentStates)
                ) && 
                (
                    this.LastModifiedDateRange == input.LastModifiedDateRange ||
                    (this.LastModifiedDateRange != null &&
                    this.LastModifiedDateRange.Equals(input.LastModifiedDateRange))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    this.OrderStatus != null &&
                    input.OrderStatus != null &&
                    this.OrderStatus.SequenceEqual(input.OrderStatus)
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    this.PaymentStatus != null &&
                    input.PaymentStatus != null &&
                    this.PaymentStatus.SequenceEqual(input.PaymentStatus)
                ) && 
                (
                    this.SearchFulltextFields == input.SearchFulltextFields ||
                    this.SearchFulltextFields.Equals(input.SearchFulltextFields)
                ) && 
                (
                    this.SearchTerms == input.SearchTerms ||
                    (this.SearchTerms != null &&
                    this.SearchTerms.Equals(input.SearchTerms))
                ) && 
                (
                    this.ShipmentStatus == input.ShipmentStatus ||
                    this.ShipmentStatus != null &&
                    input.ShipmentStatus != null &&
                    this.ShipmentStatus.SequenceEqual(input.ShipmentStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigurationName != null)
                    hashCode = hashCode * 59 + this.ConfigurationName.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.CreatedDateRange != null)
                    hashCode = hashCode * 59 + this.CreatedDateRange.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                hashCode = hashCode * 59 + this.FilterNeedingAttentionOnly.GetHashCode();
                if (this.FulfillmentDateRange != null)
                    hashCode = hashCode * 59 + this.FulfillmentDateRange.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.FulfillmentMethodType != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethodType.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeActiveFulfillmentSLAs.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeFulfillmentStates.GetHashCode();
                if (this.LastModifiedDateRange != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateRange.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                hashCode = hashCode * 59 + this.SearchFulltextFields.GetHashCode();
                if (this.SearchTerms != null)
                    hashCode = hashCode * 59 + this.SearchTerms.GetHashCode();
                if (this.ShipmentStatus != null)
                    hashCode = hashCode * 59 + this.ShipmentStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
