/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Promotion
    /// </summary>
    [DataContract(Name = "Promotion")]
    public partial class Promotion : IEquatable<Promotion>, IValidatableObject
    {
        /// <summary>
        /// What CouponMode kind of coupon, if any, is needed to qualify for this promotion. (None, Single, Multiple)
        /// </summary>
        /// <value>What CouponMode kind of coupon, if any, is needed to qualify for this promotion. (None, Single, Multiple)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CouponModeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 2,

            /// <summary>
            /// Enum Single for value: Single
            /// </summary>
            [EnumMember(Value = "Single")]
            Single = 3,

            /// <summary>
            /// Enum Multiple for value: Multiple
            /// </summary>
            [EnumMember(Value = "Multiple")]
            Multiple = 4

        }


        /// <summary>
        /// What CouponMode kind of coupon, if any, is needed to qualify for this promotion. (None, Single, Multiple)
        /// </summary>
        /// <value>What CouponMode kind of coupon, if any, is needed to qualify for this promotion. (None, Single, Multiple)</value>
        [DataMember(Name = "couponMode", EmitDefaultValue = false)]
        public CouponModeEnum? CouponMode { get; set; }
        /// <summary>
        /// Indicates exclusivity of the promotion
        /// </summary>
        /// <value>Indicates exclusivity of the promotion</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExclusivityEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Campaign for value: Campaign
            /// </summary>
            [EnumMember(Value = "Campaign")]
            Campaign = 2,

            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 3

        }


        /// <summary>
        /// Indicates exclusivity of the promotion
        /// </summary>
        /// <value>Indicates exclusivity of the promotion</value>
        [DataMember(Name = "exclusivity", EmitDefaultValue = false)]
        public ExclusivityEnum? Exclusivity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Promotion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Promotion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Promotion" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="allowConsumedConditionItemsToBeReused">Indicates whether the condition is re-usable.</param>
        /// <param name="allowConsumedRewardItemsToBeReused">Indicates whether the reward is combinable.</param>
        /// <param name="campaignId">the Id of the campaign that this promotion belongs to.</param>
        /// <param name="campaignPriority">a copy of the priority of the campaign.</param>
        /// <param name="conditions">the purchase conditions (purchase requirements) for the promotion to be applied..</param>
        /// <param name="consumabilityRules">the rules used to determine whether an entity should be used when validating the conditions of this promotion..</param>
        /// <param name="couponEndDate">[Obsolete] the end date..</param>
        /// <param name="couponMaximumUsageCustomer">the maximum usage per customer.</param>
        /// <param name="couponMaximumUsageGlobal"> the global maximum usage (across all customers)..</param>
        /// <param name="couponMode">What CouponMode kind of coupon, if any, is needed to qualify for this promotion. (None, Single, Multiple).</param>
        /// <param name="couponSingleCouponCode">the coupon code used when in single coupon mode. .</param>
        /// <param name="couponStartDate">[Obsolete] the start date..</param>
        /// <param name="datetimeFilter">datetimeFilter.</param>
        /// <param name="description">the description of the promotion.</param>
        /// <param name="endDate">the promotion end date..</param>
        /// <param name="excludeDiscountedItems">Indicates whether discounted items should be excluded when evaluating this promotion..</param>
        /// <param name="exclusivity">Indicates exclusivity of the promotion.</param>
        /// <param name="isActive">Indicates whether the promotion is Active.</param>
        /// <param name="isExclusive">Indicates whether this promotion is exclusive or not..</param>
        /// <param name="maximumRewardAmount">Indicates maximum amount of total reward for this promotion.</param>
        /// <param name="name">the name of the promotion..</param>
        /// <param name="priority">the priority of the promotion..</param>
        /// <param name="promotionLimit">the number of times that the promotion can be applied to a customer&#39;s cart.</param>
        /// <param name="promotionText">promotionText.</param>
        /// <param name="rewardDefinitions">the reward definitions that are given if the promotion is applied..</param>
        /// <param name="selectionInfo">the internal UI hints for the Orchestrator.</param>
        /// <param name="startDate">the promotion start date..</param>
        /// <param name="targeting">targeting.</param>
        /// <param name="versionNumber">the number of the version.</param>
        public Promotion(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), bool allowConsumedConditionItemsToBeReused = default(bool), bool allowConsumedRewardItemsToBeReused = default(bool), string campaignId = default(string), int campaignPriority = default(int), List<PurchaseCondition> conditions = default(List<PurchaseCondition>), List<ConsumabilityRule> consumabilityRules = default(List<ConsumabilityRule>), DateTime couponEndDate = default(DateTime), int couponMaximumUsageCustomer = default(int), int couponMaximumUsageGlobal = default(int), CouponModeEnum? couponMode = default(CouponModeEnum?), string couponSingleCouponCode = default(string), DateTime couponStartDate = default(DateTime), PromotionDatetimeFilter datetimeFilter = default(PromotionDatetimeFilter), string description = default(string), DateTime endDate = default(DateTime), bool excludeDiscountedItems = default(bool), ExclusivityEnum? exclusivity = default(ExclusivityEnum?), bool isActive = default(bool), bool isExclusive = default(bool), double maximumRewardAmount = default(double), string name = default(string), int priority = default(int), int promotionLimit = default(int), Dictionary<string, string> promotionText = default(Dictionary<string, string>), List<RewardDefinition> rewardDefinitions = default(List<RewardDefinition>), string selectionInfo = default(string), DateTime startDate = default(DateTime), TargetingCondition targeting = default(TargetingCondition), int versionNumber = default(int))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Promotion and cannot be null");
            this.PropertyBag = propertyBag;
            this.AllowConsumedConditionItemsToBeReused = allowConsumedConditionItemsToBeReused;
            this.AllowConsumedRewardItemsToBeReused = allowConsumedRewardItemsToBeReused;
            this.CampaignId = campaignId;
            this.CampaignPriority = campaignPriority;
            this.Conditions = conditions;
            this.ConsumabilityRules = consumabilityRules;
            this.CouponEndDate = couponEndDate;
            this.CouponMaximumUsageCustomer = couponMaximumUsageCustomer;
            this.CouponMaximumUsageGlobal = couponMaximumUsageGlobal;
            this.CouponMode = couponMode;
            this.CouponSingleCouponCode = couponSingleCouponCode;
            this.CouponStartDate = couponStartDate;
            this.DatetimeFilter = datetimeFilter;
            this.Description = description;
            this.EndDate = endDate;
            this.ExcludeDiscountedItems = excludeDiscountedItems;
            this.Exclusivity = exclusivity;
            this.IsActive = isActive;
            this.IsExclusive = isExclusive;
            this.MaximumRewardAmount = maximumRewardAmount;
            this.Name = name;
            this.Priority = priority;
            this.PromotionLimit = promotionLimit;
            this.PromotionText = promotionText;
            this.RewardDefinitions = rewardDefinitions;
            this.SelectionInfo = selectionInfo;
            this.StartDate = startDate;
            this.Targeting = targeting;
            this.VersionNumber = versionNumber;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Indicates whether the condition is re-usable
        /// </summary>
        /// <value>Indicates whether the condition is re-usable</value>
        [DataMember(Name = "allowConsumedConditionItemsToBeReused", EmitDefaultValue = true)]
        public bool AllowConsumedConditionItemsToBeReused { get; set; }

        /// <summary>
        /// Indicates whether the reward is combinable
        /// </summary>
        /// <value>Indicates whether the reward is combinable</value>
        [DataMember(Name = "allowConsumedRewardItemsToBeReused", EmitDefaultValue = true)]
        public bool AllowConsumedRewardItemsToBeReused { get; set; }

        /// <summary>
        /// the Id of the campaign that this promotion belongs to
        /// </summary>
        /// <value>the Id of the campaign that this promotion belongs to</value>
        [DataMember(Name = "campaignId", EmitDefaultValue = false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// a copy of the priority of the campaign
        /// </summary>
        /// <value>a copy of the priority of the campaign</value>
        [DataMember(Name = "campaignPriority", EmitDefaultValue = false)]
        public int CampaignPriority { get; set; }

        /// <summary>
        /// the purchase conditions (purchase requirements) for the promotion to be applied.
        /// </summary>
        /// <value>the purchase conditions (purchase requirements) for the promotion to be applied.</value>
        [DataMember(Name = "conditions", EmitDefaultValue = false)]
        public List<PurchaseCondition> Conditions { get; set; }

        /// <summary>
        /// the rules used to determine whether an entity should be used when validating the conditions of this promotion.
        /// </summary>
        /// <value>the rules used to determine whether an entity should be used when validating the conditions of this promotion.</value>
        [DataMember(Name = "consumabilityRules", EmitDefaultValue = false)]
        public List<ConsumabilityRule> ConsumabilityRules { get; set; }

        /// <summary>
        /// [Obsolete] the end date.
        /// </summary>
        /// <value>[Obsolete] the end date.</value>
        [DataMember(Name = "couponEndDate", EmitDefaultValue = false)]
        public DateTime CouponEndDate { get; set; }

        /// <summary>
        /// the maximum usage per customer
        /// </summary>
        /// <value>the maximum usage per customer</value>
        [DataMember(Name = "couponMaximumUsageCustomer", EmitDefaultValue = false)]
        public int CouponMaximumUsageCustomer { get; set; }

        /// <summary>
        ///  the global maximum usage (across all customers).
        /// </summary>
        /// <value> the global maximum usage (across all customers).</value>
        [DataMember(Name = "couponMaximumUsageGlobal", EmitDefaultValue = false)]
        public int CouponMaximumUsageGlobal { get; set; }

        /// <summary>
        /// the coupon code used when in single coupon mode. 
        /// </summary>
        /// <value>the coupon code used when in single coupon mode. </value>
        [DataMember(Name = "couponSingleCouponCode", EmitDefaultValue = false)]
        public string CouponSingleCouponCode { get; set; }

        /// <summary>
        /// [Obsolete] the start date.
        /// </summary>
        /// <value>[Obsolete] the start date.</value>
        [DataMember(Name = "couponStartDate", EmitDefaultValue = false)]
        public DateTime CouponStartDate { get; set; }

        /// <summary>
        /// Gets or Sets DatetimeFilter
        /// </summary>
        [DataMember(Name = "datetimeFilter", EmitDefaultValue = false)]
        public PromotionDatetimeFilter DatetimeFilter { get; set; }

        /// <summary>
        /// the description of the promotion
        /// </summary>
        /// <value>the description of the promotion</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// the promotion end date.
        /// </summary>
        /// <value>the promotion end date.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Indicates whether discounted items should be excluded when evaluating this promotion.
        /// </summary>
        /// <value>Indicates whether discounted items should be excluded when evaluating this promotion.</value>
        [DataMember(Name = "excludeDiscountedItems", EmitDefaultValue = true)]
        public bool ExcludeDiscountedItems { get; set; }

        /// <summary>
        /// Indicates whether the promotion is Active
        /// </summary>
        /// <value>Indicates whether the promotion is Active</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Indicates whether this promotion is exclusive or not.
        /// </summary>
        /// <value>Indicates whether this promotion is exclusive or not.</value>
        [DataMember(Name = "isExclusive", EmitDefaultValue = true)]
        public bool IsExclusive { get; set; }

        /// <summary>
        /// Indicates maximum amount of total reward for this promotion
        /// </summary>
        /// <value>Indicates maximum amount of total reward for this promotion</value>
        [DataMember(Name = "maximumRewardAmount", EmitDefaultValue = false)]
        public double MaximumRewardAmount { get; set; }

        /// <summary>
        /// the name of the promotion.
        /// </summary>
        /// <value>the name of the promotion.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the priority of the promotion.
        /// </summary>
        /// <value>the priority of the promotion.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// the number of times that the promotion can be applied to a customer&#39;s cart
        /// </summary>
        /// <value>the number of times that the promotion can be applied to a customer&#39;s cart</value>
        [DataMember(Name = "promotionLimit", EmitDefaultValue = false)]
        public int PromotionLimit { get; set; }

        /// <summary>
        /// Gets or Sets PromotionText
        /// </summary>
        [DataMember(Name = "promotionText", EmitDefaultValue = false)]
        public Dictionary<string, string> PromotionText { get; set; }

        /// <summary>
        /// the reward definitions that are given if the promotion is applied.
        /// </summary>
        /// <value>the reward definitions that are given if the promotion is applied.</value>
        [DataMember(Name = "rewardDefinitions", EmitDefaultValue = false)]
        public List<RewardDefinition> RewardDefinitions { get; set; }

        /// <summary>
        /// the internal UI hints for the Orchestrator
        /// </summary>
        /// <value>the internal UI hints for the Orchestrator</value>
        [DataMember(Name = "selectionInfo", EmitDefaultValue = false)]
        public string SelectionInfo { get; set; }

        /// <summary>
        /// the promotion start date.
        /// </summary>
        /// <value>the promotion start date.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Targeting
        /// </summary>
        [DataMember(Name = "targeting", EmitDefaultValue = false)]
        public TargetingCondition Targeting { get; set; }

        /// <summary>
        /// the number of the version
        /// </summary>
        /// <value>the number of the version</value>
        [DataMember(Name = "versionNumber", EmitDefaultValue = false)]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Promotion {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  AllowConsumedConditionItemsToBeReused: ").Append(AllowConsumedConditionItemsToBeReused).Append("\n");
            sb.Append("  AllowConsumedRewardItemsToBeReused: ").Append(AllowConsumedRewardItemsToBeReused).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CampaignPriority: ").Append(CampaignPriority).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  ConsumabilityRules: ").Append(ConsumabilityRules).Append("\n");
            sb.Append("  CouponEndDate: ").Append(CouponEndDate).Append("\n");
            sb.Append("  CouponMaximumUsageCustomer: ").Append(CouponMaximumUsageCustomer).Append("\n");
            sb.Append("  CouponMaximumUsageGlobal: ").Append(CouponMaximumUsageGlobal).Append("\n");
            sb.Append("  CouponMode: ").Append(CouponMode).Append("\n");
            sb.Append("  CouponSingleCouponCode: ").Append(CouponSingleCouponCode).Append("\n");
            sb.Append("  CouponStartDate: ").Append(CouponStartDate).Append("\n");
            sb.Append("  DatetimeFilter: ").Append(DatetimeFilter).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExcludeDiscountedItems: ").Append(ExcludeDiscountedItems).Append("\n");
            sb.Append("  Exclusivity: ").Append(Exclusivity).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsExclusive: ").Append(IsExclusive).Append("\n");
            sb.Append("  MaximumRewardAmount: ").Append(MaximumRewardAmount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PromotionLimit: ").Append(PromotionLimit).Append("\n");
            sb.Append("  PromotionText: ").Append(PromotionText).Append("\n");
            sb.Append("  RewardDefinitions: ").Append(RewardDefinitions).Append("\n");
            sb.Append("  SelectionInfo: ").Append(SelectionInfo).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Targeting: ").Append(Targeting).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Promotion);
        }

        /// <summary>
        /// Returns true if Promotion instances are equal
        /// </summary>
        /// <param name="input">Instance of Promotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Promotion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.AllowConsumedConditionItemsToBeReused == input.AllowConsumedConditionItemsToBeReused ||
                    this.AllowConsumedConditionItemsToBeReused.Equals(input.AllowConsumedConditionItemsToBeReused)
                ) && 
                (
                    this.AllowConsumedRewardItemsToBeReused == input.AllowConsumedRewardItemsToBeReused ||
                    this.AllowConsumedRewardItemsToBeReused.Equals(input.AllowConsumedRewardItemsToBeReused)
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.CampaignPriority == input.CampaignPriority ||
                    this.CampaignPriority.Equals(input.CampaignPriority)
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    input.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                ) && 
                (
                    this.ConsumabilityRules == input.ConsumabilityRules ||
                    this.ConsumabilityRules != null &&
                    input.ConsumabilityRules != null &&
                    this.ConsumabilityRules.SequenceEqual(input.ConsumabilityRules)
                ) && 
                (
                    this.CouponEndDate == input.CouponEndDate ||
                    (this.CouponEndDate != null &&
                    this.CouponEndDate.Equals(input.CouponEndDate))
                ) && 
                (
                    this.CouponMaximumUsageCustomer == input.CouponMaximumUsageCustomer ||
                    this.CouponMaximumUsageCustomer.Equals(input.CouponMaximumUsageCustomer)
                ) && 
                (
                    this.CouponMaximumUsageGlobal == input.CouponMaximumUsageGlobal ||
                    this.CouponMaximumUsageGlobal.Equals(input.CouponMaximumUsageGlobal)
                ) && 
                (
                    this.CouponMode == input.CouponMode ||
                    this.CouponMode.Equals(input.CouponMode)
                ) && 
                (
                    this.CouponSingleCouponCode == input.CouponSingleCouponCode ||
                    (this.CouponSingleCouponCode != null &&
                    this.CouponSingleCouponCode.Equals(input.CouponSingleCouponCode))
                ) && 
                (
                    this.CouponStartDate == input.CouponStartDate ||
                    (this.CouponStartDate != null &&
                    this.CouponStartDate.Equals(input.CouponStartDate))
                ) && 
                (
                    this.DatetimeFilter == input.DatetimeFilter ||
                    (this.DatetimeFilter != null &&
                    this.DatetimeFilter.Equals(input.DatetimeFilter))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ExcludeDiscountedItems == input.ExcludeDiscountedItems ||
                    this.ExcludeDiscountedItems.Equals(input.ExcludeDiscountedItems)
                ) && 
                (
                    this.Exclusivity == input.Exclusivity ||
                    this.Exclusivity.Equals(input.Exclusivity)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.IsExclusive == input.IsExclusive ||
                    this.IsExclusive.Equals(input.IsExclusive)
                ) && 
                (
                    this.MaximumRewardAmount == input.MaximumRewardAmount ||
                    this.MaximumRewardAmount.Equals(input.MaximumRewardAmount)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.PromotionLimit == input.PromotionLimit ||
                    this.PromotionLimit.Equals(input.PromotionLimit)
                ) && 
                (
                    this.PromotionText == input.PromotionText ||
                    this.PromotionText != null &&
                    input.PromotionText != null &&
                    this.PromotionText.SequenceEqual(input.PromotionText)
                ) && 
                (
                    this.RewardDefinitions == input.RewardDefinitions ||
                    this.RewardDefinitions != null &&
                    input.RewardDefinitions != null &&
                    this.RewardDefinitions.SequenceEqual(input.RewardDefinitions)
                ) && 
                (
                    this.SelectionInfo == input.SelectionInfo ||
                    (this.SelectionInfo != null &&
                    this.SelectionInfo.Equals(input.SelectionInfo))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Targeting == input.Targeting ||
                    (this.Targeting != null &&
                    this.Targeting.Equals(input.Targeting))
                ) && 
                (
                    this.VersionNumber == input.VersionNumber ||
                    this.VersionNumber.Equals(input.VersionNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.AllowConsumedConditionItemsToBeReused.GetHashCode();
                hashCode = hashCode * 59 + this.AllowConsumedRewardItemsToBeReused.GetHashCode();
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                hashCode = hashCode * 59 + this.CampaignPriority.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                if (this.ConsumabilityRules != null)
                    hashCode = hashCode * 59 + this.ConsumabilityRules.GetHashCode();
                if (this.CouponEndDate != null)
                    hashCode = hashCode * 59 + this.CouponEndDate.GetHashCode();
                hashCode = hashCode * 59 + this.CouponMaximumUsageCustomer.GetHashCode();
                hashCode = hashCode * 59 + this.CouponMaximumUsageGlobal.GetHashCode();
                hashCode = hashCode * 59 + this.CouponMode.GetHashCode();
                if (this.CouponSingleCouponCode != null)
                    hashCode = hashCode * 59 + this.CouponSingleCouponCode.GetHashCode();
                if (this.CouponStartDate != null)
                    hashCode = hashCode * 59 + this.CouponStartDate.GetHashCode();
                if (this.DatetimeFilter != null)
                    hashCode = hashCode * 59 + this.DatetimeFilter.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                hashCode = hashCode * 59 + this.ExcludeDiscountedItems.GetHashCode();
                hashCode = hashCode * 59 + this.Exclusivity.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                hashCode = hashCode * 59 + this.IsExclusive.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumRewardAmount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Priority.GetHashCode();
                hashCode = hashCode * 59 + this.PromotionLimit.GetHashCode();
                if (this.PromotionText != null)
                    hashCode = hashCode * 59 + this.PromotionText.GetHashCode();
                if (this.RewardDefinitions != null)
                    hashCode = hashCode * 59 + this.RewardDefinitions.GetHashCode();
                if (this.SelectionInfo != null)
                    hashCode = hashCode * 59 + this.SelectionInfo.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Targeting != null)
                    hashCode = hashCode * 59 + this.Targeting.GetHashCode();
                hashCode = hashCode * 59 + this.VersionNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
