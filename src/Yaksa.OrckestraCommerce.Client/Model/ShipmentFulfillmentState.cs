/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ShipmentFulfillmentState
    /// </summary>
    [DataContract(Name = "ShipmentFulfillmentState")]
    public partial class ShipmentFulfillmentState : IEquatable<ShipmentFulfillmentState>, IValidatableObject
    {
        /// <summary>
        /// the execution result of the shipment processing
        /// </summary>
        /// <value>the execution result of the shipment processing</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecutionResultEnum
        {
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 1,

            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3,

            /// <summary>
            /// Enum Critical for value: Critical
            /// </summary>
            [EnumMember(Value = "Critical")]
            Critical = 4,

            /// <summary>
            /// Enum Failure for value: Failure
            /// </summary>
            [EnumMember(Value = "Failure")]
            Failure = 5

        }


        /// <summary>
        /// the execution result of the shipment processing
        /// </summary>
        /// <value>the execution result of the shipment processing</value>
        [DataMember(Name = "executionResult", EmitDefaultValue = false)]
        public ExecutionResultEnum? ExecutionResult { get; set; }
        /// <summary>
        /// the FulfillmentMethodType that will be used to complete the shipment.
        /// </summary>
        /// <value>the FulfillmentMethodType that will be used to complete the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentMethodTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum PickUp for value: PickUp
            /// </summary>
            [EnumMember(Value = "PickUp")]
            PickUp = 2,

            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 3,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 4,

            /// <summary>
            /// Enum ShipToStore for value: ShipToStore
            /// </summary>
            [EnumMember(Value = "ShipToStore")]
            ShipToStore = 5

        }


        /// <summary>
        /// the FulfillmentMethodType that will be used to complete the shipment.
        /// </summary>
        /// <value>the FulfillmentMethodType that will be used to complete the shipment.</value>
        [DataMember(Name = "fulfillmentMethodType", EmitDefaultValue = false)]
        public FulfillmentMethodTypeEnum? FulfillmentMethodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentFulfillmentState" /> class.
        /// </summary>
        /// <param name="allowedManualTransitions">a list of allowed manual transitions from the shipment current status..</param>
        /// <param name="allowedStatusChanges">a list of allowed status changes that can be requested.  Requesting any other changes will fail..</param>
        /// <param name="allowsShipmentChangesProcessing">a flag indicating that the shipment changes can be reprocessed within the fulfillment workflow.</param>
        /// <param name="created">The creation date of the shipment fulfillment state..</param>
        /// <param name="createdBy">the identity of the user who created the state..</param>
        /// <param name="executionResult">the execution result of the shipment processing.</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the fulfillment location that will complete the shipment process..</param>
        /// <param name="fulfillmentLocationScope">the fulfillment location scope..</param>
        /// <param name="fulfillmentMethodType">the FulfillmentMethodType that will be used to complete the shipment..</param>
        /// <param name="fulfillmentProviderId">the fulfillment provider identifier..</param>
        /// <param name="fulfillmentScheduledTimeBeginDate">the scheduled time at which fulfillment will begin..</param>
        /// <param name="fulfillmentScheduledTimeEndDate">the scheduled time at which fulfillment will end..</param>
        /// <param name="isFinished">a value indicating whether if that fulfillment is finished for this shipment..</param>
        /// <param name="isProcessing">a value indicating whether if the shipment is being processed or not..</param>
        /// <param name="isResumable">the fulfillment workflow is resumable..</param>
        /// <param name="lastModified">the last modification date..</param>
        /// <param name="lastModifiedBy">the identity of the user who modified the state..</param>
        /// <param name="lockedForTaskProcessingUntil">the UTC datetime until when the shipment state and content will be exclusively open for modifications by the fulfillment workflow task..</param>
        /// <param name="messages">The execution messages when the shipment was processed.</param>
        /// <param name="nextStatuses">a list of the potential status the shipment could transition to from its current status..</param>
        /// <param name="pickUpLocationId">The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise..</param>
        /// <param name="readyToBeginFulfillmentOn">the date on which the shipment is ready to be processed..</param>
        /// <param name="retryCount">the number of times the workflow was restarted after an error..</param>
        /// <param name="shipmentId">the unique system shipment identifier..</param>
        /// <param name="shipmentLastProcessedOn">the date and time on which the shipment was last processed.</param>
        /// <param name="status">the current status of the shipment..</param>
        /// <param name="taskId">the fulfillment task Id associated with the shipment processing..</param>
        /// <param name="taskStatus">the fulfillment task status associated with the shipment processing..</param>
        /// <param name="taskWorkflowXamlPath">the path of the fulfillment workflow..</param>
        /// <param name="validationResults">the validation results when the shipment was processed..</param>
        /// <param name="workflowInError">the fulfillment workflow is in error..</param>
        public ShipmentFulfillmentState(List<string> allowedManualTransitions = default(List<string>), List<string> allowedStatusChanges = default(List<string>), bool allowsShipmentChangesProcessing = default(bool), DateTime created = default(DateTime), string createdBy = default(string), ExecutionResultEnum? executionResult = default(ExecutionResultEnum?), string fulfillmentLocationId = default(string), string fulfillmentLocationScope = default(string), FulfillmentMethodTypeEnum? fulfillmentMethodType = default(FulfillmentMethodTypeEnum?), string fulfillmentProviderId = default(string), DateTime fulfillmentScheduledTimeBeginDate = default(DateTime), DateTime fulfillmentScheduledTimeEndDate = default(DateTime), bool isFinished = default(bool), bool isProcessing = default(bool), bool isResumable = default(bool), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), DateTime lockedForTaskProcessingUntil = default(DateTime), List<ExecutionMessage> messages = default(List<ExecutionMessage>), List<string> nextStatuses = default(List<string>), string pickUpLocationId = default(string), DateTime readyToBeginFulfillmentOn = default(DateTime), int retryCount = default(int), string shipmentId = default(string), DateTime shipmentLastProcessedOn = default(DateTime), string status = default(string), string taskId = default(string), string taskStatus = default(string), string taskWorkflowXamlPath = default(string), List<ValidationResult> validationResults = default(List<ValidationResult>), bool workflowInError = default(bool))
        {
            this.AllowedManualTransitions = allowedManualTransitions;
            this.AllowedStatusChanges = allowedStatusChanges;
            this.AllowsShipmentChangesProcessing = allowsShipmentChangesProcessing;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.ExecutionResult = executionResult;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.FulfillmentLocationScope = fulfillmentLocationScope;
            this.FulfillmentMethodType = fulfillmentMethodType;
            this.FulfillmentProviderId = fulfillmentProviderId;
            this.FulfillmentScheduledTimeBeginDate = fulfillmentScheduledTimeBeginDate;
            this.FulfillmentScheduledTimeEndDate = fulfillmentScheduledTimeEndDate;
            this.IsFinished = isFinished;
            this.IsProcessing = isProcessing;
            this.IsResumable = isResumable;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.LockedForTaskProcessingUntil = lockedForTaskProcessingUntil;
            this.Messages = messages;
            this.NextStatuses = nextStatuses;
            this.PickUpLocationId = pickUpLocationId;
            this.ReadyToBeginFulfillmentOn = readyToBeginFulfillmentOn;
            this.RetryCount = retryCount;
            this.ShipmentId = shipmentId;
            this.ShipmentLastProcessedOn = shipmentLastProcessedOn;
            this.Status = status;
            this.TaskId = taskId;
            this.TaskStatus = taskStatus;
            this.TaskWorkflowXamlPath = taskWorkflowXamlPath;
            this.ValidationResults = validationResults;
            this.WorkflowInError = workflowInError;
        }

        /// <summary>
        /// a list of allowed manual transitions from the shipment current status.
        /// </summary>
        /// <value>a list of allowed manual transitions from the shipment current status.</value>
        [DataMember(Name = "allowedManualTransitions", EmitDefaultValue = false)]
        public List<string> AllowedManualTransitions { get; set; }

        /// <summary>
        /// a list of allowed status changes that can be requested.  Requesting any other changes will fail.
        /// </summary>
        /// <value>a list of allowed status changes that can be requested.  Requesting any other changes will fail.</value>
        [DataMember(Name = "allowedStatusChanges", EmitDefaultValue = false)]
        public List<string> AllowedStatusChanges { get; set; }

        /// <summary>
        /// a flag indicating that the shipment changes can be reprocessed within the fulfillment workflow
        /// </summary>
        /// <value>a flag indicating that the shipment changes can be reprocessed within the fulfillment workflow</value>
        [DataMember(Name = "allowsShipmentChangesProcessing", EmitDefaultValue = true)]
        public bool AllowsShipmentChangesProcessing { get; set; }

        /// <summary>
        /// The creation date of the shipment fulfillment state.
        /// </summary>
        /// <value>The creation date of the shipment fulfillment state.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the identity of the user who created the state.
        /// </summary>
        /// <value>the identity of the user who created the state.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// the unique identifier of the fulfillment location that will complete the shipment process.
        /// </summary>
        /// <value>the unique identifier of the fulfillment location that will complete the shipment process.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// the fulfillment location scope.
        /// </summary>
        /// <value>the fulfillment location scope.</value>
        [DataMember(Name = "fulfillmentLocationScope", EmitDefaultValue = false)]
        public string FulfillmentLocationScope { get; set; }

        /// <summary>
        /// the fulfillment provider identifier.
        /// </summary>
        /// <value>the fulfillment provider identifier.</value>
        [DataMember(Name = "fulfillmentProviderId", EmitDefaultValue = false)]
        public string FulfillmentProviderId { get; set; }

        /// <summary>
        /// the scheduled time at which fulfillment will begin.
        /// </summary>
        /// <value>the scheduled time at which fulfillment will begin.</value>
        [DataMember(Name = "fulfillmentScheduledTimeBeginDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeBeginDate { get; set; }

        /// <summary>
        /// the scheduled time at which fulfillment will end.
        /// </summary>
        /// <value>the scheduled time at which fulfillment will end.</value>
        [DataMember(Name = "fulfillmentScheduledTimeEndDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeEndDate { get; set; }

        /// <summary>
        /// a value indicating whether if that fulfillment is finished for this shipment.
        /// </summary>
        /// <value>a value indicating whether if that fulfillment is finished for this shipment.</value>
        [DataMember(Name = "isFinished", EmitDefaultValue = true)]
        public bool IsFinished { get; set; }

        /// <summary>
        /// a value indicating whether if the shipment is being processed or not.
        /// </summary>
        /// <value>a value indicating whether if the shipment is being processed or not.</value>
        [DataMember(Name = "isProcessing", EmitDefaultValue = true)]
        public bool IsProcessing { get; set; }

        /// <summary>
        /// the fulfillment workflow is resumable.
        /// </summary>
        /// <value>the fulfillment workflow is resumable.</value>
        [DataMember(Name = "isResumable", EmitDefaultValue = true)]
        public bool IsResumable { get; set; }

        /// <summary>
        /// the last modification date.
        /// </summary>
        /// <value>the last modification date.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// the identity of the user who modified the state.
        /// </summary>
        /// <value>the identity of the user who modified the state.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// the UTC datetime until when the shipment state and content will be exclusively open for modifications by the fulfillment workflow task.
        /// </summary>
        /// <value>the UTC datetime until when the shipment state and content will be exclusively open for modifications by the fulfillment workflow task.</value>
        [DataMember(Name = "lockedForTaskProcessingUntil", EmitDefaultValue = false)]
        public DateTime LockedForTaskProcessingUntil { get; set; }

        /// <summary>
        /// The execution messages when the shipment was processed
        /// </summary>
        /// <value>The execution messages when the shipment was processed</value>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<ExecutionMessage> Messages { get; set; }

        /// <summary>
        /// a list of the potential status the shipment could transition to from its current status.
        /// </summary>
        /// <value>a list of the potential status the shipment could transition to from its current status.</value>
        [DataMember(Name = "nextStatuses", EmitDefaultValue = false)]
        public List<string> NextStatuses { get; set; }

        /// <summary>
        /// The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.
        /// </summary>
        /// <value>The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.</value>
        [DataMember(Name = "pickUpLocationId", EmitDefaultValue = false)]
        public string PickUpLocationId { get; set; }

        /// <summary>
        /// the date on which the shipment is ready to be processed.
        /// </summary>
        /// <value>the date on which the shipment is ready to be processed.</value>
        [DataMember(Name = "readyToBeginFulfillmentOn", EmitDefaultValue = false)]
        public DateTime ReadyToBeginFulfillmentOn { get; set; }

        /// <summary>
        /// the number of times the workflow was restarted after an error.
        /// </summary>
        /// <value>the number of times the workflow was restarted after an error.</value>
        [DataMember(Name = "retryCount", EmitDefaultValue = false)]
        public int RetryCount { get; set; }

        /// <summary>
        /// the unique system shipment identifier.
        /// </summary>
        /// <value>the unique system shipment identifier.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// the date and time on which the shipment was last processed
        /// </summary>
        /// <value>the date and time on which the shipment was last processed</value>
        [DataMember(Name = "shipmentLastProcessedOn", EmitDefaultValue = false)]
        public DateTime ShipmentLastProcessedOn { get; set; }

        /// <summary>
        /// the current status of the shipment.
        /// </summary>
        /// <value>the current status of the shipment.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// the fulfillment task Id associated with the shipment processing.
        /// </summary>
        /// <value>the fulfillment task Id associated with the shipment processing.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// the fulfillment task status associated with the shipment processing.
        /// </summary>
        /// <value>the fulfillment task status associated with the shipment processing.</value>
        [DataMember(Name = "taskStatus", EmitDefaultValue = false)]
        public string TaskStatus { get; set; }

        /// <summary>
        /// the path of the fulfillment workflow.
        /// </summary>
        /// <value>the path of the fulfillment workflow.</value>
        [DataMember(Name = "taskWorkflowXamlPath", EmitDefaultValue = false)]
        public string TaskWorkflowXamlPath { get; set; }

        /// <summary>
        /// the validation results when the shipment was processed.
        /// </summary>
        /// <value>the validation results when the shipment was processed.</value>
        [DataMember(Name = "validationResults", EmitDefaultValue = false)]
        public List<ValidationResult> ValidationResults { get; set; }

        /// <summary>
        /// the fulfillment workflow is in error.
        /// </summary>
        /// <value>the fulfillment workflow is in error.</value>
        [DataMember(Name = "workflowInError", EmitDefaultValue = true)]
        public bool WorkflowInError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentFulfillmentState {\n");
            sb.Append("  AllowedManualTransitions: ").Append(AllowedManualTransitions).Append("\n");
            sb.Append("  AllowedStatusChanges: ").Append(AllowedStatusChanges).Append("\n");
            sb.Append("  AllowsShipmentChangesProcessing: ").Append(AllowsShipmentChangesProcessing).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ExecutionResult: ").Append(ExecutionResult).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentLocationScope: ").Append(FulfillmentLocationScope).Append("\n");
            sb.Append("  FulfillmentMethodType: ").Append(FulfillmentMethodType).Append("\n");
            sb.Append("  FulfillmentProviderId: ").Append(FulfillmentProviderId).Append("\n");
            sb.Append("  FulfillmentScheduledTimeBeginDate: ").Append(FulfillmentScheduledTimeBeginDate).Append("\n");
            sb.Append("  FulfillmentScheduledTimeEndDate: ").Append(FulfillmentScheduledTimeEndDate).Append("\n");
            sb.Append("  IsFinished: ").Append(IsFinished).Append("\n");
            sb.Append("  IsProcessing: ").Append(IsProcessing).Append("\n");
            sb.Append("  IsResumable: ").Append(IsResumable).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LockedForTaskProcessingUntil: ").Append(LockedForTaskProcessingUntil).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  NextStatuses: ").Append(NextStatuses).Append("\n");
            sb.Append("  PickUpLocationId: ").Append(PickUpLocationId).Append("\n");
            sb.Append("  ReadyToBeginFulfillmentOn: ").Append(ReadyToBeginFulfillmentOn).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentLastProcessedOn: ").Append(ShipmentLastProcessedOn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskStatus: ").Append(TaskStatus).Append("\n");
            sb.Append("  TaskWorkflowXamlPath: ").Append(TaskWorkflowXamlPath).Append("\n");
            sb.Append("  ValidationResults: ").Append(ValidationResults).Append("\n");
            sb.Append("  WorkflowInError: ").Append(WorkflowInError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentFulfillmentState);
        }

        /// <summary>
        /// Returns true if ShipmentFulfillmentState instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentFulfillmentState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentFulfillmentState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowedManualTransitions == input.AllowedManualTransitions ||
                    this.AllowedManualTransitions != null &&
                    input.AllowedManualTransitions != null &&
                    this.AllowedManualTransitions.SequenceEqual(input.AllowedManualTransitions)
                ) && 
                (
                    this.AllowedStatusChanges == input.AllowedStatusChanges ||
                    this.AllowedStatusChanges != null &&
                    input.AllowedStatusChanges != null &&
                    this.AllowedStatusChanges.SequenceEqual(input.AllowedStatusChanges)
                ) && 
                (
                    this.AllowsShipmentChangesProcessing == input.AllowsShipmentChangesProcessing ||
                    this.AllowsShipmentChangesProcessing.Equals(input.AllowsShipmentChangesProcessing)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.ExecutionResult == input.ExecutionResult ||
                    this.ExecutionResult.Equals(input.ExecutionResult)
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentLocationScope == input.FulfillmentLocationScope ||
                    (this.FulfillmentLocationScope != null &&
                    this.FulfillmentLocationScope.Equals(input.FulfillmentLocationScope))
                ) && 
                (
                    this.FulfillmentMethodType == input.FulfillmentMethodType ||
                    this.FulfillmentMethodType.Equals(input.FulfillmentMethodType)
                ) && 
                (
                    this.FulfillmentProviderId == input.FulfillmentProviderId ||
                    (this.FulfillmentProviderId != null &&
                    this.FulfillmentProviderId.Equals(input.FulfillmentProviderId))
                ) && 
                (
                    this.FulfillmentScheduledTimeBeginDate == input.FulfillmentScheduledTimeBeginDate ||
                    (this.FulfillmentScheduledTimeBeginDate != null &&
                    this.FulfillmentScheduledTimeBeginDate.Equals(input.FulfillmentScheduledTimeBeginDate))
                ) && 
                (
                    this.FulfillmentScheduledTimeEndDate == input.FulfillmentScheduledTimeEndDate ||
                    (this.FulfillmentScheduledTimeEndDate != null &&
                    this.FulfillmentScheduledTimeEndDate.Equals(input.FulfillmentScheduledTimeEndDate))
                ) && 
                (
                    this.IsFinished == input.IsFinished ||
                    this.IsFinished.Equals(input.IsFinished)
                ) && 
                (
                    this.IsProcessing == input.IsProcessing ||
                    this.IsProcessing.Equals(input.IsProcessing)
                ) && 
                (
                    this.IsResumable == input.IsResumable ||
                    this.IsResumable.Equals(input.IsResumable)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LockedForTaskProcessingUntil == input.LockedForTaskProcessingUntil ||
                    (this.LockedForTaskProcessingUntil != null &&
                    this.LockedForTaskProcessingUntil.Equals(input.LockedForTaskProcessingUntil))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.NextStatuses == input.NextStatuses ||
                    this.NextStatuses != null &&
                    input.NextStatuses != null &&
                    this.NextStatuses.SequenceEqual(input.NextStatuses)
                ) && 
                (
                    this.PickUpLocationId == input.PickUpLocationId ||
                    (this.PickUpLocationId != null &&
                    this.PickUpLocationId.Equals(input.PickUpLocationId))
                ) && 
                (
                    this.ReadyToBeginFulfillmentOn == input.ReadyToBeginFulfillmentOn ||
                    (this.ReadyToBeginFulfillmentOn != null &&
                    this.ReadyToBeginFulfillmentOn.Equals(input.ReadyToBeginFulfillmentOn))
                ) && 
                (
                    this.RetryCount == input.RetryCount ||
                    this.RetryCount.Equals(input.RetryCount)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShipmentLastProcessedOn == input.ShipmentLastProcessedOn ||
                    (this.ShipmentLastProcessedOn != null &&
                    this.ShipmentLastProcessedOn.Equals(input.ShipmentLastProcessedOn))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.TaskStatus == input.TaskStatus ||
                    (this.TaskStatus != null &&
                    this.TaskStatus.Equals(input.TaskStatus))
                ) && 
                (
                    this.TaskWorkflowXamlPath == input.TaskWorkflowXamlPath ||
                    (this.TaskWorkflowXamlPath != null &&
                    this.TaskWorkflowXamlPath.Equals(input.TaskWorkflowXamlPath))
                ) && 
                (
                    this.ValidationResults == input.ValidationResults ||
                    this.ValidationResults != null &&
                    input.ValidationResults != null &&
                    this.ValidationResults.SequenceEqual(input.ValidationResults)
                ) && 
                (
                    this.WorkflowInError == input.WorkflowInError ||
                    this.WorkflowInError.Equals(input.WorkflowInError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedManualTransitions != null)
                    hashCode = hashCode * 59 + this.AllowedManualTransitions.GetHashCode();
                if (this.AllowedStatusChanges != null)
                    hashCode = hashCode * 59 + this.AllowedStatusChanges.GetHashCode();
                hashCode = hashCode * 59 + this.AllowsShipmentChangesProcessing.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                hashCode = hashCode * 59 + this.ExecutionResult.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.FulfillmentLocationScope != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationScope.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentMethodType.GetHashCode();
                if (this.FulfillmentProviderId != null)
                    hashCode = hashCode * 59 + this.FulfillmentProviderId.GetHashCode();
                if (this.FulfillmentScheduledTimeBeginDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeBeginDate.GetHashCode();
                if (this.FulfillmentScheduledTimeEndDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeEndDate.GetHashCode();
                hashCode = hashCode * 59 + this.IsFinished.GetHashCode();
                hashCode = hashCode * 59 + this.IsProcessing.GetHashCode();
                hashCode = hashCode * 59 + this.IsResumable.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.LockedForTaskProcessingUntil != null)
                    hashCode = hashCode * 59 + this.LockedForTaskProcessingUntil.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.NextStatuses != null)
                    hashCode = hashCode * 59 + this.NextStatuses.GetHashCode();
                if (this.PickUpLocationId != null)
                    hashCode = hashCode * 59 + this.PickUpLocationId.GetHashCode();
                if (this.ReadyToBeginFulfillmentOn != null)
                    hashCode = hashCode * 59 + this.ReadyToBeginFulfillmentOn.GetHashCode();
                hashCode = hashCode * 59 + this.RetryCount.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShipmentLastProcessedOn != null)
                    hashCode = hashCode * 59 + this.ShipmentLastProcessedOn.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.TaskStatus != null)
                    hashCode = hashCode * 59 + this.TaskStatus.GetHashCode();
                if (this.TaskWorkflowXamlPath != null)
                    hashCode = hashCode * 59 + this.TaskWorkflowXamlPath.GetHashCode();
                if (this.ValidationResults != null)
                    hashCode = hashCode * 59 + this.ValidationResults.GetHashCode();
                hashCode = hashCode * 59 + this.WorkflowInError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
