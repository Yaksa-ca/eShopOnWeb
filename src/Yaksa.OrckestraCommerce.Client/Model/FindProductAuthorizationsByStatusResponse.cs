/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FindProductAuthorizationsByStatusResponse
    /// </summary>
    [DataContract(Name = "FindProductAuthorizationsByStatusResponse")]
    public partial class FindProductAuthorizationsByStatusResponse : IEquatable<FindProductAuthorizationsByStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindProductAuthorizationsByStatusResponse" /> class.
        /// </summary>
        /// <param name="productAuthorizations">The list of product authorizations that were found..</param>
        /// <param name="count">The number of product authorizations included in the response.</param>
        /// <param name="totalCount">The total number of product authorizations that were found.</param>
        /// <param name="pages">The number of pages required to display all the results.</param>
        public FindProductAuthorizationsByStatusResponse(List<ProductCustomerAuthorization> productAuthorizations = default(List<ProductCustomerAuthorization>), int count = default(int), int totalCount = default(int), int pages = default(int))
        {
            this.ProductAuthorizations = productAuthorizations;
            this.Count = count;
            this.TotalCount = totalCount;
            this.Pages = pages;
        }

        /// <summary>
        /// The list of product authorizations that were found.
        /// </summary>
        /// <value>The list of product authorizations that were found.</value>
        [DataMember(Name = "productAuthorizations", EmitDefaultValue = false)]
        public List<ProductCustomerAuthorization> ProductAuthorizations { get; set; }

        /// <summary>
        /// The number of product authorizations included in the response
        /// </summary>
        /// <value>The number of product authorizations included in the response</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// The total number of product authorizations that were found
        /// </summary>
        /// <value>The total number of product authorizations that were found</value>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public int TotalCount { get; set; }

        /// <summary>
        /// The number of pages required to display all the results
        /// </summary>
        /// <value>The number of pages required to display all the results</value>
        [DataMember(Name = "pages", EmitDefaultValue = false)]
        public int Pages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindProductAuthorizationsByStatusResponse {\n");
            sb.Append("  ProductAuthorizations: ").Append(ProductAuthorizations).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindProductAuthorizationsByStatusResponse);
        }

        /// <summary>
        /// Returns true if FindProductAuthorizationsByStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FindProductAuthorizationsByStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindProductAuthorizationsByStatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductAuthorizations == input.ProductAuthorizations ||
                    this.ProductAuthorizations != null &&
                    input.ProductAuthorizations != null &&
                    this.ProductAuthorizations.SequenceEqual(input.ProductAuthorizations)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                ) && 
                (
                    this.Pages == input.Pages ||
                    this.Pages.Equals(input.Pages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductAuthorizations != null)
                    hashCode = hashCode * 59 + this.ProductAuthorizations.GetHashCode();
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                hashCode = hashCode * 59 + this.Pages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
