/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "CreateFulfillmentPackageRequest")]
    public partial class CreateFulfillmentPackageRequest : IEquatable<CreateFulfillmentPackageRequest>, IValidatableObject
    {
        /// <summary>
        /// The carrier manifest requirement.
        /// </summary>
        /// <value>The carrier manifest requirement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierManifestRequirementEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Required for value: Required
            /// </summary>
            [EnumMember(Value = "Required")]
            Required = 2,

            /// <summary>
            /// Enum NotRequired for value: NotRequired
            /// </summary>
            [EnumMember(Value = "NotRequired")]
            NotRequired = 3,

            /// <summary>
            /// Enum Excluded for value: Excluded
            /// </summary>
            [EnumMember(Value = "Excluded")]
            Excluded = 4

        }


        /// <summary>
        /// The carrier manifest requirement.
        /// </summary>
        /// <value>The carrier manifest requirement.</value>
        [DataMember(Name = "carrierManifestRequirement", EmitDefaultValue = false)]
        public CarrierManifestRequirementEnum? CarrierManifestRequirement { get; set; }
        /// <summary>
        /// The carrier manifest status.
        /// </summary>
        /// <value>The carrier manifest status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierManifestStatusEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,

            /// <summary>
            /// Enum Manifested for value: Manifested
            /// </summary>
            [EnumMember(Value = "Manifested")]
            Manifested = 3,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 4

        }


        /// <summary>
        /// The carrier manifest status.
        /// </summary>
        /// <value>The carrier manifest status.</value>
        [DataMember(Name = "carrierManifestStatus", EmitDefaultValue = false)]
        public CarrierManifestStatusEnum? CarrierManifestStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentPackageRequest" /> class.
        /// </summary>
        /// <param name="carrierAccountIdOutbound">The carrier account id used for the package for outbound..</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name used for the package for outbound..</param>
        /// <param name="carrierManifestRequirement">The carrier manifest requirement..</param>
        /// <param name="carrierManifestStatus">The carrier manifest status..</param>
        /// <param name="carrierNameOutbound">The carrier name used for the package for outbound..</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level used for the package for outbound..</param>
        /// <param name="fulfillmentPackageItems">The fulfillment package items..</param>
        /// <param name="fulfillmentPackageTypeId">The fulfillment package type identifier..</param>
        /// <param name="id">The fulfillment package identifier..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="returnTrackingNumber">The return tracking number..</param>
        /// <param name="returnTrackingReferenceId">The return tracking reference id..</param>
        /// <param name="returnTrackingUrl">The return tracking url..</param>
        /// <param name="trackingNumber">The tracking number..</param>
        /// <param name="trackingReferenceId">The tracking reference id..</param>
        /// <param name="trackingUrl">The tracking url..</param>
        public CreateFulfillmentPackageRequest(string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), CarrierManifestRequirementEnum? carrierManifestRequirement = default(CarrierManifestRequirementEnum?), CarrierManifestStatusEnum? carrierManifestStatus = default(CarrierManifestStatusEnum?), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), List<FulfillmentPackageItem> fulfillmentPackageItems = default(List<FulfillmentPackageItem>), string fulfillmentPackageTypeId = default(string), string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string returnTrackingNumber = default(string), string returnTrackingReferenceId = default(string), string returnTrackingUrl = default(string), string trackingNumber = default(string), string trackingReferenceId = default(string), string trackingUrl = default(string))
        {
            this.CarrierAccountIdOutbound = carrierAccountIdOutbound;
            this.CarrierAccountNameOutbound = carrierAccountNameOutbound;
            this.CarrierManifestRequirement = carrierManifestRequirement;
            this.CarrierManifestStatus = carrierManifestStatus;
            this.CarrierNameOutbound = carrierNameOutbound;
            this.CarrierServiceLevelOutbound = carrierServiceLevelOutbound;
            this.FulfillmentPackageItems = fulfillmentPackageItems;
            this.FulfillmentPackageTypeId = fulfillmentPackageTypeId;
            this.Id = id;
            this.PropertyBag = propertyBag;
            this.ReturnTrackingNumber = returnTrackingNumber;
            this.ReturnTrackingReferenceId = returnTrackingReferenceId;
            this.ReturnTrackingUrl = returnTrackingUrl;
            this.TrackingNumber = trackingNumber;
            this.TrackingReferenceId = trackingReferenceId;
            this.TrackingUrl = trackingUrl;
        }

        /// <summary>
        /// The carrier account id used for the package for outbound.
        /// </summary>
        /// <value>The carrier account id used for the package for outbound.</value>
        [DataMember(Name = "carrierAccountIdOutbound", EmitDefaultValue = false)]
        public string CarrierAccountIdOutbound { get; set; }

        /// <summary>
        /// The carrier account name used for the package for outbound.
        /// </summary>
        /// <value>The carrier account name used for the package for outbound.</value>
        [DataMember(Name = "carrierAccountNameOutbound", EmitDefaultValue = false)]
        public string CarrierAccountNameOutbound { get; set; }

        /// <summary>
        /// The carrier name used for the package for outbound.
        /// </summary>
        /// <value>The carrier name used for the package for outbound.</value>
        [DataMember(Name = "carrierNameOutbound", EmitDefaultValue = false)]
        public string CarrierNameOutbound { get; set; }

        /// <summary>
        /// The carrier service level used for the package for outbound.
        /// </summary>
        /// <value>The carrier service level used for the package for outbound.</value>
        [DataMember(Name = "carrierServiceLevelOutbound", EmitDefaultValue = false)]
        public string CarrierServiceLevelOutbound { get; set; }

        /// <summary>
        /// The fulfillment package items.
        /// </summary>
        /// <value>The fulfillment package items.</value>
        [DataMember(Name = "fulfillmentPackageItems", EmitDefaultValue = false)]
        public List<FulfillmentPackageItem> FulfillmentPackageItems { get; set; }

        /// <summary>
        /// The fulfillment package type identifier.
        /// </summary>
        /// <value>The fulfillment package type identifier.</value>
        [DataMember(Name = "fulfillmentPackageTypeId", EmitDefaultValue = false)]
        public string FulfillmentPackageTypeId { get; set; }

        /// <summary>
        /// The fulfillment package identifier.
        /// </summary>
        /// <value>The fulfillment package identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The return tracking number.
        /// </summary>
        /// <value>The return tracking number.</value>
        [DataMember(Name = "returnTrackingNumber", EmitDefaultValue = false)]
        public string ReturnTrackingNumber { get; set; }

        /// <summary>
        /// The return tracking reference id.
        /// </summary>
        /// <value>The return tracking reference id.</value>
        [DataMember(Name = "returnTrackingReferenceId", EmitDefaultValue = false)]
        public string ReturnTrackingReferenceId { get; set; }

        /// <summary>
        /// The return tracking url.
        /// </summary>
        /// <value>The return tracking url.</value>
        [DataMember(Name = "returnTrackingUrl", EmitDefaultValue = false)]
        public string ReturnTrackingUrl { get; set; }

        /// <summary>
        /// The tracking number.
        /// </summary>
        /// <value>The tracking number.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// The tracking reference id.
        /// </summary>
        /// <value>The tracking reference id.</value>
        [DataMember(Name = "trackingReferenceId", EmitDefaultValue = false)]
        public string TrackingReferenceId { get; set; }

        /// <summary>
        /// The tracking url.
        /// </summary>
        /// <value>The tracking url.</value>
        [DataMember(Name = "trackingUrl", EmitDefaultValue = false)]
        public string TrackingUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFulfillmentPackageRequest {\n");
            sb.Append("  CarrierAccountIdOutbound: ").Append(CarrierAccountIdOutbound).Append("\n");
            sb.Append("  CarrierAccountNameOutbound: ").Append(CarrierAccountNameOutbound).Append("\n");
            sb.Append("  CarrierManifestRequirement: ").Append(CarrierManifestRequirement).Append("\n");
            sb.Append("  CarrierManifestStatus: ").Append(CarrierManifestStatus).Append("\n");
            sb.Append("  CarrierNameOutbound: ").Append(CarrierNameOutbound).Append("\n");
            sb.Append("  CarrierServiceLevelOutbound: ").Append(CarrierServiceLevelOutbound).Append("\n");
            sb.Append("  FulfillmentPackageItems: ").Append(FulfillmentPackageItems).Append("\n");
            sb.Append("  FulfillmentPackageTypeId: ").Append(FulfillmentPackageTypeId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  ReturnTrackingNumber: ").Append(ReturnTrackingNumber).Append("\n");
            sb.Append("  ReturnTrackingReferenceId: ").Append(ReturnTrackingReferenceId).Append("\n");
            sb.Append("  ReturnTrackingUrl: ").Append(ReturnTrackingUrl).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  TrackingReferenceId: ").Append(TrackingReferenceId).Append("\n");
            sb.Append("  TrackingUrl: ").Append(TrackingUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFulfillmentPackageRequest);
        }

        /// <summary>
        /// Returns true if CreateFulfillmentPackageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFulfillmentPackageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFulfillmentPackageRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CarrierAccountIdOutbound == input.CarrierAccountIdOutbound ||
                    (this.CarrierAccountIdOutbound != null &&
                    this.CarrierAccountIdOutbound.Equals(input.CarrierAccountIdOutbound))
                ) && 
                (
                    this.CarrierAccountNameOutbound == input.CarrierAccountNameOutbound ||
                    (this.CarrierAccountNameOutbound != null &&
                    this.CarrierAccountNameOutbound.Equals(input.CarrierAccountNameOutbound))
                ) && 
                (
                    this.CarrierManifestRequirement == input.CarrierManifestRequirement ||
                    this.CarrierManifestRequirement.Equals(input.CarrierManifestRequirement)
                ) && 
                (
                    this.CarrierManifestStatus == input.CarrierManifestStatus ||
                    this.CarrierManifestStatus.Equals(input.CarrierManifestStatus)
                ) && 
                (
                    this.CarrierNameOutbound == input.CarrierNameOutbound ||
                    (this.CarrierNameOutbound != null &&
                    this.CarrierNameOutbound.Equals(input.CarrierNameOutbound))
                ) && 
                (
                    this.CarrierServiceLevelOutbound == input.CarrierServiceLevelOutbound ||
                    (this.CarrierServiceLevelOutbound != null &&
                    this.CarrierServiceLevelOutbound.Equals(input.CarrierServiceLevelOutbound))
                ) && 
                (
                    this.FulfillmentPackageItems == input.FulfillmentPackageItems ||
                    this.FulfillmentPackageItems != null &&
                    input.FulfillmentPackageItems != null &&
                    this.FulfillmentPackageItems.SequenceEqual(input.FulfillmentPackageItems)
                ) && 
                (
                    this.FulfillmentPackageTypeId == input.FulfillmentPackageTypeId ||
                    (this.FulfillmentPackageTypeId != null &&
                    this.FulfillmentPackageTypeId.Equals(input.FulfillmentPackageTypeId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.ReturnTrackingNumber == input.ReturnTrackingNumber ||
                    (this.ReturnTrackingNumber != null &&
                    this.ReturnTrackingNumber.Equals(input.ReturnTrackingNumber))
                ) && 
                (
                    this.ReturnTrackingReferenceId == input.ReturnTrackingReferenceId ||
                    (this.ReturnTrackingReferenceId != null &&
                    this.ReturnTrackingReferenceId.Equals(input.ReturnTrackingReferenceId))
                ) && 
                (
                    this.ReturnTrackingUrl == input.ReturnTrackingUrl ||
                    (this.ReturnTrackingUrl != null &&
                    this.ReturnTrackingUrl.Equals(input.ReturnTrackingUrl))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.TrackingReferenceId == input.TrackingReferenceId ||
                    (this.TrackingReferenceId != null &&
                    this.TrackingReferenceId.Equals(input.TrackingReferenceId))
                ) && 
                (
                    this.TrackingUrl == input.TrackingUrl ||
                    (this.TrackingUrl != null &&
                    this.TrackingUrl.Equals(input.TrackingUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierAccountIdOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierAccountIdOutbound.GetHashCode();
                if (this.CarrierAccountNameOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierAccountNameOutbound.GetHashCode();
                hashCode = hashCode * 59 + this.CarrierManifestRequirement.GetHashCode();
                hashCode = hashCode * 59 + this.CarrierManifestStatus.GetHashCode();
                if (this.CarrierNameOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierNameOutbound.GetHashCode();
                if (this.CarrierServiceLevelOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierServiceLevelOutbound.GetHashCode();
                if (this.FulfillmentPackageItems != null)
                    hashCode = hashCode * 59 + this.FulfillmentPackageItems.GetHashCode();
                if (this.FulfillmentPackageTypeId != null)
                    hashCode = hashCode * 59 + this.FulfillmentPackageTypeId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.ReturnTrackingNumber != null)
                    hashCode = hashCode * 59 + this.ReturnTrackingNumber.GetHashCode();
                if (this.ReturnTrackingReferenceId != null)
                    hashCode = hashCode * 59 + this.ReturnTrackingReferenceId.GetHashCode();
                if (this.ReturnTrackingUrl != null)
                    hashCode = hashCode * 59 + this.ReturnTrackingUrl.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.TrackingReferenceId != null)
                    hashCode = hashCode * 59 + this.TrackingReferenceId.GetHashCode();
                if (this.TrackingUrl != null)
                    hashCode = hashCode * 59 + this.TrackingUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
