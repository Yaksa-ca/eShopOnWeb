/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentPackageType
    /// </summary>
    [DataContract(Name = "FulfillmentPackageType")]
    public partial class FulfillmentPackageType : IEquatable<FulfillmentPackageType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPackageType" /> class.
        /// </summary>
        /// <param name="created">The date The fulfillment package type was created..</param>
        /// <param name="createdBy">the identifier of the operator who created the fulfillment package type..</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="distanceUOM">The Distance UOM..</param>
        /// <param name="height">The UOM Height..</param>
        /// <param name="id">The fulfillment package type identifier..</param>
        /// <param name="isActive">The active flag for the fulfillment package Type..</param>
        /// <param name="lastModified">the date that the last modification was applied to the fulfillment package type..</param>
        /// <param name="lastModifiedBy">The identifier of the operator who last modified the fulfillment package type..</param>
        /// <param name="length">The UOM Length..</param>
        /// <param name="scopeId">The scope identifier..</param>
        /// <param name="shortDisplayName">shortDisplayName.</param>
        /// <param name="width">The UOM Width..</param>
        public FulfillmentPackageType(DateTime created = default(DateTime), string createdBy = default(string), Dictionary<string, string> description = default(Dictionary<string, string>), Dictionary<string, string> displayName = default(Dictionary<string, string>), string distanceUOM = default(string), double height = default(double), string id = default(string), bool isActive = default(bool), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), double length = default(double), string scopeId = default(string), Dictionary<string, string> shortDisplayName = default(Dictionary<string, string>), double width = default(double))
        {
            this.Created = created;
            this.CreatedBy = createdBy;
            this.Description = description;
            this.DisplayName = displayName;
            this.DistanceUOM = distanceUOM;
            this.Height = height;
            this.Id = id;
            this.IsActive = isActive;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.Length = length;
            this.ScopeId = scopeId;
            this.ShortDisplayName = shortDisplayName;
            this.Width = width;
        }

        /// <summary>
        /// The date The fulfillment package type was created.
        /// </summary>
        /// <value>The date The fulfillment package type was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the identifier of the operator who created the fulfillment package type.
        /// </summary>
        /// <value>the identifier of the operator who created the fulfillment package type.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The Distance UOM.
        /// </summary>
        /// <value>The Distance UOM.</value>
        [DataMember(Name = "distanceUOM", EmitDefaultValue = false)]
        public string DistanceUOM { get; set; }

        /// <summary>
        /// The UOM Height.
        /// </summary>
        /// <value>The UOM Height.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public double Height { get; set; }

        /// <summary>
        /// The fulfillment package type identifier.
        /// </summary>
        /// <value>The fulfillment package type identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The active flag for the fulfillment package Type.
        /// </summary>
        /// <value>The active flag for the fulfillment package Type.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// the date that the last modification was applied to the fulfillment package type.
        /// </summary>
        /// <value>the date that the last modification was applied to the fulfillment package type.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The identifier of the operator who last modified the fulfillment package type.
        /// </summary>
        /// <value>The identifier of the operator who last modified the fulfillment package type.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The UOM Length.
        /// </summary>
        /// <value>The UOM Length.</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public double Length { get; set; }

        /// <summary>
        /// The scope identifier.
        /// </summary>
        /// <value>The scope identifier.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Gets or Sets ShortDisplayName
        /// </summary>
        [DataMember(Name = "shortDisplayName", EmitDefaultValue = false)]
        public Dictionary<string, string> ShortDisplayName { get; set; }

        /// <summary>
        /// The UOM Width.
        /// </summary>
        /// <value>The UOM Width.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public double Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentPackageType {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DistanceUOM: ").Append(DistanceUOM).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  ShortDisplayName: ").Append(ShortDisplayName).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentPackageType);
        }

        /// <summary>
        /// Returns true if FulfillmentPackageType instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentPackageType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentPackageType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.DistanceUOM == input.DistanceUOM ||
                    (this.DistanceUOM != null &&
                    this.DistanceUOM.Equals(input.DistanceUOM))
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.ShortDisplayName == input.ShortDisplayName ||
                    this.ShortDisplayName != null &&
                    input.ShortDisplayName != null &&
                    this.ShortDisplayName.SequenceEqual(input.ShortDisplayName)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.DistanceUOM != null)
                    hashCode = hashCode * 59 + this.DistanceUOM.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.ShortDisplayName != null)
                    hashCode = hashCode * 59 + this.ShortDisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
