/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "ChangeOrderStatusRequest")]
    public partial class ChangeOrderStatusRequest : IEquatable<ChangeOrderStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeOrderStatusRequest" /> class.
        /// </summary>
        /// <param name="notes">An additional description or comment about the status change request. This information is automatically appended to the order notes..</param>
        /// <param name="reason">The defined reason, if any, why the change is requested..</param>
        /// <param name="requestedStatus">The status the shipments should be transitioned to. This value needs to be part of the ShipmentFulfillmentState.AllowedStatusChanges otherwise will fail..</param>
        public ChangeOrderStatusRequest(string notes = default(string), string reason = default(string), string requestedStatus = default(string))
        {
            this.Notes = notes;
            this.Reason = reason;
            this.RequestedStatus = requestedStatus;
        }

        /// <summary>
        /// An additional description or comment about the status change request. This information is automatically appended to the order notes.
        /// </summary>
        /// <value>An additional description or comment about the status change request. This information is automatically appended to the order notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// The defined reason, if any, why the change is requested.
        /// </summary>
        /// <value>The defined reason, if any, why the change is requested.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// The status the shipments should be transitioned to. This value needs to be part of the ShipmentFulfillmentState.AllowedStatusChanges otherwise will fail.
        /// </summary>
        /// <value>The status the shipments should be transitioned to. This value needs to be part of the ShipmentFulfillmentState.AllowedStatusChanges otherwise will fail.</value>
        [DataMember(Name = "requestedStatus", EmitDefaultValue = false)]
        public string RequestedStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeOrderStatusRequest {\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RequestedStatus: ").Append(RequestedStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeOrderStatusRequest);
        }

        /// <summary>
        /// Returns true if ChangeOrderStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeOrderStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeOrderStatusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.RequestedStatus == input.RequestedStatus ||
                    (this.RequestedStatus != null &&
                    this.RequestedStatus.Equals(input.RequestedStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.RequestedStatus != null)
                    hashCode = hashCode * 59 + this.RequestedStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
