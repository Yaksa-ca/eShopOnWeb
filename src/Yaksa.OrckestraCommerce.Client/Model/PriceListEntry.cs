/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PriceListEntry
    /// </summary>
    [DataContract(Name = "PriceListEntry")]
    public partial class PriceListEntry : IEquatable<PriceListEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListEntry" /> class.
        /// </summary>
        /// <param name="isIgnored">Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope.</param>
        /// <param name="price">The price.</param>
        /// <param name="priceListId">The id of the price List.</param>
        /// <param name="productId">The id of the product.</param>
        /// <param name="variantId">The id of the variant.</param>
        public PriceListEntry(bool isIgnored = default(bool), double price = default(double), string priceListId = default(string), string productId = default(string), string variantId = default(string))
        {
            this.IsIgnored = isIgnored;
            this.Price = price;
            this.PriceListId = priceListId;
            this.ProductId = productId;
            this.VariantId = variantId;
        }

        /// <summary>
        /// Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope
        /// </summary>
        /// <value>Gets or sets a value indicating whether the price should be ignored, default is false. If set to true, the price entry will override the parent but will be ignored at the scope level, thus fallbacking to the next available price entry in the current scope</value>
        [DataMember(Name = "isIgnored", EmitDefaultValue = true)]
        public bool IsIgnored { get; set; }

        /// <summary>
        /// The price
        /// </summary>
        /// <value>The price</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// The id of the price List
        /// </summary>
        /// <value>The id of the price List</value>
        [DataMember(Name = "priceListId", EmitDefaultValue = false)]
        public string PriceListId { get; set; }

        /// <summary>
        /// The id of the product
        /// </summary>
        /// <value>The id of the product</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// The id of the variant
        /// </summary>
        /// <value>The id of the variant</value>
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceListEntry {\n");
            sb.Append("  IsIgnored: ").Append(IsIgnored).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceListId: ").Append(PriceListId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceListEntry);
        }

        /// <summary>
        /// Returns true if PriceListEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceListEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceListEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsIgnored == input.IsIgnored ||
                    this.IsIgnored.Equals(input.IsIgnored)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.PriceListId == input.PriceListId ||
                    (this.PriceListId != null &&
                    this.PriceListId.Equals(input.PriceListId))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IsIgnored.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.PriceListId != null)
                    hashCode = hashCode * 59 + this.PriceListId.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
