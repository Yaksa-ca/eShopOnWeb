/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Inventory items are a combination of InventoryQuantity and InventorySchedules.
    /// </summary>
    [DataContract(Name = "GetInventoryItemsByScopeAndSkuRequest")]
    public partial class GetInventoryItemsByScopeAndSkuRequest : IEquatable<GetInventoryItemsByScopeAndSkuRequest>, IValidatableObject
    {
        /// <summary>
        /// The sort direction. (Ascending or descending)
        /// </summary>
        /// <value>The sort direction. (Ascending or descending)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 1,

            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 2

        }


        /// <summary>
        /// The sort direction. (Ascending or descending)
        /// </summary>
        /// <value>The sort direction. (Ascending or descending)</value>
        [DataMember(Name = "sortDirection", EmitDefaultValue = false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// the sort order field.
        /// </summary>
        /// <value>the sort order field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortOrderFieldEnum
        {
            /// <summary>
            /// Enum FulfillmentLocationNumber for value: FulfillmentLocationNumber
            /// </summary>
            [EnumMember(Value = "FulfillmentLocationNumber")]
            FulfillmentLocationNumber = 1,

            /// <summary>
            /// Enum Status for value: Status
            /// </summary>
            [EnumMember(Value = "Status")]
            Status = 2,

            /// <summary>
            /// Enum Quantity for value: Quantity
            /// </summary>
            [EnumMember(Value = "Quantity")]
            Quantity = 3,

            /// <summary>
            /// Enum ReservedQuantity for value: ReservedQuantity
            /// </summary>
            [EnumMember(Value = "ReservedQuantity")]
            ReservedQuantity = 4,

            /// <summary>
            /// Enum AvailableToPromiseQuantity for value: AvailableToPromiseQuantity
            /// </summary>
            [EnumMember(Value = "AvailableToPromiseQuantity")]
            AvailableToPromiseQuantity = 5

        }


        /// <summary>
        /// the sort order field.
        /// </summary>
        /// <value>the sort order field.</value>
        [DataMember(Name = "sortOrderField", EmitDefaultValue = false)]
        public SortOrderFieldEnum? SortOrderField { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInventoryItemsByScopeAndSkuRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="date">The date which will be used to compute the status. If is not set, DateTime.Now will be used..</param>
        /// <param name="includeChildScopes">Whether inventory locations from child scopes should also be included in the results..</param>
        /// <param name="maximumItems">The maximum items returned by the search query, default to 50.</param>
        /// <param name="sku">Sku which will be associated to the InventoryLocationId to retrieve InventoryItem.</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending).</param>
        /// <param name="sortOrderField">the sort order field..</param>
        /// <param name="startingIndex">The starting index.</param>
        public GetInventoryItemsByScopeAndSkuRequest(string scopeId = default(string), DateTime date = default(DateTime), bool includeChildScopes = default(bool), int maximumItems = default(int), string sku = default(string), SortDirectionEnum? sortDirection = default(SortDirectionEnum?), SortOrderFieldEnum? sortOrderField = default(SortOrderFieldEnum?), int startingIndex = default(int))
        {
            this.ScopeId = scopeId;
            this.Date = date;
            this.IncludeChildScopes = includeChildScopes;
            this.MaximumItems = maximumItems;
            this.Sku = sku;
            this.SortDirection = sortDirection;
            this.SortOrderField = sortOrderField;
            this.StartingIndex = startingIndex;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The date which will be used to compute the status. If is not set, DateTime.Now will be used.
        /// </summary>
        /// <value>The date which will be used to compute the status. If is not set, DateTime.Now will be used.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Whether inventory locations from child scopes should also be included in the results.
        /// </summary>
        /// <value>Whether inventory locations from child scopes should also be included in the results.</value>
        [DataMember(Name = "includeChildScopes", EmitDefaultValue = true)]
        public bool IncludeChildScopes { get; set; }

        /// <summary>
        /// The maximum items returned by the search query, default to 50
        /// </summary>
        /// <value>The maximum items returned by the search query, default to 50</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// Sku which will be associated to the InventoryLocationId to retrieve InventoryItem
        /// </summary>
        /// <value>Sku which will be associated to the InventoryLocationId to retrieve InventoryItem</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// The starting index
        /// </summary>
        /// <value>The starting index</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetInventoryItemsByScopeAndSkuRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  IncludeChildScopes: ").Append(IncludeChildScopes).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  SortOrderField: ").Append(SortOrderField).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetInventoryItemsByScopeAndSkuRequest);
        }

        /// <summary>
        /// Returns true if GetInventoryItemsByScopeAndSkuRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetInventoryItemsByScopeAndSkuRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetInventoryItemsByScopeAndSkuRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.IncludeChildScopes == input.IncludeChildScopes ||
                    this.IncludeChildScopes.Equals(input.IncludeChildScopes)
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    this.SortDirection.Equals(input.SortDirection)
                ) && 
                (
                    this.SortOrderField == input.SortOrderField ||
                    this.SortOrderField.Equals(input.SortOrderField)
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeChildScopes.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                hashCode = hashCode * 59 + this.SortOrderField.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
