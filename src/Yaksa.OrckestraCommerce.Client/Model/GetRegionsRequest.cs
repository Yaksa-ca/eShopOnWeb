/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    /// </summary>
    [DataContract(Name = "GetRegionsRequest")]
    public partial class GetRegionsRequest : IEquatable<GetRegionsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRegionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetRegionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRegionsRequest" /> class.
        /// </summary>
        /// <param name="countryIsoCode">The unique countryIsoCode that identifies the country whose regions will be retrieved (required).</param>
        /// <param name="cultureName">The culture name in which language the data will be returned.</param>
        /// <param name="includeUnsupported">Whether to include the unsupported regions.</param>
        public GetRegionsRequest(string countryIsoCode = default(string), string cultureName = default(string), bool includeUnsupported = default(bool))
        {
            // to ensure "countryIsoCode" is required (not null)
            this.CountryIsoCode = countryIsoCode ?? throw new ArgumentNullException("countryIsoCode is a required property for GetRegionsRequest and cannot be null");
            this.CultureName = cultureName;
            this.IncludeUnsupported = includeUnsupported;
        }

        /// <summary>
        /// The unique countryIsoCode that identifies the country whose regions will be retrieved
        /// </summary>
        /// <value>The unique countryIsoCode that identifies the country whose regions will be retrieved</value>
        [DataMember(Name = "countryIsoCode", IsRequired = true, EmitDefaultValue = false)]
        public string CountryIsoCode { get; set; }

        /// <summary>
        /// The culture name in which language the data will be returned
        /// </summary>
        /// <value>The culture name in which language the data will be returned</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// Whether to include the unsupported regions
        /// </summary>
        /// <value>Whether to include the unsupported regions</value>
        [DataMember(Name = "includeUnsupported", EmitDefaultValue = true)]
        public bool IncludeUnsupported { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetRegionsRequest {\n");
            sb.Append("  CountryIsoCode: ").Append(CountryIsoCode).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  IncludeUnsupported: ").Append(IncludeUnsupported).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetRegionsRequest);
        }

        /// <summary>
        /// Returns true if GetRegionsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetRegionsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetRegionsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryIsoCode == input.CountryIsoCode ||
                    (this.CountryIsoCode != null &&
                    this.CountryIsoCode.Equals(input.CountryIsoCode))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.IncludeUnsupported == input.IncludeUnsupported ||
                    this.IncludeUnsupported.Equals(input.IncludeUnsupported)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryIsoCode != null)
                    hashCode = hashCode * 59 + this.CountryIsoCode.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeUnsupported.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
