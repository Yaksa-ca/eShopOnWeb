/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Category
    /// </summary>
    [DataContract(Name = "Category")]
    public partial class Category : IEquatable<Category>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Category() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="catalogId">The catalog id.</param>
        /// <param name="children">The child categories (list of Category).</param>
        /// <param name="created">The date of creation of the Category.</param>
        /// <param name="createdBy">The identifier of the user who created the Category.</param>
        /// <param name="definitionName">The name of the definition of the Category.</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="includeInSearch">Whether the category is included in the search.</param>
        /// <param name="lastModified">The date of the last modification to the Category.</param>
        /// <param name="lastModifiedBy">The identifier of the user who last modified the Category.</param>
        /// <param name="primaryParentCategoryId">The primary parent category id.</param>
        /// <param name="relationships">The relationships of the Category.</param>
        /// <param name="sequenceNumber">The number used for ordering the Category. An integer that allows the ordering of the categories when they are presented in a list. No restriction is given for the number (e.g. it allows two categories to have the same value for this property).</param>
        public Category(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string catalogId = default(string), List<Category> children = default(List<Category>), DateTime created = default(DateTime), string createdBy = default(string), string definitionName = default(string), Dictionary<string, string> description = default(Dictionary<string, string>), Dictionary<string, string> displayName = default(Dictionary<string, string>), bool includeInSearch = default(bool), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), string primaryParentCategoryId = default(string), List<Relationship> relationships = default(List<Relationship>), int sequenceNumber = default(int))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Category and cannot be null");
            this.PropertyBag = propertyBag;
            this.CatalogId = catalogId;
            this.Children = children;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.DefinitionName = definitionName;
            this.Description = description;
            this.DisplayName = displayName;
            this.IncludeInSearch = includeInSearch;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.PrimaryParentCategoryId = primaryParentCategoryId;
            this.Relationships = relationships;
            this.SequenceNumber = sequenceNumber;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The catalog id
        /// </summary>
        /// <value>The catalog id</value>
        [DataMember(Name = "catalogId", EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// The child categories (list of Category)
        /// </summary>
        /// <value>The child categories (list of Category)</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<Category> Children { get; set; }

        /// <summary>
        /// The date of creation of the Category
        /// </summary>
        /// <value>The date of creation of the Category</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The identifier of the user who created the Category
        /// </summary>
        /// <value>The identifier of the user who created the Category</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The name of the definition of the Category
        /// </summary>
        /// <value>The name of the definition of the Category</value>
        [DataMember(Name = "definitionName", EmitDefaultValue = false)]
        public string DefinitionName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Whether the category is included in the search
        /// </summary>
        /// <value>Whether the category is included in the search</value>
        [DataMember(Name = "includeInSearch", EmitDefaultValue = true)]
        public bool IncludeInSearch { get; set; }

        /// <summary>
        /// The date of the last modification to the Category
        /// </summary>
        /// <value>The date of the last modification to the Category</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The identifier of the user who last modified the Category
        /// </summary>
        /// <value>The identifier of the user who last modified the Category</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The primary parent category id
        /// </summary>
        /// <value>The primary parent category id</value>
        [DataMember(Name = "primaryParentCategoryId", EmitDefaultValue = false)]
        public string PrimaryParentCategoryId { get; set; }

        /// <summary>
        /// The relationships of the Category
        /// </summary>
        /// <value>The relationships of the Category</value>
        [DataMember(Name = "relationships", EmitDefaultValue = false)]
        public List<Relationship> Relationships { get; set; }

        /// <summary>
        /// The number used for ordering the Category. An integer that allows the ordering of the categories when they are presented in a list. No restriction is given for the number (e.g. it allows two categories to have the same value for this property)
        /// </summary>
        /// <value>The number used for ordering the Category. An integer that allows the ordering of the categories when they are presented in a list. No restriction is given for the number (e.g. it allows two categories to have the same value for this property)</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  DefinitionName: ").Append(DefinitionName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IncludeInSearch: ").Append(IncludeInSearch).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  PrimaryParentCategoryId: ").Append(PrimaryParentCategoryId).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Category);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="input">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.DefinitionName == input.DefinitionName ||
                    (this.DefinitionName != null &&
                    this.DefinitionName.Equals(input.DefinitionName))
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.IncludeInSearch == input.IncludeInSearch ||
                    this.IncludeInSearch.Equals(input.IncludeInSearch)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.PrimaryParentCategoryId == input.PrimaryParentCategoryId ||
                    (this.PrimaryParentCategoryId != null &&
                    this.PrimaryParentCategoryId.Equals(input.PrimaryParentCategoryId))
                ) && 
                (
                    this.Relationships == input.Relationships ||
                    this.Relationships != null &&
                    input.Relationships != null &&
                    this.Relationships.SequenceEqual(input.Relationships)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.CatalogId != null)
                    hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.DefinitionName != null)
                    hashCode = hashCode * 59 + this.DefinitionName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInSearch.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.PrimaryParentCategoryId != null)
                    hashCode = hashCode * 59 + this.PrimaryParentCategoryId.GetHashCode();
                if (this.Relationships != null)
                    hashCode = hashCode * 59 + this.Relationships.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
