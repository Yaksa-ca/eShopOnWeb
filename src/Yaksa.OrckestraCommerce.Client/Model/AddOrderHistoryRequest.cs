/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "AddOrderHistoryRequest")]
    public partial class AddOrderHistoryRequest : IEquatable<AddOrderHistoryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddOrderHistoryRequest" /> class.
        /// </summary>
        /// <param name="category">The category of this history item..</param>
        /// <param name="comment">Comment for this history item..</param>
        /// <param name="customData">customData.</param>
        /// <param name="entityId">The entity id related to the new order history item..</param>
        /// <param name="fulfillmentLocationId">The fulfillment location id related to the new order history item..</param>
        /// <param name="newValue">New value for modified entity..</param>
        /// <param name="oldValue">Old value for modified entity..</param>
        /// <param name="orderNumber">The identifier of the order related to this item..</param>
        /// <param name="reason">Reason related to entity modification..</param>
        /// <param name="shipmentId">The shipment id related to the new order history item..</param>
        public AddOrderHistoryRequest(string category = default(string), string comment = default(string), Dictionary<string, Object> customData = default(Dictionary<string, Object>), string entityId = default(string), string fulfillmentLocationId = default(string), string newValue = default(string), string oldValue = default(string), string orderNumber = default(string), string reason = default(string), string shipmentId = default(string))
        {
            this.Category = category;
            this.Comment = comment;
            this.CustomData = customData;
            this.EntityId = entityId;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.NewValue = newValue;
            this.OldValue = oldValue;
            this.OrderNumber = orderNumber;
            this.Reason = reason;
            this.ShipmentId = shipmentId;
        }

        /// <summary>
        /// The category of this history item.
        /// </summary>
        /// <value>The category of this history item.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Comment for this history item.
        /// </summary>
        /// <value>Comment for this history item.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name = "customData", EmitDefaultValue = false)]
        public Dictionary<string, Object> CustomData { get; set; }

        /// <summary>
        /// The entity id related to the new order history item.
        /// </summary>
        /// <value>The entity id related to the new order history item.</value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The fulfillment location id related to the new order history item.
        /// </summary>
        /// <value>The fulfillment location id related to the new order history item.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// New value for modified entity.
        /// </summary>
        /// <value>New value for modified entity.</value>
        [DataMember(Name = "newValue", EmitDefaultValue = false)]
        public string NewValue { get; set; }

        /// <summary>
        /// Old value for modified entity.
        /// </summary>
        /// <value>Old value for modified entity.</value>
        [DataMember(Name = "oldValue", EmitDefaultValue = false)]
        public string OldValue { get; set; }

        /// <summary>
        /// The identifier of the order related to this item.
        /// </summary>
        /// <value>The identifier of the order related to this item.</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// Reason related to entity modification.
        /// </summary>
        /// <value>Reason related to entity modification.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// The shipment id related to the new order history item.
        /// </summary>
        /// <value>The shipment id related to the new order history item.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddOrderHistoryRequest {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  OldValue: ").Append(OldValue).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddOrderHistoryRequest);
        }

        /// <summary>
        /// Returns true if AddOrderHistoryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddOrderHistoryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddOrderHistoryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CustomData == input.CustomData ||
                    this.CustomData != null &&
                    input.CustomData != null &&
                    this.CustomData.SequenceEqual(input.CustomData)
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.NewValue == input.NewValue ||
                    (this.NewValue != null &&
                    this.NewValue.Equals(input.NewValue))
                ) && 
                (
                    this.OldValue == input.OldValue ||
                    (this.OldValue != null &&
                    this.OldValue.Equals(input.OldValue))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.NewValue != null)
                    hashCode = hashCode * 59 + this.NewValue.GetHashCode();
                if (this.OldValue != null)
                    hashCode = hashCode * 59 + this.OldValue.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
