/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentShipmentStatus
    /// </summary>
    [DataContract(Name = "FulfillmentShipmentStatus")]
    public partial class FulfillmentShipmentStatus : IEquatable<FulfillmentShipmentStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipmentStatus" /> class.
        /// </summary>
        /// <param name="aggregatedStatus">The aggregated status for the location we fetch fulfillment shipments for..</param>
        /// <param name="isForPickUpLocation">A value indicating whether the shipment status needs to apply to a pick location..</param>
        /// <param name="shipmentStatus">A shipment status we want fulfillment shipments for..</param>
        public FulfillmentShipmentStatus(string aggregatedStatus = default(string), bool isForPickUpLocation = default(bool), string shipmentStatus = default(string))
        {
            this.AggregatedStatus = aggregatedStatus;
            this.IsForPickUpLocation = isForPickUpLocation;
            this.ShipmentStatus = shipmentStatus;
        }

        /// <summary>
        /// The aggregated status for the location we fetch fulfillment shipments for.
        /// </summary>
        /// <value>The aggregated status for the location we fetch fulfillment shipments for.</value>
        [DataMember(Name = "aggregatedStatus", EmitDefaultValue = false)]
        public string AggregatedStatus { get; set; }

        /// <summary>
        /// A value indicating whether the shipment status needs to apply to a pick location.
        /// </summary>
        /// <value>A value indicating whether the shipment status needs to apply to a pick location.</value>
        [DataMember(Name = "isForPickUpLocation", EmitDefaultValue = true)]
        public bool IsForPickUpLocation { get; set; }

        /// <summary>
        /// A shipment status we want fulfillment shipments for.
        /// </summary>
        /// <value>A shipment status we want fulfillment shipments for.</value>
        [DataMember(Name = "shipmentStatus", EmitDefaultValue = false)]
        public string ShipmentStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentShipmentStatus {\n");
            sb.Append("  AggregatedStatus: ").Append(AggregatedStatus).Append("\n");
            sb.Append("  IsForPickUpLocation: ").Append(IsForPickUpLocation).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentShipmentStatus);
        }

        /// <summary>
        /// Returns true if FulfillmentShipmentStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentShipmentStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentShipmentStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AggregatedStatus == input.AggregatedStatus ||
                    (this.AggregatedStatus != null &&
                    this.AggregatedStatus.Equals(input.AggregatedStatus))
                ) && 
                (
                    this.IsForPickUpLocation == input.IsForPickUpLocation ||
                    this.IsForPickUpLocation.Equals(input.IsForPickUpLocation)
                ) && 
                (
                    this.ShipmentStatus == input.ShipmentStatus ||
                    (this.ShipmentStatus != null &&
                    this.ShipmentStatus.Equals(input.ShipmentStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AggregatedStatus != null)
                    hashCode = hashCode * 59 + this.AggregatedStatus.GetHashCode();
                hashCode = hashCode * 59 + this.IsForPickUpLocation.GetHashCode();
                if (this.ShipmentStatus != null)
                    hashCode = hashCode * 59 + this.ShipmentStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
