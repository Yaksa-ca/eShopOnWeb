/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// UpdatePendingApprovalAccountResponse
    /// </summary>
    [DataContract(Name = "UpdatePendingApprovalAccountResponse")]
    public partial class UpdatePendingApprovalAccountResponse : IEquatable<UpdatePendingApprovalAccountResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePendingApprovalAccountResponse" /> class.
        /// </summary>
        /// <param name="cdmvCustomerInfo">cdmvCustomerInfo.</param>
        /// <param name="isApproved">True when the customer account is approved.</param>
        /// <param name="fileNumberExist">True when the file number is already taken.</param>
        public UpdatePendingApprovalAccountResponse(CDMVCustomerInfo cdmvCustomerInfo = default(CDMVCustomerInfo), bool isApproved = default(bool), bool fileNumberExist = default(bool))
        {
            this.CdmvCustomerInfo = cdmvCustomerInfo;
            this.IsApproved = isApproved;
            this.FileNumberExist = fileNumberExist;
        }

        /// <summary>
        /// Gets or Sets CdmvCustomerInfo
        /// </summary>
        [DataMember(Name = "cdmvCustomerInfo", EmitDefaultValue = false)]
        public CDMVCustomerInfo CdmvCustomerInfo { get; set; }

        /// <summary>
        /// True when the customer account is approved
        /// </summary>
        /// <value>True when the customer account is approved</value>
        [DataMember(Name = "isApproved", EmitDefaultValue = true)]
        public bool IsApproved { get; set; }

        /// <summary>
        /// True when the file number is already taken
        /// </summary>
        /// <value>True when the file number is already taken</value>
        [DataMember(Name = "fileNumberExist", EmitDefaultValue = true)]
        public bool FileNumberExist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatePendingApprovalAccountResponse {\n");
            sb.Append("  CdmvCustomerInfo: ").Append(CdmvCustomerInfo).Append("\n");
            sb.Append("  IsApproved: ").Append(IsApproved).Append("\n");
            sb.Append("  FileNumberExist: ").Append(FileNumberExist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePendingApprovalAccountResponse);
        }

        /// <summary>
        /// Returns true if UpdatePendingApprovalAccountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePendingApprovalAccountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePendingApprovalAccountResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CdmvCustomerInfo == input.CdmvCustomerInfo ||
                    (this.CdmvCustomerInfo != null &&
                    this.CdmvCustomerInfo.Equals(input.CdmvCustomerInfo))
                ) && 
                (
                    this.IsApproved == input.IsApproved ||
                    this.IsApproved.Equals(input.IsApproved)
                ) && 
                (
                    this.FileNumberExist == input.FileNumberExist ||
                    this.FileNumberExist.Equals(input.FileNumberExist)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CdmvCustomerInfo != null)
                    hashCode = hashCode * 59 + this.CdmvCustomerInfo.GetHashCode();
                hashCode = hashCode * 59 + this.IsApproved.GetHashCode();
                hashCode = hashCode * 59 + this.FileNumberExist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
