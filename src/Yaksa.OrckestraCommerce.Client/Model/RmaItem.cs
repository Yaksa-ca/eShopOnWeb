/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// RmaItem
    /// </summary>
    [DataContract(Name = "RmaItem")]
    public partial class RmaItem : IEquatable<RmaItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RmaItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RmaItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RmaItem" /> class.
        /// </summary>
        /// <param name="amountRefunded">Total Amount of refund item, if applicable.</param>
        /// <param name="created">The creation date..</param>
        /// <param name="createdBy">The identity of the user who created the payment..</param>
        /// <param name="id">Unique Identifier of the RMA item.</param>
        /// <param name="itemStatus">the process status of the RMA Item.</param>
        /// <param name="lastModified">The last modification date..</param>
        /// <param name="lastModifiedBy">The identity of the user who modified the payment..</param>
        /// <param name="productId">The unique identifier of the product. (required).</param>
        /// <param name="quantity">the quantity of the product.</param>
        /// <param name="resolution">Resolution : Refund, Exchange, etc..</param>
        /// <param name="rmaId">The RMA id.</param>
        /// <param name="sku">The unique identifier of the product. (required).</param>
        /// <param name="variantId">The unique identifier of the variant. (required).</param>
        /// <param name="reason">the reason why the item is returned. example: size, change of mind, etc.</param>
        /// <param name="propertyBag">Dictionary&lt;String,Object&gt;.</param>
        public RmaItem(double amountRefunded = default(double), DateTime created = default(DateTime), string createdBy = default(string), string id = default(string), string itemStatus = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), string productId = default(string), double quantity = default(double), string resolution = default(string), string rmaId = default(string), string sku = default(string), string variantId = default(string), string reason = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>))
        {
            // to ensure "productId" is required (not null)
            this.ProductId = productId ?? throw new ArgumentNullException("productId is a required property for RmaItem and cannot be null");
            // to ensure "sku" is required (not null)
            this.Sku = sku ?? throw new ArgumentNullException("sku is a required property for RmaItem and cannot be null");
            // to ensure "variantId" is required (not null)
            this.VariantId = variantId ?? throw new ArgumentNullException("variantId is a required property for RmaItem and cannot be null");
            this.AmountRefunded = amountRefunded;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.Id = id;
            this.ItemStatus = itemStatus;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.Quantity = quantity;
            this.Resolution = resolution;
            this.RmaId = rmaId;
            this.Reason = reason;
            this.PropertyBag = propertyBag;
        }

        /// <summary>
        /// Total Amount of refund item, if applicable
        /// </summary>
        /// <value>Total Amount of refund item, if applicable</value>
        [DataMember(Name = "amountRefunded", EmitDefaultValue = false)]
        public double AmountRefunded { get; set; }

        /// <summary>
        /// The creation date.
        /// </summary>
        /// <value>The creation date.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The identity of the user who created the payment.
        /// </summary>
        /// <value>The identity of the user who created the payment.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Unique Identifier of the RMA item
        /// </summary>
        /// <value>Unique Identifier of the RMA item</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// the process status of the RMA Item
        /// </summary>
        /// <value>the process status of the RMA Item</value>
        [DataMember(Name = "itemStatus", EmitDefaultValue = false)]
        public string ItemStatus { get; set; }

        /// <summary>
        /// The last modification date.
        /// </summary>
        /// <value>The last modification date.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The identity of the user who modified the payment.
        /// </summary>
        /// <value>The identity of the user who modified the payment.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The unique identifier of the product.
        /// </summary>
        /// <value>The unique identifier of the product.</value>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// the quantity of the product
        /// </summary>
        /// <value>the quantity of the product</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Resolution : Refund, Exchange, etc.
        /// </summary>
        /// <value>Resolution : Refund, Exchange, etc.</value>
        [DataMember(Name = "resolution", EmitDefaultValue = false)]
        public string Resolution { get; set; }

        /// <summary>
        /// The RMA id
        /// </summary>
        /// <value>The RMA id</value>
        [DataMember(Name = "rmaId", EmitDefaultValue = false)]
        public string RmaId { get; set; }

        /// <summary>
        /// The unique identifier of the product.
        /// </summary>
        /// <value>The unique identifier of the product.</value>
        [DataMember(Name = "sku", IsRequired = true, EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// The unique identifier of the variant.
        /// </summary>
        /// <value>The unique identifier of the variant.</value>
        [DataMember(Name = "variantId", IsRequired = true, EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// the reason why the item is returned. example: size, change of mind, etc
        /// </summary>
        /// <value>the reason why the item is returned. example: size, change of mind, etc</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Dictionary&lt;String,Object&gt;
        /// </summary>
        /// <value>Dictionary&lt;String,Object&gt;</value>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RmaItem {\n");
            sb.Append("  AmountRefunded: ").Append(AmountRefunded).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemStatus: ").Append(ItemStatus).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  RmaId: ").Append(RmaId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RmaItem);
        }

        /// <summary>
        /// Returns true if RmaItem instances are equal
        /// </summary>
        /// <param name="input">Instance of RmaItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RmaItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountRefunded == input.AmountRefunded ||
                    this.AmountRefunded.Equals(input.AmountRefunded)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ItemStatus == input.ItemStatus ||
                    (this.ItemStatus != null &&
                    this.ItemStatus.Equals(input.ItemStatus))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) && 
                (
                    this.RmaId == input.RmaId ||
                    (this.RmaId != null &&
                    this.RmaId.Equals(input.RmaId))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AmountRefunded.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ItemStatus != null)
                    hashCode = hashCode * 59 + this.ItemStatus.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Resolution != null)
                    hashCode = hashCode * 59 + this.Resolution.GetHashCode();
                if (this.RmaId != null)
                    hashCode = hashCode * 59 + this.RmaId.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
