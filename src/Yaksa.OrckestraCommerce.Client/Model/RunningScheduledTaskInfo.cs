/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// RunningScheduledTaskInfo
    /// </summary>
    [DataContract(Name = "RunningScheduledTaskInfo")]
    public partial class RunningScheduledTaskInfo : IEquatable<RunningScheduledTaskInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunningScheduledTaskInfo" /> class.
        /// </summary>
        /// <param name="fireTimeUtc">the actual time the trigger fired..</param>
        /// <param name="group">the affinity group of the scheduled job..</param>
        /// <param name="inputs">IDictionary&lt;String,Object&gt;.</param>
        /// <param name="name">the name of the scheduled job..</param>
        /// <param name="schedulerInstanceId">the identifier of the scheduler instance running the job..</param>
        /// <param name="schedulerName">the name of the scheduler running the job..</param>
        /// <param name="taskId">the identifier of the executing task..</param>
        /// <param name="trigger">trigger.</param>
        public RunningScheduledTaskInfo(DateTime fireTimeUtc = default(DateTime), string group = default(string), Dictionary<string, Object> inputs = default(Dictionary<string, Object>), string name = default(string), string schedulerInstanceId = default(string), string schedulerName = default(string), string taskId = default(string), TriggerInfo trigger = default(TriggerInfo))
        {
            this.FireTimeUtc = fireTimeUtc;
            this.Group = group;
            this.Inputs = inputs;
            this.Name = name;
            this.SchedulerInstanceId = schedulerInstanceId;
            this.SchedulerName = schedulerName;
            this.TaskId = taskId;
            this.Trigger = trigger;
        }

        /// <summary>
        /// the actual time the trigger fired.
        /// </summary>
        /// <value>the actual time the trigger fired.</value>
        [DataMember(Name = "fireTimeUtc", EmitDefaultValue = false)]
        public DateTime FireTimeUtc { get; set; }

        /// <summary>
        /// the affinity group of the scheduled job.
        /// </summary>
        /// <value>the affinity group of the scheduled job.</value>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// IDictionary&lt;String,Object&gt;
        /// </summary>
        /// <value>IDictionary&lt;String,Object&gt;</value>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public Dictionary<string, Object> Inputs { get; set; }

        /// <summary>
        /// the name of the scheduled job.
        /// </summary>
        /// <value>the name of the scheduled job.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the identifier of the scheduler instance running the job.
        /// </summary>
        /// <value>the identifier of the scheduler instance running the job.</value>
        [DataMember(Name = "schedulerInstanceId", EmitDefaultValue = false)]
        public string SchedulerInstanceId { get; set; }

        /// <summary>
        /// the name of the scheduler running the job.
        /// </summary>
        /// <value>the name of the scheduler running the job.</value>
        [DataMember(Name = "schedulerName", EmitDefaultValue = false)]
        public string SchedulerName { get; set; }

        /// <summary>
        /// the identifier of the executing task.
        /// </summary>
        /// <value>the identifier of the executing task.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name = "trigger", EmitDefaultValue = false)]
        public TriggerInfo Trigger { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunningScheduledTaskInfo {\n");
            sb.Append("  FireTimeUtc: ").Append(FireTimeUtc).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SchedulerInstanceId: ").Append(SchedulerInstanceId).Append("\n");
            sb.Append("  SchedulerName: ").Append(SchedulerName).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunningScheduledTaskInfo);
        }

        /// <summary>
        /// Returns true if RunningScheduledTaskInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of RunningScheduledTaskInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunningScheduledTaskInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FireTimeUtc == input.FireTimeUtc ||
                    (this.FireTimeUtc != null &&
                    this.FireTimeUtc.Equals(input.FireTimeUtc))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SchedulerInstanceId == input.SchedulerInstanceId ||
                    (this.SchedulerInstanceId != null &&
                    this.SchedulerInstanceId.Equals(input.SchedulerInstanceId))
                ) && 
                (
                    this.SchedulerName == input.SchedulerName ||
                    (this.SchedulerName != null &&
                    this.SchedulerName.Equals(input.SchedulerName))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FireTimeUtc != null)
                    hashCode = hashCode * 59 + this.FireTimeUtc.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SchedulerInstanceId != null)
                    hashCode = hashCode * 59 + this.SchedulerInstanceId.GetHashCode();
                if (this.SchedulerName != null)
                    hashCode = hashCode * 59 + this.SchedulerName.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
