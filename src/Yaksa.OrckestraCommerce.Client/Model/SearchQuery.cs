/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// SearchQuery
    /// </summary>
    [DataContract(Name = "SearchQuery")]
    public partial class SearchQuery : IEquatable<SearchQuery>, IValidatableObject
    {
        /// <summary>
        /// The type of the search query
        /// </summary>
        /// <value>The type of the search query</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QueryTypeEnum
        {
            /// <summary>
            /// Enum Category for value: Category
            /// </summary>
            [EnumMember(Value = "Category")]
            Category = 1,

            /// <summary>
            /// Enum Merchandising for value: Merchandising
            /// </summary>
            [EnumMember(Value = "Merchandising")]
            Merchandising = 2,

            /// <summary>
            /// Enum ProductSet for value: ProductSet
            /// </summary>
            [EnumMember(Value = "ProductSet")]
            ProductSet = 3

        }


        /// <summary>
        /// The type of the search query
        /// </summary>
        /// <value>The type of the search query</value>
        [DataMember(Name = "queryType", EmitDefaultValue = false)]
        public QueryTypeEnum? QueryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchQuery" /> class.
        /// </summary>
        /// <param name="id">Id of the Search query.</param>
        /// <param name="scopeId">Scope of the Search query.</param>
        /// <param name="name">Name of the search query.</param>
        /// <param name="category">Category of the search query.</param>
        /// <param name="queryType">The type of the search query.</param>
        /// <param name="supportedCultures">List of all supported cultures of the search query. If the query is auto-localizable, contains the list of the catalog supported cultures.</param>
        /// <param name="supportsAllCulturesInCatalog">True if the query supports all the cultures of the catalog.</param>
        /// <param name="created">Date the entity was created.</param>
        /// <param name="createdBy">Identifier of the operator who created the entity.</param>
        /// <param name="lastModified">Date that the last modification was applied to the entity.</param>
        /// <param name="lastModifiedBy">Identifier of the operator who last modified the entity.</param>
        /// <param name="queryData">The data used to build a search request.</param>
        public SearchQuery(string id = default(string), string scopeId = default(string), string name = default(string), string category = default(string), QueryTypeEnum? queryType = default(QueryTypeEnum?), List<string> supportedCultures = default(List<string>), bool supportsAllCulturesInCatalog = default(bool), DateTime created = default(DateTime), string createdBy = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), List<SearchQueryData> queryData = default(List<SearchQueryData>))
        {
            this.Id = id;
            this.ScopeId = scopeId;
            this.Name = name;
            this.Category = category;
            this.QueryType = queryType;
            this.SupportedCultures = supportedCultures;
            this.SupportsAllCulturesInCatalog = supportsAllCulturesInCatalog;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.QueryData = queryData;
        }

        /// <summary>
        /// Id of the Search query
        /// </summary>
        /// <value>Id of the Search query</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Scope of the Search query
        /// </summary>
        /// <value>Scope of the Search query</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Name of the search query
        /// </summary>
        /// <value>Name of the search query</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Category of the search query
        /// </summary>
        /// <value>Category of the search query</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// List of all supported cultures of the search query. If the query is auto-localizable, contains the list of the catalog supported cultures
        /// </summary>
        /// <value>List of all supported cultures of the search query. If the query is auto-localizable, contains the list of the catalog supported cultures</value>
        [DataMember(Name = "supportedCultures", EmitDefaultValue = false)]
        public List<string> SupportedCultures { get; set; }

        /// <summary>
        /// True if the query supports all the cultures of the catalog
        /// </summary>
        /// <value>True if the query supports all the cultures of the catalog</value>
        [DataMember(Name = "supportsAllCulturesInCatalog", EmitDefaultValue = true)]
        public bool SupportsAllCulturesInCatalog { get; set; }

        /// <summary>
        /// Date the entity was created
        /// </summary>
        /// <value>Date the entity was created</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Identifier of the operator who created the entity
        /// </summary>
        /// <value>Identifier of the operator who created the entity</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Date that the last modification was applied to the entity
        /// </summary>
        /// <value>Date that the last modification was applied to the entity</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Identifier of the operator who last modified the entity
        /// </summary>
        /// <value>Identifier of the operator who last modified the entity</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The data used to build a search request
        /// </summary>
        /// <value>The data used to build a search request</value>
        [DataMember(Name = "queryData", EmitDefaultValue = false)]
        public List<SearchQueryData> QueryData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchQuery {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  QueryType: ").Append(QueryType).Append("\n");
            sb.Append("  SupportedCultures: ").Append(SupportedCultures).Append("\n");
            sb.Append("  SupportsAllCulturesInCatalog: ").Append(SupportsAllCulturesInCatalog).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  QueryData: ").Append(QueryData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchQuery);
        }

        /// <summary>
        /// Returns true if SearchQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.QueryType == input.QueryType ||
                    this.QueryType.Equals(input.QueryType)
                ) && 
                (
                    this.SupportedCultures == input.SupportedCultures ||
                    this.SupportedCultures != null &&
                    input.SupportedCultures != null &&
                    this.SupportedCultures.SequenceEqual(input.SupportedCultures)
                ) && 
                (
                    this.SupportsAllCulturesInCatalog == input.SupportsAllCulturesInCatalog ||
                    this.SupportsAllCulturesInCatalog.Equals(input.SupportsAllCulturesInCatalog)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.QueryData == input.QueryData ||
                    this.QueryData != null &&
                    input.QueryData != null &&
                    this.QueryData.SequenceEqual(input.QueryData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                hashCode = hashCode * 59 + this.QueryType.GetHashCode();
                if (this.SupportedCultures != null)
                    hashCode = hashCode * 59 + this.SupportedCultures.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsAllCulturesInCatalog.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.QueryData != null)
                    hashCode = hashCode * 59 + this.QueryData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
