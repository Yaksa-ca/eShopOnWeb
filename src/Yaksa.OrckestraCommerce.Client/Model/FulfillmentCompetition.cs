/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentCompetition
    /// </summary>
    [DataContract(Name = "FulfillmentCompetition")]
    public partial class FulfillmentCompetition : IEquatable<FulfillmentCompetition>, IValidatableObject
    {
        /// <summary>
        /// The status of the fulfillment competition.
        /// </summary>
        /// <value>The status of the fulfillment competition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,

            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 2,

            /// <summary>
            /// Enum Abandoned for value: Abandoned
            /// </summary>
            [EnumMember(Value = "Abandoned")]
            Abandoned = 3,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 4,

            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 5,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 6

        }


        /// <summary>
        /// The status of the fulfillment competition.
        /// </summary>
        /// <value>The status of the fulfillment competition.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentCompetition" /> class.
        /// </summary>
        /// <param name="created">The date the fulfillment competition was created..</param>
        /// <param name="createdBy">The identifier of the operator who created the fulfillment competition..</param>
        /// <param name="fulfillmentCompetitionLocations">The list of fulfillment competition locations that are going to compete for fulfillment of the specified shipment..</param>
        /// <param name="id">The fulfillment competition identifier..</param>
        /// <param name="lastModified">The date that the last modification was applied to the fulfillment competition..</param>
        /// <param name="lastModifiedBy">The identifier of the operator who last modified the fulfillment competition..</param>
        /// <param name="orderId">The identifier of the order..</param>
        /// <param name="scopeId">The scope identifier..</param>
        /// <param name="shipmentId">The identifier of the shipment..</param>
        /// <param name="status">The status of the fulfillment competition..</param>
        public FulfillmentCompetition(DateTime created = default(DateTime), string createdBy = default(string), List<FulfillmentCompetitionLocation> fulfillmentCompetitionLocations = default(List<FulfillmentCompetitionLocation>), string id = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), string orderId = default(string), string scopeId = default(string), string shipmentId = default(string), StatusEnum? status = default(StatusEnum?))
        {
            this.Created = created;
            this.CreatedBy = createdBy;
            this.FulfillmentCompetitionLocations = fulfillmentCompetitionLocations;
            this.Id = id;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.OrderId = orderId;
            this.ScopeId = scopeId;
            this.ShipmentId = shipmentId;
            this.Status = status;
        }

        /// <summary>
        /// The date the fulfillment competition was created.
        /// </summary>
        /// <value>The date the fulfillment competition was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The identifier of the operator who created the fulfillment competition.
        /// </summary>
        /// <value>The identifier of the operator who created the fulfillment competition.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The list of fulfillment competition locations that are going to compete for fulfillment of the specified shipment.
        /// </summary>
        /// <value>The list of fulfillment competition locations that are going to compete for fulfillment of the specified shipment.</value>
        [DataMember(Name = "fulfillmentCompetitionLocations", EmitDefaultValue = false)]
        public List<FulfillmentCompetitionLocation> FulfillmentCompetitionLocations { get; set; }

        /// <summary>
        /// The fulfillment competition identifier.
        /// </summary>
        /// <value>The fulfillment competition identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The date that the last modification was applied to the fulfillment competition.
        /// </summary>
        /// <value>The date that the last modification was applied to the fulfillment competition.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The identifier of the operator who last modified the fulfillment competition.
        /// </summary>
        /// <value>The identifier of the operator who last modified the fulfillment competition.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The identifier of the order.
        /// </summary>
        /// <value>The identifier of the order.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The scope identifier.
        /// </summary>
        /// <value>The scope identifier.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The identifier of the shipment.
        /// </summary>
        /// <value>The identifier of the shipment.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentCompetition {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  FulfillmentCompetitionLocations: ").Append(FulfillmentCompetitionLocations).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentCompetition);
        }

        /// <summary>
        /// Returns true if FulfillmentCompetition instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentCompetition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentCompetition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.FulfillmentCompetitionLocations == input.FulfillmentCompetitionLocations ||
                    this.FulfillmentCompetitionLocations != null &&
                    input.FulfillmentCompetitionLocations != null &&
                    this.FulfillmentCompetitionLocations.SequenceEqual(input.FulfillmentCompetitionLocations)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.FulfillmentCompetitionLocations != null)
                    hashCode = hashCode * 59 + this.FulfillmentCompetitionLocations.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
