/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// DailySchedule
    /// </summary>
    [DataContract(Name = "DailySchedule")]
    public partial class DailySchedule : IEquatable<DailySchedule>, IValidatableObject
    {
        /// <summary>
        /// the day of the week to which this daily schedule applies.
        /// </summary>
        /// <value>the day of the week to which this daily schedule applies.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DayEnum
        {
            /// <summary>
            /// Enum Sunday for value: Sunday
            /// </summary>
            [EnumMember(Value = "Sunday")]
            Sunday = 1,

            /// <summary>
            /// Enum Monday for value: Monday
            /// </summary>
            [EnumMember(Value = "Monday")]
            Monday = 2,

            /// <summary>
            /// Enum Tuesday for value: Tuesday
            /// </summary>
            [EnumMember(Value = "Tuesday")]
            Tuesday = 3,

            /// <summary>
            /// Enum Wednesday for value: Wednesday
            /// </summary>
            [EnumMember(Value = "Wednesday")]
            Wednesday = 4,

            /// <summary>
            /// Enum Thursday for value: Thursday
            /// </summary>
            [EnumMember(Value = "Thursday")]
            Thursday = 5,

            /// <summary>
            /// Enum Friday for value: Friday
            /// </summary>
            [EnumMember(Value = "Friday")]
            Friday = 6,

            /// <summary>
            /// Enum Saturday for value: Saturday
            /// </summary>
            [EnumMember(Value = "Saturday")]
            Saturday = 7

        }


        /// <summary>
        /// the day of the week to which this daily schedule applies.
        /// </summary>
        /// <value>the day of the week to which this daily schedule applies.</value>
        [DataMember(Name = "day", EmitDefaultValue = false)]
        public DayEnum? Day { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DailySchedule" /> class.
        /// </summary>
        /// <param name="day">the day of the week to which this daily schedule applies..</param>
        /// <param name="isClosed">Indicates whether the store/warehouse is closed on that day of the week..</param>
        /// <param name="isOpenedAllDay">Indicates whether the store/warehouse is opened all day on that day of the week..</param>
        /// <param name="openingTimes">The time intervals of the day during which the store/warehouse is open..</param>
        public DailySchedule(DayEnum? day = default(DayEnum?), bool isClosed = default(bool), bool isOpenedAllDay = default(bool), List<ScheduleInterval> openingTimes = default(List<ScheduleInterval>))
        {
            this.Day = day;
            this.IsClosed = isClosed;
            this.IsOpenedAllDay = isOpenedAllDay;
            this.OpeningTimes = openingTimes;
        }

        /// <summary>
        /// Indicates whether the store/warehouse is closed on that day of the week.
        /// </summary>
        /// <value>Indicates whether the store/warehouse is closed on that day of the week.</value>
        [DataMember(Name = "isClosed", EmitDefaultValue = true)]
        public bool IsClosed { get; set; }

        /// <summary>
        /// Indicates whether the store/warehouse is opened all day on that day of the week.
        /// </summary>
        /// <value>Indicates whether the store/warehouse is opened all day on that day of the week.</value>
        [DataMember(Name = "isOpenedAllDay", EmitDefaultValue = true)]
        public bool IsOpenedAllDay { get; set; }

        /// <summary>
        /// The time intervals of the day during which the store/warehouse is open.
        /// </summary>
        /// <value>The time intervals of the day during which the store/warehouse is open.</value>
        [DataMember(Name = "openingTimes", EmitDefaultValue = false)]
        public List<ScheduleInterval> OpeningTimes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DailySchedule {\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  IsClosed: ").Append(IsClosed).Append("\n");
            sb.Append("  IsOpenedAllDay: ").Append(IsOpenedAllDay).Append("\n");
            sb.Append("  OpeningTimes: ").Append(OpeningTimes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DailySchedule);
        }

        /// <summary>
        /// Returns true if DailySchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of DailySchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DailySchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Day == input.Day ||
                    this.Day.Equals(input.Day)
                ) && 
                (
                    this.IsClosed == input.IsClosed ||
                    this.IsClosed.Equals(input.IsClosed)
                ) && 
                (
                    this.IsOpenedAllDay == input.IsOpenedAllDay ||
                    this.IsOpenedAllDay.Equals(input.IsOpenedAllDay)
                ) && 
                (
                    this.OpeningTimes == input.OpeningTimes ||
                    this.OpeningTimes != null &&
                    input.OpeningTimes != null &&
                    this.OpeningTimes.SequenceEqual(input.OpeningTimes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Day.GetHashCode();
                hashCode = hashCode * 59 + this.IsClosed.GetHashCode();
                hashCode = hashCode * 59 + this.IsOpenedAllDay.GetHashCode();
                if (this.OpeningTimes != null)
                    hashCode = hashCode * 59 + this.OpeningTimes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
