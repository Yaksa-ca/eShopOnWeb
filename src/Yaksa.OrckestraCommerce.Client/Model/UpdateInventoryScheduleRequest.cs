/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Inventory locations are places which manage inventory.
    /// </summary>
    [DataContract(Name = "UpdateInventoryScheduleRequest")]
    public partial class UpdateInventoryScheduleRequest : IEquatable<UpdateInventoryScheduleRequest>, IValidatableObject
    {
        /// <summary>
        /// The status of product inventory
        /// </summary>
        /// <value>The status of product inventory</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InventoryStatusEnum
        {
            /// <summary>
            /// Enum InStock for value: InStock
            /// </summary>
            [EnumMember(Value = "InStock")]
            InStock = 1,

            /// <summary>
            /// Enum OutOfStock for value: OutOfStock
            /// </summary>
            [EnumMember(Value = "OutOfStock")]
            OutOfStock = 2,

            /// <summary>
            /// Enum PreOrder for value: PreOrder
            /// </summary>
            [EnumMember(Value = "PreOrder")]
            PreOrder = 3,

            /// <summary>
            /// Enum BackOrder for value: BackOrder
            /// </summary>
            [EnumMember(Value = "BackOrder")]
            BackOrder = 4

        }


        /// <summary>
        /// The status of product inventory
        /// </summary>
        /// <value>The status of product inventory</value>
        [DataMember(Name = "inventoryStatus", EmitDefaultValue = false)]
        public InventoryStatusEnum? InventoryStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateInventoryScheduleRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="dateRange">dateRange.</param>
        /// <param name="inventoryStatus">The status of product inventory.</param>
        /// <param name="scheduleId">The inventory schedule identifier used to find the right schedule to update.</param>
        /// <param name="sku">The associated product sku.</param>
        public UpdateInventoryScheduleRequest(string scopeId = default(string), DateRange dateRange = default(DateRange), InventoryStatusEnum? inventoryStatus = default(InventoryStatusEnum?), string scheduleId = default(string), string sku = default(string))
        {
            this.ScopeId = scopeId;
            this.DateRange = dateRange;
            this.InventoryStatus = inventoryStatus;
            this.ScheduleId = scheduleId;
            this.Sku = sku;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [DataMember(Name = "dateRange", EmitDefaultValue = false)]
        public DateRange DateRange { get; set; }

        /// <summary>
        /// The inventory schedule identifier used to find the right schedule to update
        /// </summary>
        /// <value>The inventory schedule identifier used to find the right schedule to update</value>
        [DataMember(Name = "scheduleId", EmitDefaultValue = false)]
        public string ScheduleId { get; set; }

        /// <summary>
        /// The associated product sku
        /// </summary>
        /// <value>The associated product sku</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateInventoryScheduleRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  InventoryStatus: ").Append(InventoryStatus).Append("\n");
            sb.Append("  ScheduleId: ").Append(ScheduleId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateInventoryScheduleRequest);
        }

        /// <summary>
        /// Returns true if UpdateInventoryScheduleRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateInventoryScheduleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateInventoryScheduleRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                ) && 
                (
                    this.InventoryStatus == input.InventoryStatus ||
                    this.InventoryStatus.Equals(input.InventoryStatus)
                ) && 
                (
                    this.ScheduleId == input.ScheduleId ||
                    (this.ScheduleId != null &&
                    this.ScheduleId.Equals(input.ScheduleId))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.DateRange != null)
                    hashCode = hashCode * 59 + this.DateRange.GetHashCode();
                hashCode = hashCode * 59 + this.InventoryStatus.GetHashCode();
                if (this.ScheduleId != null)
                    hashCode = hashCode * 59 + this.ScheduleId.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
