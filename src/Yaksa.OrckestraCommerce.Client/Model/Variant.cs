/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Variant
    /// </summary>
    [DataContract(Name = "Variant")]
    public partial class Variant : IEquatable<Variant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Variant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Variant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Variant" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="created">Date the entity was created.</param>
        /// <param name="createdBy">Identifier of the operator who created the entity.</param>
        /// <param name="lastModified">Date that the last modification was applied to the entity.</param>
        /// <param name="lastModifiedBy">Identifier of the operator who last modified the entity.</param>
        /// <param name="active">whether the Variant is active or not..</param>
        /// <param name="mediaSet">the media.</param>
        /// <param name="overriddenProperties">the list of overridden properties..</param>
        /// <param name="relationships">the relationships.</param>
        /// <param name="scheduledActivation">The date on which the variant becomes active..</param>
        /// <param name="scheduledDeactivation">The date on which the variant becomes inactive..</param>
        /// <param name="catalogId">the id of the catalog name to which the variant belongs..</param>
        /// <param name="definitionName">the product definition name that represents the Variants (its properties)..</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="hiddenInScope">the hidden in scope flag of the Variant.</param>
        /// <param name="listPrice">the current price for the Variant..</param>
        /// <param name="prices">prices..</param>
        /// <param name="productId">the ID (business) of the product that owns the Variant.</param>
        /// <param name="sequenceNumber">the number used for ordering the Variant in a list..</param>
        /// <param name="sku">the stock keeping unit code (SKU) of the Variant..</param>
        /// <param name="taxCategory">the tax category of the Variant..</param>
        public Variant(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), DateTime created = default(DateTime), string createdBy = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), bool active = default(bool), List<ProductMedia> mediaSet = default(List<ProductMedia>), List<string> overriddenProperties = default(List<string>), List<Relationship> relationships = default(List<Relationship>), DateTime scheduledActivation = default(DateTime), DateTime scheduledDeactivation = default(DateTime), string catalogId = default(string), string definitionName = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), bool hiddenInScope = default(bool), double listPrice = default(double), List<ProductPriceEntry> prices = default(List<ProductPriceEntry>), string productId = default(string), int sequenceNumber = default(int), string sku = default(string), string taxCategory = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Variant and cannot be null");
            this.PropertyBag = propertyBag;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.Active = active;
            this.MediaSet = mediaSet;
            this.OverriddenProperties = overriddenProperties;
            this.Relationships = relationships;
            this.ScheduledActivation = scheduledActivation;
            this.ScheduledDeactivation = scheduledDeactivation;
            this.CatalogId = catalogId;
            this.DefinitionName = definitionName;
            this.DisplayName = displayName;
            this.HiddenInScope = hiddenInScope;
            this.ListPrice = listPrice;
            this.Prices = prices;
            this.ProductId = productId;
            this.SequenceNumber = sequenceNumber;
            this.Sku = sku;
            this.TaxCategory = taxCategory;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Date the entity was created
        /// </summary>
        /// <value>Date the entity was created</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Identifier of the operator who created the entity
        /// </summary>
        /// <value>Identifier of the operator who created the entity</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Date that the last modification was applied to the entity
        /// </summary>
        /// <value>Date that the last modification was applied to the entity</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Identifier of the operator who last modified the entity
        /// </summary>
        /// <value>Identifier of the operator who last modified the entity</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// whether the Variant is active or not.
        /// </summary>
        /// <value>whether the Variant is active or not.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// the media
        /// </summary>
        /// <value>the media</value>
        [DataMember(Name = "mediaSet", EmitDefaultValue = false)]
        public List<ProductMedia> MediaSet { get; set; }

        /// <summary>
        /// the list of overridden properties.
        /// </summary>
        /// <value>the list of overridden properties.</value>
        [DataMember(Name = "overriddenProperties", EmitDefaultValue = false)]
        public List<string> OverriddenProperties { get; set; }

        /// <summary>
        /// the relationships
        /// </summary>
        /// <value>the relationships</value>
        [DataMember(Name = "relationships", EmitDefaultValue = false)]
        public List<Relationship> Relationships { get; set; }

        /// <summary>
        /// The date on which the variant becomes active.
        /// </summary>
        /// <value>The date on which the variant becomes active.</value>
        [DataMember(Name = "scheduledActivation", EmitDefaultValue = false)]
        public DateTime ScheduledActivation { get; set; }

        /// <summary>
        /// The date on which the variant becomes inactive.
        /// </summary>
        /// <value>The date on which the variant becomes inactive.</value>
        [DataMember(Name = "scheduledDeactivation", EmitDefaultValue = false)]
        public DateTime ScheduledDeactivation { get; set; }

        /// <summary>
        /// the id of the catalog name to which the variant belongs.
        /// </summary>
        /// <value>the id of the catalog name to which the variant belongs.</value>
        [DataMember(Name = "catalogId", EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// the product definition name that represents the Variants (its properties).
        /// </summary>
        /// <value>the product definition name that represents the Variants (its properties).</value>
        [DataMember(Name = "definitionName", EmitDefaultValue = false)]
        public string DefinitionName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// the hidden in scope flag of the Variant
        /// </summary>
        /// <value>the hidden in scope flag of the Variant</value>
        [DataMember(Name = "hiddenInScope", EmitDefaultValue = true)]
        public bool HiddenInScope { get; set; }

        /// <summary>
        /// the current price for the Variant.
        /// </summary>
        /// <value>the current price for the Variant.</value>
        [DataMember(Name = "listPrice", EmitDefaultValue = false)]
        public double ListPrice { get; set; }

        /// <summary>
        /// prices.
        /// </summary>
        /// <value>prices.</value>
        [DataMember(Name = "prices", EmitDefaultValue = false)]
        public List<ProductPriceEntry> Prices { get; set; }

        /// <summary>
        /// the ID (business) of the product that owns the Variant
        /// </summary>
        /// <value>the ID (business) of the product that owns the Variant</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// the number used for ordering the Variant in a list.
        /// </summary>
        /// <value>the number used for ordering the Variant in a list.</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// the stock keeping unit code (SKU) of the Variant.
        /// </summary>
        /// <value>the stock keeping unit code (SKU) of the Variant.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// the tax category of the Variant.
        /// </summary>
        /// <value>the tax category of the Variant.</value>
        [DataMember(Name = "taxCategory", EmitDefaultValue = false)]
        public string TaxCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Variant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  MediaSet: ").Append(MediaSet).Append("\n");
            sb.Append("  OverriddenProperties: ").Append(OverriddenProperties).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  ScheduledActivation: ").Append(ScheduledActivation).Append("\n");
            sb.Append("  ScheduledDeactivation: ").Append(ScheduledDeactivation).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  DefinitionName: ").Append(DefinitionName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  HiddenInScope: ").Append(HiddenInScope).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Variant);
        }

        /// <summary>
        /// Returns true if Variant instances are equal
        /// </summary>
        /// <param name="input">Instance of Variant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Variant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.MediaSet == input.MediaSet ||
                    this.MediaSet != null &&
                    input.MediaSet != null &&
                    this.MediaSet.SequenceEqual(input.MediaSet)
                ) && 
                (
                    this.OverriddenProperties == input.OverriddenProperties ||
                    this.OverriddenProperties != null &&
                    input.OverriddenProperties != null &&
                    this.OverriddenProperties.SequenceEqual(input.OverriddenProperties)
                ) && 
                (
                    this.Relationships == input.Relationships ||
                    this.Relationships != null &&
                    input.Relationships != null &&
                    this.Relationships.SequenceEqual(input.Relationships)
                ) && 
                (
                    this.ScheduledActivation == input.ScheduledActivation ||
                    (this.ScheduledActivation != null &&
                    this.ScheduledActivation.Equals(input.ScheduledActivation))
                ) && 
                (
                    this.ScheduledDeactivation == input.ScheduledDeactivation ||
                    (this.ScheduledDeactivation != null &&
                    this.ScheduledDeactivation.Equals(input.ScheduledDeactivation))
                ) && 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.DefinitionName == input.DefinitionName ||
                    (this.DefinitionName != null &&
                    this.DefinitionName.Equals(input.DefinitionName))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.HiddenInScope == input.HiddenInScope ||
                    this.HiddenInScope.Equals(input.HiddenInScope)
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    this.ListPrice.Equals(input.ListPrice)
                ) && 
                (
                    this.Prices == input.Prices ||
                    this.Prices != null &&
                    input.Prices != null &&
                    this.Prices.SequenceEqual(input.Prices)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.MediaSet != null)
                    hashCode = hashCode * 59 + this.MediaSet.GetHashCode();
                if (this.OverriddenProperties != null)
                    hashCode = hashCode * 59 + this.OverriddenProperties.GetHashCode();
                if (this.Relationships != null)
                    hashCode = hashCode * 59 + this.Relationships.GetHashCode();
                if (this.ScheduledActivation != null)
                    hashCode = hashCode * 59 + this.ScheduledActivation.GetHashCode();
                if (this.ScheduledDeactivation != null)
                    hashCode = hashCode * 59 + this.ScheduledDeactivation.GetHashCode();
                if (this.CatalogId != null)
                    hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                if (this.DefinitionName != null)
                    hashCode = hashCode * 59 + this.DefinitionName.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.HiddenInScope.GetHashCode();
                hashCode = hashCode * 59 + this.ListPrice.GetHashCode();
                if (this.Prices != null)
                    hashCode = hashCode * 59 + this.Prices.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
