/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductSearchResult
    /// </summary>
    [DataContract(Name = "ProductSearchResult")]
    public partial class ProductSearchResult : IEquatable<ProductSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSearchResult" /> class.
        /// </summary>
        /// <param name="correctedSearchTerms">the auto-corrected search terms used to return values..</param>
        /// <param name="documents">a list of Document matching the search request..</param>
        /// <param name="facets">a list of Facet corresponding to the search request..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="startIndex">the index of the first record in the list from which to start paging..</param>
        /// <param name="suggestions">a list of Suggestion that could return more meaningful results for the search term entered..</param>
        /// <param name="totalCount">the total number of records matching the search request, irrespective of the page..</param>
        public ProductSearchResult(string correctedSearchTerms = default(string), List<ProductDocument> documents = default(List<ProductDocument>), List<Facet> facets = default(List<Facet>), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), int startIndex = default(int), List<Suggestion> suggestions = default(List<Suggestion>), long totalCount = default(long))
        {
            this.CorrectedSearchTerms = correctedSearchTerms;
            this.Documents = documents;
            this.Facets = facets;
            this.PropertyBag = propertyBag;
            this.StartIndex = startIndex;
            this.Suggestions = suggestions;
            this.TotalCount = totalCount;
        }

        /// <summary>
        /// the auto-corrected search terms used to return values.
        /// </summary>
        /// <value>the auto-corrected search terms used to return values.</value>
        [DataMember(Name = "correctedSearchTerms", EmitDefaultValue = false)]
        public string CorrectedSearchTerms { get; set; }

        /// <summary>
        /// a list of Document matching the search request.
        /// </summary>
        /// <value>a list of Document matching the search request.</value>
        [DataMember(Name = "documents", EmitDefaultValue = false)]
        public List<ProductDocument> Documents { get; set; }

        /// <summary>
        /// a list of Facet corresponding to the search request.
        /// </summary>
        /// <value>a list of Facet corresponding to the search request.</value>
        [DataMember(Name = "facets", EmitDefaultValue = false)]
        public List<Facet> Facets { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// the index of the first record in the list from which to start paging.
        /// </summary>
        /// <value>the index of the first record in the list from which to start paging.</value>
        [DataMember(Name = "startIndex", EmitDefaultValue = false)]
        public int StartIndex { get; set; }

        /// <summary>
        /// a list of Suggestion that could return more meaningful results for the search term entered.
        /// </summary>
        /// <value>a list of Suggestion that could return more meaningful results for the search term entered.</value>
        [DataMember(Name = "suggestions", EmitDefaultValue = false)]
        public List<Suggestion> Suggestions { get; set; }

        /// <summary>
        /// the total number of records matching the search request, irrespective of the page.
        /// </summary>
        /// <value>the total number of records matching the search request, irrespective of the page.</value>
        [DataMember(Name = "totalCount", EmitDefaultValue = false)]
        public long TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductSearchResult {\n");
            sb.Append("  CorrectedSearchTerms: ").Append(CorrectedSearchTerms).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Facets: ").Append(Facets).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  Suggestions: ").Append(Suggestions).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductSearchResult);
        }

        /// <summary>
        /// Returns true if ProductSearchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductSearchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrectedSearchTerms == input.CorrectedSearchTerms ||
                    (this.CorrectedSearchTerms != null &&
                    this.CorrectedSearchTerms.Equals(input.CorrectedSearchTerms))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.Facets == input.Facets ||
                    this.Facets != null &&
                    input.Facets != null &&
                    this.Facets.SequenceEqual(input.Facets)
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.StartIndex == input.StartIndex ||
                    this.StartIndex.Equals(input.StartIndex)
                ) && 
                (
                    this.Suggestions == input.Suggestions ||
                    this.Suggestions != null &&
                    input.Suggestions != null &&
                    this.Suggestions.SequenceEqual(input.Suggestions)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrectedSearchTerms != null)
                    hashCode = hashCode * 59 + this.CorrectedSearchTerms.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.Facets != null)
                    hashCode = hashCode * 59 + this.Facets.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.StartIndex.GetHashCode();
                if (this.Suggestions != null)
                    hashCode = hashCode * 59 + this.Suggestions.GetHashCode();
                hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
