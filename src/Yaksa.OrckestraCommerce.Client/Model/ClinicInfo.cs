/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ClinicInfo
    /// </summary>
    [DataContract(Name = "ClinicInfo")]
    public partial class ClinicInfo : IEquatable<ClinicInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClinicInfo" /> class.
        /// </summary>
        /// <param name="clinicId">The identifier of the clinic.</param>
        /// <param name="isScopeActive">Whether the scope associated to this clinic is active or not.</param>
        /// <param name="clinicGroupId">The Clinic Group this clinic belongs to, if any.</param>
        /// <param name="parentHierarchy">The clinic&#39;s parent hierarchy, from closest parent to farthest.</param>
        /// <param name="scopeId">The identifier of the scope the clinic belongs to.</param>
        /// <param name="defaultCulture">The default culture of the clinic.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="storeInfo">storeInfo.</param>
        /// <param name="fulfillmentLocations">Information about the fulfillment locations associated to the clinic.</param>
        /// <param name="urlInfo">urlInfo.</param>
        /// <param name="isMigrated">True if the clinic is migrated from another platform..</param>
        public ClinicInfo(string clinicId = default(string), bool isScopeActive = default(bool), string clinicGroupId = default(string), List<string> parentHierarchy = default(List<string>), string scopeId = default(string), string defaultCulture = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), ClinicStoreInfo storeInfo = default(ClinicStoreInfo), List<FulfillmentLocationInfo> fulfillmentLocations = default(List<FulfillmentLocationInfo>), UrlInfo urlInfo = default(UrlInfo), bool isMigrated = default(bool))
        {
            this.ClinicId = clinicId;
            this.IsScopeActive = isScopeActive;
            this.ClinicGroupId = clinicGroupId;
            this.ParentHierarchy = parentHierarchy;
            this.ScopeId = scopeId;
            this.DefaultCulture = defaultCulture;
            this.DisplayName = displayName;
            this.StoreInfo = storeInfo;
            this.FulfillmentLocations = fulfillmentLocations;
            this.UrlInfo = urlInfo;
            this.IsMigrated = isMigrated;
        }

        /// <summary>
        /// The identifier of the clinic
        /// </summary>
        /// <value>The identifier of the clinic</value>
        [DataMember(Name = "clinicId", EmitDefaultValue = false)]
        public string ClinicId { get; set; }

        /// <summary>
        /// Whether the scope associated to this clinic is active or not
        /// </summary>
        /// <value>Whether the scope associated to this clinic is active or not</value>
        [DataMember(Name = "isScopeActive", EmitDefaultValue = true)]
        public bool IsScopeActive { get; set; }

        /// <summary>
        /// The Clinic Group this clinic belongs to, if any
        /// </summary>
        /// <value>The Clinic Group this clinic belongs to, if any</value>
        [DataMember(Name = "clinicGroupId", EmitDefaultValue = false)]
        public string ClinicGroupId { get; set; }

        /// <summary>
        /// The clinic&#39;s parent hierarchy, from closest parent to farthest
        /// </summary>
        /// <value>The clinic&#39;s parent hierarchy, from closest parent to farthest</value>
        [DataMember(Name = "parentHierarchy", EmitDefaultValue = false)]
        public List<string> ParentHierarchy { get; set; }

        /// <summary>
        /// The identifier of the scope the clinic belongs to
        /// </summary>
        /// <value>The identifier of the scope the clinic belongs to</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The default culture of the clinic
        /// </summary>
        /// <value>The default culture of the clinic</value>
        [DataMember(Name = "defaultCulture", EmitDefaultValue = false)]
        public string DefaultCulture { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets StoreInfo
        /// </summary>
        [DataMember(Name = "storeInfo", EmitDefaultValue = false)]
        public ClinicStoreInfo StoreInfo { get; set; }

        /// <summary>
        /// Information about the fulfillment locations associated to the clinic
        /// </summary>
        /// <value>Information about the fulfillment locations associated to the clinic</value>
        [DataMember(Name = "fulfillmentLocations", EmitDefaultValue = false)]
        public List<FulfillmentLocationInfo> FulfillmentLocations { get; set; }

        /// <summary>
        /// Gets or Sets UrlInfo
        /// </summary>
        [DataMember(Name = "urlInfo", EmitDefaultValue = false)]
        public UrlInfo UrlInfo { get; set; }

        /// <summary>
        /// True if the clinic is migrated from another platform.
        /// </summary>
        /// <value>True if the clinic is migrated from another platform.</value>
        [DataMember(Name = "isMigrated", EmitDefaultValue = true)]
        public bool IsMigrated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClinicInfo {\n");
            sb.Append("  ClinicId: ").Append(ClinicId).Append("\n");
            sb.Append("  IsScopeActive: ").Append(IsScopeActive).Append("\n");
            sb.Append("  ClinicGroupId: ").Append(ClinicGroupId).Append("\n");
            sb.Append("  ParentHierarchy: ").Append(ParentHierarchy).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  DefaultCulture: ").Append(DefaultCulture).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  StoreInfo: ").Append(StoreInfo).Append("\n");
            sb.Append("  FulfillmentLocations: ").Append(FulfillmentLocations).Append("\n");
            sb.Append("  UrlInfo: ").Append(UrlInfo).Append("\n");
            sb.Append("  IsMigrated: ").Append(IsMigrated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClinicInfo);
        }

        /// <summary>
        /// Returns true if ClinicInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ClinicInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClinicInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClinicId == input.ClinicId ||
                    (this.ClinicId != null &&
                    this.ClinicId.Equals(input.ClinicId))
                ) && 
                (
                    this.IsScopeActive == input.IsScopeActive ||
                    this.IsScopeActive.Equals(input.IsScopeActive)
                ) && 
                (
                    this.ClinicGroupId == input.ClinicGroupId ||
                    (this.ClinicGroupId != null &&
                    this.ClinicGroupId.Equals(input.ClinicGroupId))
                ) && 
                (
                    this.ParentHierarchy == input.ParentHierarchy ||
                    this.ParentHierarchy != null &&
                    input.ParentHierarchy != null &&
                    this.ParentHierarchy.SequenceEqual(input.ParentHierarchy)
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.DefaultCulture == input.DefaultCulture ||
                    (this.DefaultCulture != null &&
                    this.DefaultCulture.Equals(input.DefaultCulture))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.StoreInfo == input.StoreInfo ||
                    (this.StoreInfo != null &&
                    this.StoreInfo.Equals(input.StoreInfo))
                ) && 
                (
                    this.FulfillmentLocations == input.FulfillmentLocations ||
                    this.FulfillmentLocations != null &&
                    input.FulfillmentLocations != null &&
                    this.FulfillmentLocations.SequenceEqual(input.FulfillmentLocations)
                ) && 
                (
                    this.UrlInfo == input.UrlInfo ||
                    (this.UrlInfo != null &&
                    this.UrlInfo.Equals(input.UrlInfo))
                ) && 
                (
                    this.IsMigrated == input.IsMigrated ||
                    this.IsMigrated.Equals(input.IsMigrated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClinicId != null)
                    hashCode = hashCode * 59 + this.ClinicId.GetHashCode();
                hashCode = hashCode * 59 + this.IsScopeActive.GetHashCode();
                if (this.ClinicGroupId != null)
                    hashCode = hashCode * 59 + this.ClinicGroupId.GetHashCode();
                if (this.ParentHierarchy != null)
                    hashCode = hashCode * 59 + this.ParentHierarchy.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.DefaultCulture != null)
                    hashCode = hashCode * 59 + this.DefaultCulture.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.StoreInfo != null)
                    hashCode = hashCode * 59 + this.StoreInfo.GetHashCode();
                if (this.FulfillmentLocations != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocations.GetHashCode();
                if (this.UrlInfo != null)
                    hashCode = hashCode * 59 + this.UrlInfo.GetHashCode();
                hashCode = hashCode * 59 + this.IsMigrated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
