/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Metadata are entities which represents additional definitions and attribute information.
    /// </summary>
    [DataContract(Name = "FindProductAttributeGroupsRequest")]
    public partial class FindProductAttributeGroupsRequest : IEquatable<FindProductAttributeGroupsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindProductAttributeGroupsRequest" /> class.
        /// </summary>
        /// <param name="groupNames">The names of the groups to retrieve. All groups will be returned if this is null or empty..</param>
        /// <param name="includeAttributes">Determines whether or not to include the attributes associated to each group..</param>
        public FindProductAttributeGroupsRequest(List<string> groupNames = default(List<string>), bool includeAttributes = default(bool))
        {
            this.GroupNames = groupNames;
            this.IncludeAttributes = includeAttributes;
        }

        /// <summary>
        /// The names of the groups to retrieve. All groups will be returned if this is null or empty.
        /// </summary>
        /// <value>The names of the groups to retrieve. All groups will be returned if this is null or empty.</value>
        [DataMember(Name = "groupNames", EmitDefaultValue = false)]
        public List<string> GroupNames { get; set; }

        /// <summary>
        /// Determines whether or not to include the attributes associated to each group.
        /// </summary>
        /// <value>Determines whether or not to include the attributes associated to each group.</value>
        [DataMember(Name = "includeAttributes", EmitDefaultValue = true)]
        public bool IncludeAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindProductAttributeGroupsRequest {\n");
            sb.Append("  GroupNames: ").Append(GroupNames).Append("\n");
            sb.Append("  IncludeAttributes: ").Append(IncludeAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindProductAttributeGroupsRequest);
        }

        /// <summary>
        /// Returns true if FindProductAttributeGroupsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindProductAttributeGroupsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindProductAttributeGroupsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupNames == input.GroupNames ||
                    this.GroupNames != null &&
                    input.GroupNames != null &&
                    this.GroupNames.SequenceEqual(input.GroupNames)
                ) && 
                (
                    this.IncludeAttributes == input.IncludeAttributes ||
                    this.IncludeAttributes.Equals(input.IncludeAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupNames != null)
                    hashCode = hashCode * 59 + this.GroupNames.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeAttributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
