/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Relationship
    /// </summary>
    [DataContract(Name = "Relationship")]
    public partial class Relationship : IEquatable<Relationship>, IValidatableObject
    {
        /// <summary>
        /// The type of the 
        /// </summary>
        /// <value>The type of the </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelationshipTypeEnum
        {
            /// <summary>
            /// Enum Category for value: Category
            /// </summary>
            [EnumMember(Value = "Category")]
            Category = 1,

            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 2,

            /// <summary>
            /// Enum Variant for value: Variant
            /// </summary>
            [EnumMember(Value = "Variant")]
            Variant = 3

        }


        /// <summary>
        /// The type of the 
        /// </summary>
        /// <value>The type of the </value>
        [DataMember(Name = "relationshipType", EmitDefaultValue = false)]
        public RelationshipTypeEnum? RelationshipType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Relationship" /> class.
        /// </summary>
        /// <param name="catalogId">The catalog id which the entity related to the source belongs.</param>
        /// <param name="count">A quantity for the Relationship. For example, X has 7 items of the relation Y.</param>
        /// <param name="description">description.</param>
        /// <param name="entityId">The related entity id of the Relationship.</param>
        /// <param name="id">ID of the relationship, obsolete.</param>
        /// <param name="isInherited">True if the relationship is inherited from a sale scope.</param>
        /// <param name="merchandiseType">The MerchandiseType of the Relationship. The type is based on the MerchandiseType Lookup. Contains the value of the lookup..</param>
        /// <param name="qualifier">A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship.</param>
        /// <param name="relationshipType">The type of the .</param>
        /// <param name="sequenceNumber">The number used for ordering the Relationship. An integer that allows the ordering of the relationships when they are presented in a list. No restriction is given for the number (e.g. it allows two relationships to have the same value for this property)..</param>
        /// <param name="variantProductId">The variant product Id of the Relationship just when the relationship&#39;s type is Variant.</param>
        public Relationship(string catalogId = default(string), int count = default(int), Dictionary<string, string> description = default(Dictionary<string, string>), string entityId = default(string), string id = default(string), bool isInherited = default(bool), string merchandiseType = default(string), string qualifier = default(string), RelationshipTypeEnum? relationshipType = default(RelationshipTypeEnum?), int sequenceNumber = default(int), string variantProductId = default(string))
        {
            this.CatalogId = catalogId;
            this.Count = count;
            this.Description = description;
            this.EntityId = entityId;
            this.Id = id;
            this.IsInherited = isInherited;
            this.MerchandiseType = merchandiseType;
            this.Qualifier = qualifier;
            this.RelationshipType = relationshipType;
            this.SequenceNumber = sequenceNumber;
            this.VariantProductId = variantProductId;
        }

        /// <summary>
        /// The catalog id which the entity related to the source belongs
        /// </summary>
        /// <value>The catalog id which the entity related to the source belongs</value>
        [DataMember(Name = "catalogId", EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// A quantity for the Relationship. For example, X has 7 items of the relation Y
        /// </summary>
        /// <value>A quantity for the Relationship. For example, X has 7 items of the relation Y</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// The related entity id of the Relationship
        /// </summary>
        /// <value>The related entity id of the Relationship</value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// ID of the relationship, obsolete
        /// </summary>
        /// <value>ID of the relationship, obsolete</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// True if the relationship is inherited from a sale scope
        /// </summary>
        /// <value>True if the relationship is inherited from a sale scope</value>
        [DataMember(Name = "isInherited", EmitDefaultValue = true)]
        public bool IsInherited { get; set; }

        /// <summary>
        /// The MerchandiseType of the Relationship. The type is based on the MerchandiseType Lookup. Contains the value of the lookup.
        /// </summary>
        /// <value>The MerchandiseType of the Relationship. The type is based on the MerchandiseType Lookup. Contains the value of the lookup.</value>
        [DataMember(Name = "merchandiseType", EmitDefaultValue = false)]
        public string MerchandiseType { get; set; }

        /// <summary>
        /// A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship
        /// </summary>
        /// <value>A qualifier for the Relationship. Flexible property that allows the consumer to enter custom information about the relationship</value>
        [DataMember(Name = "qualifier", EmitDefaultValue = false)]
        public string Qualifier { get; set; }

        /// <summary>
        /// The number used for ordering the Relationship. An integer that allows the ordering of the relationships when they are presented in a list. No restriction is given for the number (e.g. it allows two relationships to have the same value for this property).
        /// </summary>
        /// <value>The number used for ordering the Relationship. An integer that allows the ordering of the relationships when they are presented in a list. No restriction is given for the number (e.g. it allows two relationships to have the same value for this property).</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// The variant product Id of the Relationship just when the relationship&#39;s type is Variant
        /// </summary>
        /// <value>The variant product Id of the Relationship just when the relationship&#39;s type is Variant</value>
        [DataMember(Name = "variantProductId", EmitDefaultValue = false)]
        public string VariantProductId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Relationship {\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsInherited: ").Append(IsInherited).Append("\n");
            sb.Append("  MerchandiseType: ").Append(MerchandiseType).Append("\n");
            sb.Append("  Qualifier: ").Append(Qualifier).Append("\n");
            sb.Append("  RelationshipType: ").Append(RelationshipType).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  VariantProductId: ").Append(VariantProductId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Relationship);
        }

        /// <summary>
        /// Returns true if Relationship instances are equal
        /// </summary>
        /// <param name="input">Instance of Relationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Relationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsInherited == input.IsInherited ||
                    this.IsInherited.Equals(input.IsInherited)
                ) && 
                (
                    this.MerchandiseType == input.MerchandiseType ||
                    (this.MerchandiseType != null &&
                    this.MerchandiseType.Equals(input.MerchandiseType))
                ) && 
                (
                    this.Qualifier == input.Qualifier ||
                    (this.Qualifier != null &&
                    this.Qualifier.Equals(input.Qualifier))
                ) && 
                (
                    this.RelationshipType == input.RelationshipType ||
                    this.RelationshipType.Equals(input.RelationshipType)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.VariantProductId == input.VariantProductId ||
                    (this.VariantProductId != null &&
                    this.VariantProductId.Equals(input.VariantProductId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CatalogId != null)
                    hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsInherited.GetHashCode();
                if (this.MerchandiseType != null)
                    hashCode = hashCode * 59 + this.MerchandiseType.GetHashCode();
                if (this.Qualifier != null)
                    hashCode = hashCode * 59 + this.Qualifier.GetHashCode();
                hashCode = hashCode * 59 + this.RelationshipType.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.VariantProductId != null)
                    hashCode = hashCode * 59 + this.VariantProductId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
