/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Scopes are entities that allow you to organize and search data and settings for a given market.
    /// </summary>
    [DataContract(Name = "CreateScopeRequest")]
    public partial class CreateScopeRequest : IEquatable<CreateScopeRequest>, IValidatableObject
    {
        /// <summary>
        /// The type of the scope.
        /// </summary>
        /// <value>The type of the scope.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeTypeEnum
        {
            /// <summary>
            /// Enum Global for value: Global
            /// </summary>
            [EnumMember(Value = "Global")]
            Global = 1,

            /// <summary>
            /// Enum Sale for value: Sale
            /// </summary>
            [EnumMember(Value = "Sale")]
            Sale = 2,

            /// <summary>
            /// Enum Dependant for value: Dependant
            /// </summary>
            [EnumMember(Value = "Dependant")]
            Dependant = 3,

            /// <summary>
            /// Enum Virtual for value: Virtual
            /// </summary>
            [EnumMember(Value = "Virtual")]
            Virtual = 4

        }


        /// <summary>
        /// The type of the scope.
        /// </summary>
        /// <value>The type of the scope.</value>
        [DataMember(Name = "scopeType", EmitDefaultValue = false)]
        public ScopeTypeEnum? ScopeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateScopeRequest" /> class.
        /// </summary>
        /// <param name="currencyIso">The currency iso code of the scope..</param>
        /// <param name="defaultCulture">The default culture of the scope..</param>
        /// <param name="description">description.</param>
        /// <param name="name">name.</param>
        /// <param name="parentScopeId">The parent scope id..</param>
        /// <param name="scopeType">The type of the scope..</param>
        public CreateScopeRequest(string currencyIso = default(string), string defaultCulture = default(string), Dictionary<string, string> description = default(Dictionary<string, string>), Dictionary<string, string> name = default(Dictionary<string, string>), string parentScopeId = default(string), ScopeTypeEnum? scopeType = default(ScopeTypeEnum?))
        {
            this.CurrencyIso = currencyIso;
            this.DefaultCulture = defaultCulture;
            this.Description = description;
            this.Name = name;
            this.ParentScopeId = parentScopeId;
            this.ScopeType = scopeType;
        }

        /// <summary>
        /// The currency iso code of the scope.
        /// </summary>
        /// <value>The currency iso code of the scope.</value>
        [DataMember(Name = "currencyIso", EmitDefaultValue = false)]
        public string CurrencyIso { get; set; }

        /// <summary>
        /// The default culture of the scope.
        /// </summary>
        /// <value>The default culture of the scope.</value>
        [DataMember(Name = "defaultCulture", EmitDefaultValue = false)]
        public string DefaultCulture { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public Dictionary<string, string> Name { get; set; }

        /// <summary>
        /// The parent scope id.
        /// </summary>
        /// <value>The parent scope id.</value>
        [DataMember(Name = "parentScopeId", EmitDefaultValue = false)]
        public string ParentScopeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateScopeRequest {\n");
            sb.Append("  CurrencyIso: ").Append(CurrencyIso).Append("\n");
            sb.Append("  DefaultCulture: ").Append(DefaultCulture).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentScopeId: ").Append(ParentScopeId).Append("\n");
            sb.Append("  ScopeType: ").Append(ScopeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateScopeRequest);
        }

        /// <summary>
        /// Returns true if CreateScopeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateScopeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateScopeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyIso == input.CurrencyIso ||
                    (this.CurrencyIso != null &&
                    this.CurrencyIso.Equals(input.CurrencyIso))
                ) && 
                (
                    this.DefaultCulture == input.DefaultCulture ||
                    (this.DefaultCulture != null &&
                    this.DefaultCulture.Equals(input.DefaultCulture))
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name != null &&
                    input.Name != null &&
                    this.Name.SequenceEqual(input.Name)
                ) && 
                (
                    this.ParentScopeId == input.ParentScopeId ||
                    (this.ParentScopeId != null &&
                    this.ParentScopeId.Equals(input.ParentScopeId))
                ) && 
                (
                    this.ScopeType == input.ScopeType ||
                    this.ScopeType.Equals(input.ScopeType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyIso != null)
                    hashCode = hashCode * 59 + this.CurrencyIso.GetHashCode();
                if (this.DefaultCulture != null)
                    hashCode = hashCode * 59 + this.DefaultCulture.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentScopeId != null)
                    hashCode = hashCode * 59 + this.ParentScopeId.GetHashCode();
                hashCode = hashCode * 59 + this.ScopeType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
