/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Vault profile are external credit card token management.
    /// </summary>
    [DataContract(Name = "CreateCartPaymentVaultProfileRequest")]
    public partial class CreateCartPaymentVaultProfileRequest : IEquatable<CreateCartPaymentVaultProfileRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCartPaymentVaultProfileRequest" /> class.
        /// </summary>
        /// <param name="cardHolderName">The name on the credit card.</param>
        /// <param name="createPaymentProfile">A boolean to indicate to save the payment profile.</param>
        /// <param name="ip">The ip address issuing the request.</param>
        /// <param name="temporaryToken">The tempory token returned by the payment provider.</param>
        public CreateCartPaymentVaultProfileRequest(string cardHolderName = default(string), bool createPaymentProfile = default(bool), string ip = default(string), string temporaryToken = default(string))
        {
            this.CardHolderName = cardHolderName;
            this.CreatePaymentProfile = createPaymentProfile;
            this.Ip = ip;
            this.TemporaryToken = temporaryToken;
        }

        /// <summary>
        /// The name on the credit card
        /// </summary>
        /// <value>The name on the credit card</value>
        [DataMember(Name = "cardHolderName", EmitDefaultValue = false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// A boolean to indicate to save the payment profile
        /// </summary>
        /// <value>A boolean to indicate to save the payment profile</value>
        [DataMember(Name = "createPaymentProfile", EmitDefaultValue = true)]
        public bool CreatePaymentProfile { get; set; }

        /// <summary>
        /// The ip address issuing the request
        /// </summary>
        /// <value>The ip address issuing the request</value>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// The tempory token returned by the payment provider
        /// </summary>
        /// <value>The tempory token returned by the payment provider</value>
        [DataMember(Name = "temporaryToken", EmitDefaultValue = false)]
        public string TemporaryToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCartPaymentVaultProfileRequest {\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  CreatePaymentProfile: ").Append(CreatePaymentProfile).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  TemporaryToken: ").Append(TemporaryToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCartPaymentVaultProfileRequest);
        }

        /// <summary>
        /// Returns true if CreateCartPaymentVaultProfileRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCartPaymentVaultProfileRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCartPaymentVaultProfileRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.CreatePaymentProfile == input.CreatePaymentProfile ||
                    this.CreatePaymentProfile.Equals(input.CreatePaymentProfile)
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.TemporaryToken == input.TemporaryToken ||
                    (this.TemporaryToken != null &&
                    this.TemporaryToken.Equals(input.TemporaryToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                hashCode = hashCode * 59 + this.CreatePaymentProfile.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.TemporaryToken != null)
                    hashCode = hashCode * 59 + this.TemporaryToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
