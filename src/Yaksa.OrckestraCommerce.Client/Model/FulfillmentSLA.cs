/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentSLA
    /// </summary>
    [DataContract(Name = "FulfillmentSLA")]
    public partial class FulfillmentSLA : IEquatable<FulfillmentSLA>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentSLA" /> class.
        /// </summary>
        /// <param name="created">the date the fulfillment sla was created..</param>
        /// <param name="createdBy">The identifier of the operator who created the fulfillment sla..</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier..</param>
        /// <param name="id">The fulfillment sla identifier..</param>
        /// <param name="lastModified">The date that the last modification was applied to the fulfillment sla..</param>
        /// <param name="lastModifiedBy">The identifier of the operator who last modified the fulfillment sla..</param>
        /// <param name="scopeId">The scope identifier..</param>
        /// <param name="shipmentId">The shipment identifier..</param>
        /// <param name="delayInMinutes">The delay before the sla will expire..</param>
        /// <param name="expirationDate">The time when the sla will expire..</param>
        /// <param name="expiryWarningTimeInMinutes">The warning time before the sla will expire..</param>
        /// <param name="isActive">A value indicating whether the fulfillment sla is active..</param>
        /// <param name="name">The name..</param>
        /// <param name="orderId">The order identifier..</param>
        public FulfillmentSLA(DateTime created = default(DateTime), string createdBy = default(string), string fulfillmentLocationId = default(string), string id = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), string scopeId = default(string), string shipmentId = default(string), int delayInMinutes = default(int), DateTime expirationDate = default(DateTime), int expiryWarningTimeInMinutes = default(int), bool isActive = default(bool), string name = default(string), string orderId = default(string))
        {
            this.Created = created;
            this.CreatedBy = createdBy;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.Id = id;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.ScopeId = scopeId;
            this.ShipmentId = shipmentId;
            this.DelayInMinutes = delayInMinutes;
            this.ExpirationDate = expirationDate;
            this.ExpiryWarningTimeInMinutes = expiryWarningTimeInMinutes;
            this.IsActive = isActive;
            this.Name = name;
            this.OrderId = orderId;
        }

        /// <summary>
        /// the date the fulfillment sla was created.
        /// </summary>
        /// <value>the date the fulfillment sla was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The identifier of the operator who created the fulfillment sla.
        /// </summary>
        /// <value>The identifier of the operator who created the fulfillment sla.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The fulfillment location identifier.
        /// </summary>
        /// <value>The fulfillment location identifier.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// The fulfillment sla identifier.
        /// </summary>
        /// <value>The fulfillment sla identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The date that the last modification was applied to the fulfillment sla.
        /// </summary>
        /// <value>The date that the last modification was applied to the fulfillment sla.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The identifier of the operator who last modified the fulfillment sla.
        /// </summary>
        /// <value>The identifier of the operator who last modified the fulfillment sla.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The scope identifier.
        /// </summary>
        /// <value>The scope identifier.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The shipment identifier.
        /// </summary>
        /// <value>The shipment identifier.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The delay before the sla will expire.
        /// </summary>
        /// <value>The delay before the sla will expire.</value>
        [DataMember(Name = "delayInMinutes", EmitDefaultValue = false)]
        public int DelayInMinutes { get; set; }

        /// <summary>
        /// The time when the sla will expire.
        /// </summary>
        /// <value>The time when the sla will expire.</value>
        [DataMember(Name = "expirationDate", EmitDefaultValue = false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// The warning time before the sla will expire.
        /// </summary>
        /// <value>The warning time before the sla will expire.</value>
        [DataMember(Name = "expiryWarningTimeInMinutes", EmitDefaultValue = false)]
        public int ExpiryWarningTimeInMinutes { get; set; }

        /// <summary>
        /// A value indicating whether the fulfillment sla is active.
        /// </summary>
        /// <value>A value indicating whether the fulfillment sla is active.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The name.
        /// </summary>
        /// <value>The name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The order identifier.
        /// </summary>
        /// <value>The order identifier.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentSLA {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  DelayInMinutes: ").Append(DelayInMinutes).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpiryWarningTimeInMinutes: ").Append(ExpiryWarningTimeInMinutes).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentSLA);
        }

        /// <summary>
        /// Returns true if FulfillmentSLA instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentSLA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentSLA input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.DelayInMinutes == input.DelayInMinutes ||
                    this.DelayInMinutes.Equals(input.DelayInMinutes)
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExpiryWarningTimeInMinutes == input.ExpiryWarningTimeInMinutes ||
                    this.ExpiryWarningTimeInMinutes.Equals(input.ExpiryWarningTimeInMinutes)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                hashCode = hashCode * 59 + this.DelayInMinutes.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                hashCode = hashCode * 59 + this.ExpiryWarningTimeInMinutes.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
