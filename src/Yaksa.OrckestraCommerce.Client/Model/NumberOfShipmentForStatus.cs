/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// NumberOfShipmentForStatus
    /// </summary>
    [DataContract(Name = "NumberOfShipmentForStatus")]
    public partial class NumberOfShipmentForStatus : IEquatable<NumberOfShipmentForStatus>, IValidatableObject
    {
        /// <summary>
        /// A value indicating how the shipment is treated from the point of view of the location requesting the number of shipments.
        /// </summary>
        /// <value>A value indicating how the shipment is treated from the point of view of the location requesting the number of shipments.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentShipmentStatusTypeEnum
        {
            /// <summary>
            /// Enum FulfillmentOnly for value: FulfillmentOnly
            /// </summary>
            [EnumMember(Value = "FulfillmentOnly")]
            FulfillmentOnly = 1,

            /// <summary>
            /// Enum PickupOnly for value: PickupOnly
            /// </summary>
            [EnumMember(Value = "PickupOnly")]
            PickupOnly = 2,

            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 3

        }


        /// <summary>
        /// A value indicating how the shipment is treated from the point of view of the location requesting the number of shipments.
        /// </summary>
        /// <value>A value indicating how the shipment is treated from the point of view of the location requesting the number of shipments.</value>
        [DataMember(Name = "fulfillmentShipmentStatusType", EmitDefaultValue = false)]
        public FulfillmentShipmentStatusTypeEnum? FulfillmentShipmentStatusType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NumberOfShipmentForStatus" /> class.
        /// </summary>
        /// <param name="fulfillmentShipmentStatusType">A value indicating how the shipment is treated from the point of view of the location requesting the number of shipments..</param>
        /// <param name="numberOfShipments">The number of shipments..</param>
        /// <param name="status">The status..</param>
        public NumberOfShipmentForStatus(FulfillmentShipmentStatusTypeEnum? fulfillmentShipmentStatusType = default(FulfillmentShipmentStatusTypeEnum?), int numberOfShipments = default(int), string status = default(string))
        {
            this.FulfillmentShipmentStatusType = fulfillmentShipmentStatusType;
            this.NumberOfShipments = numberOfShipments;
            this.Status = status;
        }

        /// <summary>
        /// The number of shipments.
        /// </summary>
        /// <value>The number of shipments.</value>
        [DataMember(Name = "numberOfShipments", EmitDefaultValue = false)]
        public int NumberOfShipments { get; set; }

        /// <summary>
        /// The status.
        /// </summary>
        /// <value>The status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NumberOfShipmentForStatus {\n");
            sb.Append("  FulfillmentShipmentStatusType: ").Append(FulfillmentShipmentStatusType).Append("\n");
            sb.Append("  NumberOfShipments: ").Append(NumberOfShipments).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NumberOfShipmentForStatus);
        }

        /// <summary>
        /// Returns true if NumberOfShipmentForStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of NumberOfShipmentForStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NumberOfShipmentForStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FulfillmentShipmentStatusType == input.FulfillmentShipmentStatusType ||
                    this.FulfillmentShipmentStatusType.Equals(input.FulfillmentShipmentStatusType)
                ) && 
                (
                    this.NumberOfShipments == input.NumberOfShipments ||
                    this.NumberOfShipments.Equals(input.NumberOfShipments)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.FulfillmentShipmentStatusType.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfShipments.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
