/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Rma
    /// </summary>
    [DataContract(Name = "Rma")]
    public partial class Rma : IEquatable<Rma>, IValidatableObject
    {
        /// <summary>
        /// the type of the customerrelated to RMA
        /// </summary>
        /// <value>the type of the customerrelated to RMA</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerTypeEnum
        {
            /// <summary>
            /// Enum Registered for value: Registered
            /// </summary>
            [EnumMember(Value = "Registered")]
            Registered = 1,

            /// <summary>
            /// Enum Guest for value: Guest
            /// </summary>
            [EnumMember(Value = "Guest")]
            Guest = 2,

            /// <summary>
            /// Enum Unregistered for value: Unregistered
            /// </summary>
            [EnumMember(Value = "Unregistered")]
            Unregistered = 3

        }


        /// <summary>
        /// the type of the customerrelated to RMA
        /// </summary>
        /// <value>the type of the customerrelated to RMA</value>
        [DataMember(Name = "customerType", EmitDefaultValue = false)]
        public CustomerTypeEnum? CustomerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rma" /> class.
        /// </summary>
        /// <param name="created">The creation date..</param>
        /// <param name="createdBy">The identity of the user who created the payment..</param>
        /// <param name="id">the unique identifier of the RMA.</param>
        /// <param name="isFinished">Check if RMA had reached a final status.</param>
        /// <param name="lastModified">The last modification date..</param>
        /// <param name="lastModifiedBy">The identity of the user who modified the payment..</param>
        /// <param name="orderNumber">The Order Number related to the RMA.</param>
        /// <param name="rmaExternalNumber">External RMA number.</param>
        /// <param name="rmaItems">RMA item details.</param>
        /// <param name="rmaNumber">RMA number.</param>
        /// <param name="status">the process status of the RMA.</param>
        /// <param name="totalAmountRefunded">Total amount of refunded items, if applicable.</param>
        /// <param name="customerId">the Identifier of the Customer who owns the RMA.</param>
        /// <param name="customerEmail">the email address of the customer related to RMA.</param>
        /// <param name="customerFirstName">the first name of the customerrelated to RMA.</param>
        /// <param name="customerLastName">Gets or set the last name of the customer related to RMA.</param>
        /// <param name="customerType">the type of the customerrelated to RMA.</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="scopeId">Scope identifier.</param>
        public Rma(DateTime created = default(DateTime), string createdBy = default(string), string id = default(string), bool isFinished = default(bool), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), string orderNumber = default(string), string rmaExternalNumber = default(string), List<RmaItem> rmaItems = default(List<RmaItem>), string rmaNumber = default(string), string status = default(string), double totalAmountRefunded = default(double), string customerId = default(string), string customerEmail = default(string), string customerFirstName = default(string), string customerLastName = default(string), CustomerTypeEnum? customerType = default(CustomerTypeEnum?), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string scopeId = default(string))
        {
            this.Created = created;
            this.CreatedBy = createdBy;
            this.Id = id;
            this.IsFinished = isFinished;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.OrderNumber = orderNumber;
            this.RmaExternalNumber = rmaExternalNumber;
            this.RmaItems = rmaItems;
            this.RmaNumber = rmaNumber;
            this.Status = status;
            this.TotalAmountRefunded = totalAmountRefunded;
            this.CustomerId = customerId;
            this.CustomerEmail = customerEmail;
            this.CustomerFirstName = customerFirstName;
            this.CustomerLastName = customerLastName;
            this.CustomerType = customerType;
            this.PropertyBag = propertyBag;
            this.ScopeId = scopeId;
        }

        /// <summary>
        /// The creation date.
        /// </summary>
        /// <value>The creation date.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The identity of the user who created the payment.
        /// </summary>
        /// <value>The identity of the user who created the payment.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// the unique identifier of the RMA
        /// </summary>
        /// <value>the unique identifier of the RMA</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Check if RMA had reached a final status
        /// </summary>
        /// <value>Check if RMA had reached a final status</value>
        [DataMember(Name = "isFinished", EmitDefaultValue = true)]
        public bool IsFinished { get; set; }

        /// <summary>
        /// The last modification date.
        /// </summary>
        /// <value>The last modification date.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The identity of the user who modified the payment.
        /// </summary>
        /// <value>The identity of the user who modified the payment.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The Order Number related to the RMA
        /// </summary>
        /// <value>The Order Number related to the RMA</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// External RMA number
        /// </summary>
        /// <value>External RMA number</value>
        [DataMember(Name = "rmaExternalNumber", EmitDefaultValue = false)]
        public string RmaExternalNumber { get; set; }

        /// <summary>
        /// RMA item details
        /// </summary>
        /// <value>RMA item details</value>
        [DataMember(Name = "rmaItems", EmitDefaultValue = false)]
        public List<RmaItem> RmaItems { get; set; }

        /// <summary>
        /// RMA number
        /// </summary>
        /// <value>RMA number</value>
        [DataMember(Name = "rmaNumber", EmitDefaultValue = false)]
        public string RmaNumber { get; set; }

        /// <summary>
        /// the process status of the RMA
        /// </summary>
        /// <value>the process status of the RMA</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Total amount of refunded items, if applicable
        /// </summary>
        /// <value>Total amount of refunded items, if applicable</value>
        [DataMember(Name = "totalAmountRefunded", EmitDefaultValue = false)]
        public double TotalAmountRefunded { get; set; }

        /// <summary>
        /// the Identifier of the Customer who owns the RMA
        /// </summary>
        /// <value>the Identifier of the Customer who owns the RMA</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// the email address of the customer related to RMA
        /// </summary>
        /// <value>the email address of the customer related to RMA</value>
        [DataMember(Name = "customerEmail", EmitDefaultValue = false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// the first name of the customerrelated to RMA
        /// </summary>
        /// <value>the first name of the customerrelated to RMA</value>
        [DataMember(Name = "customerFirstName", EmitDefaultValue = false)]
        public string CustomerFirstName { get; set; }

        /// <summary>
        /// Gets or set the last name of the customer related to RMA
        /// </summary>
        /// <value>Gets or set the last name of the customer related to RMA</value>
        [DataMember(Name = "customerLastName", EmitDefaultValue = false)]
        public string CustomerLastName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Scope identifier
        /// </summary>
        /// <value>Scope identifier</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rma {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsFinished: ").Append(IsFinished).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  RmaExternalNumber: ").Append(RmaExternalNumber).Append("\n");
            sb.Append("  RmaItems: ").Append(RmaItems).Append("\n");
            sb.Append("  RmaNumber: ").Append(RmaNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalAmountRefunded: ").Append(TotalAmountRefunded).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  CustomerFirstName: ").Append(CustomerFirstName).Append("\n");
            sb.Append("  CustomerLastName: ").Append(CustomerLastName).Append("\n");
            sb.Append("  CustomerType: ").Append(CustomerType).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rma);
        }

        /// <summary>
        /// Returns true if Rma instances are equal
        /// </summary>
        /// <param name="input">Instance of Rma to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rma input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsFinished == input.IsFinished ||
                    this.IsFinished.Equals(input.IsFinished)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.RmaExternalNumber == input.RmaExternalNumber ||
                    (this.RmaExternalNumber != null &&
                    this.RmaExternalNumber.Equals(input.RmaExternalNumber))
                ) && 
                (
                    this.RmaItems == input.RmaItems ||
                    this.RmaItems != null &&
                    input.RmaItems != null &&
                    this.RmaItems.SequenceEqual(input.RmaItems)
                ) && 
                (
                    this.RmaNumber == input.RmaNumber ||
                    (this.RmaNumber != null &&
                    this.RmaNumber.Equals(input.RmaNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalAmountRefunded == input.TotalAmountRefunded ||
                    this.TotalAmountRefunded.Equals(input.TotalAmountRefunded)
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.CustomerEmail == input.CustomerEmail ||
                    (this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(input.CustomerEmail))
                ) && 
                (
                    this.CustomerFirstName == input.CustomerFirstName ||
                    (this.CustomerFirstName != null &&
                    this.CustomerFirstName.Equals(input.CustomerFirstName))
                ) && 
                (
                    this.CustomerLastName == input.CustomerLastName ||
                    (this.CustomerLastName != null &&
                    this.CustomerLastName.Equals(input.CustomerLastName))
                ) && 
                (
                    this.CustomerType == input.CustomerType ||
                    this.CustomerType.Equals(input.CustomerType)
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsFinished.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                if (this.RmaExternalNumber != null)
                    hashCode = hashCode * 59 + this.RmaExternalNumber.GetHashCode();
                if (this.RmaItems != null)
                    hashCode = hashCode * 59 + this.RmaItems.GetHashCode();
                if (this.RmaNumber != null)
                    hashCode = hashCode * 59 + this.RmaNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.TotalAmountRefunded.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.CustomerEmail != null)
                    hashCode = hashCode * 59 + this.CustomerEmail.GetHashCode();
                if (this.CustomerFirstName != null)
                    hashCode = hashCode * 59 + this.CustomerFirstName.GetHashCode();
                if (this.CustomerLastName != null)
                    hashCode = hashCode * 59 + this.CustomerLastName.GetHashCode();
                hashCode = hashCode * 59 + this.CustomerType.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
