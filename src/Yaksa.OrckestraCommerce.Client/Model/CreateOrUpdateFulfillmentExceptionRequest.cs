/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "CreateOrUpdateFulfillmentExceptionRequest")]
    public partial class CreateOrUpdateFulfillmentExceptionRequest : IEquatable<CreateOrUpdateFulfillmentExceptionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrUpdateFulfillmentExceptionRequest" /> class.
        /// </summary>
        /// <param name="note">The note..</param>
        /// <param name="reasonLookupValue">The reason lookup value..</param>
        public CreateOrUpdateFulfillmentExceptionRequest(string note = default(string), string reasonLookupValue = default(string))
        {
            this.Note = note;
            this.ReasonLookupValue = reasonLookupValue;
        }

        /// <summary>
        /// The note.
        /// </summary>
        /// <value>The note.</value>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// The reason lookup value.
        /// </summary>
        /// <value>The reason lookup value.</value>
        [DataMember(Name = "reasonLookupValue", EmitDefaultValue = false)]
        public string ReasonLookupValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrUpdateFulfillmentExceptionRequest {\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  ReasonLookupValue: ").Append(ReasonLookupValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrUpdateFulfillmentExceptionRequest);
        }

        /// <summary>
        /// Returns true if CreateOrUpdateFulfillmentExceptionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrUpdateFulfillmentExceptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrUpdateFulfillmentExceptionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.ReasonLookupValue == input.ReasonLookupValue ||
                    (this.ReasonLookupValue != null &&
                    this.ReasonLookupValue.Equals(input.ReasonLookupValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.ReasonLookupValue != null)
                    hashCode = hashCode * 59 + this.ReasonLookupValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
