/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Scoped templatable content either for notification (email) purposes or Reports such as printable order invoices.
    /// </summary>
    [DataContract(Name = "GetTemplateByNameRequest")]
    public partial class GetTemplateByNameRequest : IEquatable<GetTemplateByNameRequest>, IValidatableObject
    {
        /// <summary>
        /// Type of the template to retrieve
        /// </summary>
        /// <value>Type of the template to retrieve</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Email for value: Email
            /// </summary>
            [EnumMember(Value = "Email")]
            Email = 2,

            /// <summary>
            /// Enum Shipment for value: Shipment
            /// </summary>
            [EnumMember(Value = "Shipment")]
            Shipment = 3

        }


        /// <summary>
        /// Type of the template to retrieve
        /// </summary>
        /// <value>Type of the template to retrieve</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTemplateByNameRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="activeOnly">Determines whether the result will include inactive templates.</param>
        /// <param name="cultures">List of cultures for which to retrieve the content.</param>
        /// <param name="includeContents">Determines whether the template content will be included with the result.</param>
        /// <param name="name">Name of the template to retrieve.</param>
        /// <param name="replaceTemplateVariables">Determines if the template variable tags will be replaced with their actual values..</param>
        /// <param name="type">Type of the template to retrieve.</param>
        public GetTemplateByNameRequest(string scopeId = default(string), bool activeOnly = default(bool), List<string> cultures = default(List<string>), bool includeContents = default(bool), string name = default(string), bool replaceTemplateVariables = default(bool), TypeEnum? type = default(TypeEnum?))
        {
            this.ScopeId = scopeId;
            this.ActiveOnly = activeOnly;
            this.Cultures = cultures;
            this.IncludeContents = includeContents;
            this.Name = name;
            this.ReplaceTemplateVariables = replaceTemplateVariables;
            this.Type = type;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Determines whether the result will include inactive templates
        /// </summary>
        /// <value>Determines whether the result will include inactive templates</value>
        [DataMember(Name = "activeOnly", EmitDefaultValue = true)]
        public bool ActiveOnly { get; set; }

        /// <summary>
        /// List of cultures for which to retrieve the content
        /// </summary>
        /// <value>List of cultures for which to retrieve the content</value>
        [DataMember(Name = "cultures", EmitDefaultValue = false)]
        public List<string> Cultures { get; set; }

        /// <summary>
        /// Determines whether the template content will be included with the result
        /// </summary>
        /// <value>Determines whether the template content will be included with the result</value>
        [DataMember(Name = "includeContents", EmitDefaultValue = true)]
        public bool IncludeContents { get; set; }

        /// <summary>
        /// Name of the template to retrieve
        /// </summary>
        /// <value>Name of the template to retrieve</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Determines if the template variable tags will be replaced with their actual values.
        /// </summary>
        /// <value>Determines if the template variable tags will be replaced with their actual values.</value>
        [DataMember(Name = "replaceTemplateVariables", EmitDefaultValue = true)]
        public bool ReplaceTemplateVariables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTemplateByNameRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  ActiveOnly: ").Append(ActiveOnly).Append("\n");
            sb.Append("  Cultures: ").Append(Cultures).Append("\n");
            sb.Append("  IncludeContents: ").Append(IncludeContents).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReplaceTemplateVariables: ").Append(ReplaceTemplateVariables).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTemplateByNameRequest);
        }

        /// <summary>
        /// Returns true if GetTemplateByNameRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTemplateByNameRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTemplateByNameRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.ActiveOnly == input.ActiveOnly ||
                    this.ActiveOnly.Equals(input.ActiveOnly)
                ) && 
                (
                    this.Cultures == input.Cultures ||
                    this.Cultures != null &&
                    input.Cultures != null &&
                    this.Cultures.SequenceEqual(input.Cultures)
                ) && 
                (
                    this.IncludeContents == input.IncludeContents ||
                    this.IncludeContents.Equals(input.IncludeContents)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReplaceTemplateVariables == input.ReplaceTemplateVariables ||
                    this.ReplaceTemplateVariables.Equals(input.ReplaceTemplateVariables)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                hashCode = hashCode * 59 + this.ActiveOnly.GetHashCode();
                if (this.Cultures != null)
                    hashCode = hashCode * 59 + this.Cultures.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeContents.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.ReplaceTemplateVariables.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
