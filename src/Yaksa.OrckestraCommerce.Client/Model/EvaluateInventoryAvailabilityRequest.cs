/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Inventory items are a combination of InventoryQuantity and InventorySchedules.
    /// </summary>
    [DataContract(Name = "EvaluateInventoryAvailabilityRequest")]
    public partial class EvaluateInventoryAvailabilityRequest : IEquatable<EvaluateInventoryAvailabilityRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluateInventoryAvailabilityRequest" /> class.
        /// </summary>
        /// <param name="evaluationDate">The inventory availability evaluation date.</param>
        /// <param name="requests">The inventory item availability evaluation requests.</param>
        public EvaluateInventoryAvailabilityRequest(DateTime evaluationDate = default(DateTime), List<InventoryItemAvailabilityEvaluationRequest> requests = default(List<InventoryItemAvailabilityEvaluationRequest>))
        {
            this.EvaluationDate = evaluationDate;
            this.Requests = requests;
        }

        /// <summary>
        /// The inventory availability evaluation date
        /// </summary>
        /// <value>The inventory availability evaluation date</value>
        [DataMember(Name = "evaluationDate", EmitDefaultValue = false)]
        public DateTime EvaluationDate { get; set; }

        /// <summary>
        /// The inventory item availability evaluation requests
        /// </summary>
        /// <value>The inventory item availability evaluation requests</value>
        [DataMember(Name = "requests", EmitDefaultValue = false)]
        public List<InventoryItemAvailabilityEvaluationRequest> Requests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluateInventoryAvailabilityRequest {\n");
            sb.Append("  EvaluationDate: ").Append(EvaluationDate).Append("\n");
            sb.Append("  Requests: ").Append(Requests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvaluateInventoryAvailabilityRequest);
        }

        /// <summary>
        /// Returns true if EvaluateInventoryAvailabilityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EvaluateInventoryAvailabilityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluateInventoryAvailabilityRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EvaluationDate == input.EvaluationDate ||
                    (this.EvaluationDate != null &&
                    this.EvaluationDate.Equals(input.EvaluationDate))
                ) && 
                (
                    this.Requests == input.Requests ||
                    this.Requests != null &&
                    input.Requests != null &&
                    this.Requests.SequenceEqual(input.Requests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EvaluationDate != null)
                    hashCode = hashCode * 59 + this.EvaluationDate.GetHashCode();
                if (this.Requests != null)
                    hashCode = hashCode * 59 + this.Requests.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
