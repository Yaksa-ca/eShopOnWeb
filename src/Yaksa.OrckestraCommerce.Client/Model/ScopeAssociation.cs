/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ScopeAssociation
    /// </summary>
    [DataContract(Name = "ScopeAssociation")]
    public partial class ScopeAssociation : IEquatable<ScopeAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScopeAssociation" /> class.
        /// </summary>
        /// <param name="created">The date at which the association was created..</param>
        /// <param name="scopeName">The name (business key) of the Scope associated to the entity..</param>
        public ScopeAssociation(DateTime created = default(DateTime), string scopeName = default(string))
        {
            this.Created = created;
            this.ScopeName = scopeName;
        }

        /// <summary>
        /// The date at which the association was created.
        /// </summary>
        /// <value>The date at which the association was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The name (business key) of the Scope associated to the entity.
        /// </summary>
        /// <value>The name (business key) of the Scope associated to the entity.</value>
        [DataMember(Name = "scopeName", EmitDefaultValue = false)]
        public string ScopeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScopeAssociation {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ScopeName: ").Append(ScopeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScopeAssociation);
        }

        /// <summary>
        /// Returns true if ScopeAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of ScopeAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScopeAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ScopeName == input.ScopeName ||
                    (this.ScopeName != null &&
                    this.ScopeName.Equals(input.ScopeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.ScopeName != null)
                    hashCode = hashCode * 59 + this.ScopeName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
