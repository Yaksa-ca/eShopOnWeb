/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Long running tasks perform batch processing.
    /// </summary>
    [DataContract(Name = "QueueActivityTaskRequest")]
    public partial class QueueActivityTaskRequest : IEquatable<QueueActivityTaskRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueActivityTaskRequest" /> class.
        /// </summary>
        /// <param name="correlationId">The correlation identifier allowing to regroup and retrieve various tasks together..</param>
        /// <param name="inputs">inputs.</param>
        /// <param name="isSequential">Value indicating whether the task must be run in the specific sequence..</param>
        /// <param name="sequenceGroup">The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup.</param>
        /// <param name="sequenceQuota">Value indicating what is the expected maximum sequence count..</param>
        /// <param name="taskName">The task identifier..</param>
        /// <param name="activityTypeName">The fully qualified name of the workflow activity type..</param>
        public QueueActivityTaskRequest(string correlationId = default(string), Dictionary<string, Object> inputs = default(Dictionary<string, Object>), bool isSequential = default(bool), string sequenceGroup = default(string), int sequenceQuota = default(int), string taskName = default(string), string activityTypeName = default(string))
        {
            this.CorrelationId = correlationId;
            this.Inputs = inputs;
            this.IsSequential = isSequential;
            this.SequenceGroup = sequenceGroup;
            this.SequenceQuota = sequenceQuota;
            this.TaskName = taskName;
            this.ActivityTypeName = activityTypeName;
        }

        /// <summary>
        /// The correlation identifier allowing to regroup and retrieve various tasks together.
        /// </summary>
        /// <value>The correlation identifier allowing to regroup and retrieve various tasks together.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public Dictionary<string, Object> Inputs { get; set; }

        /// <summary>
        /// Value indicating whether the task must be run in the specific sequence.
        /// </summary>
        /// <value>Value indicating whether the task must be run in the specific sequence.</value>
        [DataMember(Name = "isSequential", EmitDefaultValue = true)]
        public bool IsSequential { get; set; }

        /// <summary>
        /// The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup
        /// </summary>
        /// <value>The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup</value>
        [DataMember(Name = "sequenceGroup", EmitDefaultValue = false)]
        public string SequenceGroup { get; set; }

        /// <summary>
        /// Value indicating what is the expected maximum sequence count.
        /// </summary>
        /// <value>Value indicating what is the expected maximum sequence count.</value>
        [DataMember(Name = "sequenceQuota", EmitDefaultValue = false)]
        public int SequenceQuota { get; set; }

        /// <summary>
        /// The task identifier.
        /// </summary>
        /// <value>The task identifier.</value>
        [DataMember(Name = "taskName", EmitDefaultValue = false)]
        public string TaskName { get; set; }

        /// <summary>
        /// The fully qualified name of the workflow activity type.
        /// </summary>
        /// <value>The fully qualified name of the workflow activity type.</value>
        [DataMember(Name = "activityTypeName", EmitDefaultValue = false)]
        public string ActivityTypeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueActivityTaskRequest {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  IsSequential: ").Append(IsSequential).Append("\n");
            sb.Append("  SequenceGroup: ").Append(SequenceGroup).Append("\n");
            sb.Append("  SequenceQuota: ").Append(SequenceQuota).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  ActivityTypeName: ").Append(ActivityTypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueActivityTaskRequest);
        }

        /// <summary>
        /// Returns true if QueueActivityTaskRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueActivityTaskRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueActivityTaskRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.IsSequential == input.IsSequential ||
                    this.IsSequential.Equals(input.IsSequential)
                ) && 
                (
                    this.SequenceGroup == input.SequenceGroup ||
                    (this.SequenceGroup != null &&
                    this.SequenceGroup.Equals(input.SequenceGroup))
                ) && 
                (
                    this.SequenceQuota == input.SequenceQuota ||
                    this.SequenceQuota.Equals(input.SequenceQuota)
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.ActivityTypeName == input.ActivityTypeName ||
                    (this.ActivityTypeName != null &&
                    this.ActivityTypeName.Equals(input.ActivityTypeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                hashCode = hashCode * 59 + this.IsSequential.GetHashCode();
                if (this.SequenceGroup != null)
                    hashCode = hashCode * 59 + this.SequenceGroup.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceQuota.GetHashCode();
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.ActivityTypeName != null)
                    hashCode = hashCode * 59 + this.ActivityTypeName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
