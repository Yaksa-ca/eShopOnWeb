/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// OrderSettings
    /// </summary>
    [DataContract(Name = "OrderSettings")]
    public partial class OrderSettings : IEquatable<OrderSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderSettings" /> class.
        /// </summary>
        /// <param name="allowManualAdjustmentsOfShipmentTotal">allows the final total of a shipment to be modified.</param>
        /// <param name="cartExpirationDays">the cart expiration days.</param>
        /// <param name="defaultCartCheckoutWorkflow">the default checkout workflow.</param>
        /// <param name="defaultCartTotalWorkflow">the default total workflow.</param>
        /// <param name="defaultOrderProcessingWorkflow">the default checkout workflow.</param>
        /// <param name="defaultOrderTotalWorkflow">the default checkout workflow.</param>
        /// <param name="defaultSubmitOrderWorkflow">the default submit order workflow.</param>
        /// <param name="isFulfillmentProcessingEnabled">whether order processing is enabled.</param>
        /// <param name="isInStorePickingAllowed">a value indicating whether in store picking is allowed.</param>
        /// <param name="isOrderAuditEnabled">determine if the changes made to an order will be audited.</param>
        /// <param name="isOrderEditionEnabled">whether order edition is enabled.</param>
        /// <param name="limitCustomerSearchToCurrentAndChildScopes">the customer search is limited to the current and child scopes only.</param>
        /// <param name="orderableInventoryStatuses">the list of inventory statuses available to order.</param>
        /// <param name="orderCanceledWorkflow">the order canceled workflow.</param>
        /// <param name="orderPostProcessingWorkflow">the order post processing workflow.</param>
        /// <param name="orderValueMaximumFilter">the order value maximum filter.</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="storePickerDefaultTab">store picker default tab in the new order wizard.</param>
        public OrderSettings(bool allowManualAdjustmentsOfShipmentTotal = default(bool), int cartExpirationDays = default(int), string defaultCartCheckoutWorkflow = default(string), string defaultCartTotalWorkflow = default(string), string defaultOrderProcessingWorkflow = default(string), string defaultOrderTotalWorkflow = default(string), string defaultSubmitOrderWorkflow = default(string), bool isFulfillmentProcessingEnabled = default(bool), bool isInStorePickingAllowed = default(bool), bool isOrderAuditEnabled = default(bool), bool isOrderEditionEnabled = default(bool), bool limitCustomerSearchToCurrentAndChildScopes = default(bool), string orderableInventoryStatuses = default(string), string orderCanceledWorkflow = default(string), string orderPostProcessingWorkflow = default(string), int orderValueMaximumFilter = default(int), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string storePickerDefaultTab = default(string))
        {
            this.AllowManualAdjustmentsOfShipmentTotal = allowManualAdjustmentsOfShipmentTotal;
            this.CartExpirationDays = cartExpirationDays;
            this.DefaultCartCheckoutWorkflow = defaultCartCheckoutWorkflow;
            this.DefaultCartTotalWorkflow = defaultCartTotalWorkflow;
            this.DefaultOrderProcessingWorkflow = defaultOrderProcessingWorkflow;
            this.DefaultOrderTotalWorkflow = defaultOrderTotalWorkflow;
            this.DefaultSubmitOrderWorkflow = defaultSubmitOrderWorkflow;
            this.IsFulfillmentProcessingEnabled = isFulfillmentProcessingEnabled;
            this.IsInStorePickingAllowed = isInStorePickingAllowed;
            this.IsOrderAuditEnabled = isOrderAuditEnabled;
            this.IsOrderEditionEnabled = isOrderEditionEnabled;
            this.LimitCustomerSearchToCurrentAndChildScopes = limitCustomerSearchToCurrentAndChildScopes;
            this.OrderableInventoryStatuses = orderableInventoryStatuses;
            this.OrderCanceledWorkflow = orderCanceledWorkflow;
            this.OrderPostProcessingWorkflow = orderPostProcessingWorkflow;
            this.OrderValueMaximumFilter = orderValueMaximumFilter;
            this.PropertyBag = propertyBag;
            this.StorePickerDefaultTab = storePickerDefaultTab;
        }

        /// <summary>
        /// allows the final total of a shipment to be modified
        /// </summary>
        /// <value>allows the final total of a shipment to be modified</value>
        [DataMember(Name = "allowManualAdjustmentsOfShipmentTotal", EmitDefaultValue = true)]
        public bool AllowManualAdjustmentsOfShipmentTotal { get; set; }

        /// <summary>
        /// the cart expiration days
        /// </summary>
        /// <value>the cart expiration days</value>
        [DataMember(Name = "cartExpirationDays", EmitDefaultValue = false)]
        public int CartExpirationDays { get; set; }

        /// <summary>
        /// the default checkout workflow
        /// </summary>
        /// <value>the default checkout workflow</value>
        [DataMember(Name = "defaultCartCheckoutWorkflow", EmitDefaultValue = false)]
        public string DefaultCartCheckoutWorkflow { get; set; }

        /// <summary>
        /// the default total workflow
        /// </summary>
        /// <value>the default total workflow</value>
        [DataMember(Name = "defaultCartTotalWorkflow", EmitDefaultValue = false)]
        public string DefaultCartTotalWorkflow { get; set; }

        /// <summary>
        /// the default checkout workflow
        /// </summary>
        /// <value>the default checkout workflow</value>
        [DataMember(Name = "defaultOrderProcessingWorkflow", EmitDefaultValue = false)]
        public string DefaultOrderProcessingWorkflow { get; set; }

        /// <summary>
        /// the default checkout workflow
        /// </summary>
        /// <value>the default checkout workflow</value>
        [DataMember(Name = "defaultOrderTotalWorkflow", EmitDefaultValue = false)]
        public string DefaultOrderTotalWorkflow { get; set; }

        /// <summary>
        /// the default submit order workflow
        /// </summary>
        /// <value>the default submit order workflow</value>
        [DataMember(Name = "defaultSubmitOrderWorkflow", EmitDefaultValue = false)]
        public string DefaultSubmitOrderWorkflow { get; set; }

        /// <summary>
        /// whether order processing is enabled
        /// </summary>
        /// <value>whether order processing is enabled</value>
        [DataMember(Name = "isFulfillmentProcessingEnabled", EmitDefaultValue = true)]
        public bool IsFulfillmentProcessingEnabled { get; set; }

        /// <summary>
        /// a value indicating whether in store picking is allowed
        /// </summary>
        /// <value>a value indicating whether in store picking is allowed</value>
        [DataMember(Name = "isInStorePickingAllowed", EmitDefaultValue = true)]
        public bool IsInStorePickingAllowed { get; set; }

        /// <summary>
        /// determine if the changes made to an order will be audited
        /// </summary>
        /// <value>determine if the changes made to an order will be audited</value>
        [DataMember(Name = "isOrderAuditEnabled", EmitDefaultValue = true)]
        public bool IsOrderAuditEnabled { get; set; }

        /// <summary>
        /// whether order edition is enabled
        /// </summary>
        /// <value>whether order edition is enabled</value>
        [DataMember(Name = "isOrderEditionEnabled", EmitDefaultValue = true)]
        public bool IsOrderEditionEnabled { get; set; }

        /// <summary>
        /// the customer search is limited to the current and child scopes only
        /// </summary>
        /// <value>the customer search is limited to the current and child scopes only</value>
        [DataMember(Name = "limitCustomerSearchToCurrentAndChildScopes", EmitDefaultValue = true)]
        public bool LimitCustomerSearchToCurrentAndChildScopes { get; set; }

        /// <summary>
        /// the list of inventory statuses available to order
        /// </summary>
        /// <value>the list of inventory statuses available to order</value>
        [DataMember(Name = "orderableInventoryStatuses", EmitDefaultValue = false)]
        public string OrderableInventoryStatuses { get; set; }

        /// <summary>
        /// the order canceled workflow
        /// </summary>
        /// <value>the order canceled workflow</value>
        [DataMember(Name = "orderCanceledWorkflow", EmitDefaultValue = false)]
        public string OrderCanceledWorkflow { get; set; }

        /// <summary>
        /// the order post processing workflow
        /// </summary>
        /// <value>the order post processing workflow</value>
        [DataMember(Name = "orderPostProcessingWorkflow", EmitDefaultValue = false)]
        public string OrderPostProcessingWorkflow { get; set; }

        /// <summary>
        /// the order value maximum filter
        /// </summary>
        /// <value>the order value maximum filter</value>
        [DataMember(Name = "orderValueMaximumFilter", EmitDefaultValue = false)]
        public int OrderValueMaximumFilter { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// store picker default tab in the new order wizard
        /// </summary>
        /// <value>store picker default tab in the new order wizard</value>
        [DataMember(Name = "storePickerDefaultTab", EmitDefaultValue = false)]
        public string StorePickerDefaultTab { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderSettings {\n");
            sb.Append("  AllowManualAdjustmentsOfShipmentTotal: ").Append(AllowManualAdjustmentsOfShipmentTotal).Append("\n");
            sb.Append("  CartExpirationDays: ").Append(CartExpirationDays).Append("\n");
            sb.Append("  DefaultCartCheckoutWorkflow: ").Append(DefaultCartCheckoutWorkflow).Append("\n");
            sb.Append("  DefaultCartTotalWorkflow: ").Append(DefaultCartTotalWorkflow).Append("\n");
            sb.Append("  DefaultOrderProcessingWorkflow: ").Append(DefaultOrderProcessingWorkflow).Append("\n");
            sb.Append("  DefaultOrderTotalWorkflow: ").Append(DefaultOrderTotalWorkflow).Append("\n");
            sb.Append("  DefaultSubmitOrderWorkflow: ").Append(DefaultSubmitOrderWorkflow).Append("\n");
            sb.Append("  IsFulfillmentProcessingEnabled: ").Append(IsFulfillmentProcessingEnabled).Append("\n");
            sb.Append("  IsInStorePickingAllowed: ").Append(IsInStorePickingAllowed).Append("\n");
            sb.Append("  IsOrderAuditEnabled: ").Append(IsOrderAuditEnabled).Append("\n");
            sb.Append("  IsOrderEditionEnabled: ").Append(IsOrderEditionEnabled).Append("\n");
            sb.Append("  LimitCustomerSearchToCurrentAndChildScopes: ").Append(LimitCustomerSearchToCurrentAndChildScopes).Append("\n");
            sb.Append("  OrderableInventoryStatuses: ").Append(OrderableInventoryStatuses).Append("\n");
            sb.Append("  OrderCanceledWorkflow: ").Append(OrderCanceledWorkflow).Append("\n");
            sb.Append("  OrderPostProcessingWorkflow: ").Append(OrderPostProcessingWorkflow).Append("\n");
            sb.Append("  OrderValueMaximumFilter: ").Append(OrderValueMaximumFilter).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  StorePickerDefaultTab: ").Append(StorePickerDefaultTab).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderSettings);
        }

        /// <summary>
        /// Returns true if OrderSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowManualAdjustmentsOfShipmentTotal == input.AllowManualAdjustmentsOfShipmentTotal ||
                    this.AllowManualAdjustmentsOfShipmentTotal.Equals(input.AllowManualAdjustmentsOfShipmentTotal)
                ) && 
                (
                    this.CartExpirationDays == input.CartExpirationDays ||
                    this.CartExpirationDays.Equals(input.CartExpirationDays)
                ) && 
                (
                    this.DefaultCartCheckoutWorkflow == input.DefaultCartCheckoutWorkflow ||
                    (this.DefaultCartCheckoutWorkflow != null &&
                    this.DefaultCartCheckoutWorkflow.Equals(input.DefaultCartCheckoutWorkflow))
                ) && 
                (
                    this.DefaultCartTotalWorkflow == input.DefaultCartTotalWorkflow ||
                    (this.DefaultCartTotalWorkflow != null &&
                    this.DefaultCartTotalWorkflow.Equals(input.DefaultCartTotalWorkflow))
                ) && 
                (
                    this.DefaultOrderProcessingWorkflow == input.DefaultOrderProcessingWorkflow ||
                    (this.DefaultOrderProcessingWorkflow != null &&
                    this.DefaultOrderProcessingWorkflow.Equals(input.DefaultOrderProcessingWorkflow))
                ) && 
                (
                    this.DefaultOrderTotalWorkflow == input.DefaultOrderTotalWorkflow ||
                    (this.DefaultOrderTotalWorkflow != null &&
                    this.DefaultOrderTotalWorkflow.Equals(input.DefaultOrderTotalWorkflow))
                ) && 
                (
                    this.DefaultSubmitOrderWorkflow == input.DefaultSubmitOrderWorkflow ||
                    (this.DefaultSubmitOrderWorkflow != null &&
                    this.DefaultSubmitOrderWorkflow.Equals(input.DefaultSubmitOrderWorkflow))
                ) && 
                (
                    this.IsFulfillmentProcessingEnabled == input.IsFulfillmentProcessingEnabled ||
                    this.IsFulfillmentProcessingEnabled.Equals(input.IsFulfillmentProcessingEnabled)
                ) && 
                (
                    this.IsInStorePickingAllowed == input.IsInStorePickingAllowed ||
                    this.IsInStorePickingAllowed.Equals(input.IsInStorePickingAllowed)
                ) && 
                (
                    this.IsOrderAuditEnabled == input.IsOrderAuditEnabled ||
                    this.IsOrderAuditEnabled.Equals(input.IsOrderAuditEnabled)
                ) && 
                (
                    this.IsOrderEditionEnabled == input.IsOrderEditionEnabled ||
                    this.IsOrderEditionEnabled.Equals(input.IsOrderEditionEnabled)
                ) && 
                (
                    this.LimitCustomerSearchToCurrentAndChildScopes == input.LimitCustomerSearchToCurrentAndChildScopes ||
                    this.LimitCustomerSearchToCurrentAndChildScopes.Equals(input.LimitCustomerSearchToCurrentAndChildScopes)
                ) && 
                (
                    this.OrderableInventoryStatuses == input.OrderableInventoryStatuses ||
                    (this.OrderableInventoryStatuses != null &&
                    this.OrderableInventoryStatuses.Equals(input.OrderableInventoryStatuses))
                ) && 
                (
                    this.OrderCanceledWorkflow == input.OrderCanceledWorkflow ||
                    (this.OrderCanceledWorkflow != null &&
                    this.OrderCanceledWorkflow.Equals(input.OrderCanceledWorkflow))
                ) && 
                (
                    this.OrderPostProcessingWorkflow == input.OrderPostProcessingWorkflow ||
                    (this.OrderPostProcessingWorkflow != null &&
                    this.OrderPostProcessingWorkflow.Equals(input.OrderPostProcessingWorkflow))
                ) && 
                (
                    this.OrderValueMaximumFilter == input.OrderValueMaximumFilter ||
                    this.OrderValueMaximumFilter.Equals(input.OrderValueMaximumFilter)
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.StorePickerDefaultTab == input.StorePickerDefaultTab ||
                    (this.StorePickerDefaultTab != null &&
                    this.StorePickerDefaultTab.Equals(input.StorePickerDefaultTab))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowManualAdjustmentsOfShipmentTotal.GetHashCode();
                hashCode = hashCode * 59 + this.CartExpirationDays.GetHashCode();
                if (this.DefaultCartCheckoutWorkflow != null)
                    hashCode = hashCode * 59 + this.DefaultCartCheckoutWorkflow.GetHashCode();
                if (this.DefaultCartTotalWorkflow != null)
                    hashCode = hashCode * 59 + this.DefaultCartTotalWorkflow.GetHashCode();
                if (this.DefaultOrderProcessingWorkflow != null)
                    hashCode = hashCode * 59 + this.DefaultOrderProcessingWorkflow.GetHashCode();
                if (this.DefaultOrderTotalWorkflow != null)
                    hashCode = hashCode * 59 + this.DefaultOrderTotalWorkflow.GetHashCode();
                if (this.DefaultSubmitOrderWorkflow != null)
                    hashCode = hashCode * 59 + this.DefaultSubmitOrderWorkflow.GetHashCode();
                hashCode = hashCode * 59 + this.IsFulfillmentProcessingEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.IsInStorePickingAllowed.GetHashCode();
                hashCode = hashCode * 59 + this.IsOrderAuditEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.IsOrderEditionEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.LimitCustomerSearchToCurrentAndChildScopes.GetHashCode();
                if (this.OrderableInventoryStatuses != null)
                    hashCode = hashCode * 59 + this.OrderableInventoryStatuses.GetHashCode();
                if (this.OrderCanceledWorkflow != null)
                    hashCode = hashCode * 59 + this.OrderCanceledWorkflow.GetHashCode();
                if (this.OrderPostProcessingWorkflow != null)
                    hashCode = hashCode * 59 + this.OrderPostProcessingWorkflow.GetHashCode();
                hashCode = hashCode * 59 + this.OrderValueMaximumFilter.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.StorePickerDefaultTab != null)
                    hashCode = hashCode * 59 + this.StorePickerDefaultTab.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
