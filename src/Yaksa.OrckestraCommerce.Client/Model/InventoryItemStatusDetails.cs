/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// InventoryItemStatusDetails
    /// </summary>
    [DataContract(Name = "InventoryItemStatusDetails")]
    public partial class InventoryItemStatusDetails : IEquatable<InventoryItemStatusDetails>, IValidatableObject
    {
        /// <summary>
        /// The current status of the item
        /// </summary>
        /// <value>The current status of the item</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrentStatusEnum
        {
            /// <summary>
            /// Enum InStock for value: InStock
            /// </summary>
            [EnumMember(Value = "InStock")]
            InStock = 1,

            /// <summary>
            /// Enum OutOfStock for value: OutOfStock
            /// </summary>
            [EnumMember(Value = "OutOfStock")]
            OutOfStock = 2,

            /// <summary>
            /// Enum PreOrder for value: PreOrder
            /// </summary>
            [EnumMember(Value = "PreOrder")]
            PreOrder = 3,

            /// <summary>
            /// Enum BackOrder for value: BackOrder
            /// </summary>
            [EnumMember(Value = "BackOrder")]
            BackOrder = 4

        }


        /// <summary>
        /// The current status of the item
        /// </summary>
        /// <value>The current status of the item</value>
        [DataMember(Name = "currentStatus", EmitDefaultValue = false)]
        public CurrentStatusEnum? CurrentStatus { get; set; }
        /// <summary>
        /// The type of the FulfillmentLocation associated to the inventory location
        /// </summary>
        /// <value>The type of the FulfillmentLocation associated to the inventory location</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentLocationTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Store for value: Store
            /// </summary>
            [EnumMember(Value = "Store")]
            Store = 2,

            /// <summary>
            /// Enum Warehouse for value: Warehouse
            /// </summary>
            [EnumMember(Value = "Warehouse")]
            Warehouse = 3

        }


        /// <summary>
        /// The type of the FulfillmentLocation associated to the inventory location
        /// </summary>
        /// <value>The type of the FulfillmentLocation associated to the inventory location</value>
        [DataMember(Name = "fulfillmentLocationType", EmitDefaultValue = false)]
        public FulfillmentLocationTypeEnum? FulfillmentLocationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryItemStatusDetails" /> class.
        /// </summary>
        /// <param name="currentStatus">The current status of the item.</param>
        /// <param name="fulfillmentLocationName">The name of the FulfillmentLocation associated to the inventory location.</param>
        /// <param name="fulfillmentLocationNumber">The identifier of the FulfillmentLocation associated to the inventory location.</param>
        /// <param name="fulfillmentLocationType">The type of the FulfillmentLocation associated to the inventory location.</param>
        /// <param name="inventoryItem">inventoryItem.</param>
        /// <param name="isFulfillmentLocationAtpEnabled">A value indicating whether the inventory availability to promise is enabled for the fulfillment location associated to the inventory location.</param>
        /// <param name="isFulfillmentLocationInventoryEnabled">A value indicating whether the inventory is enabled for the fulfillment location associated to the inventory location.</param>
        /// <param name="scope">The scope associated to the FulfillmentLocation associated to the inventory Location..</param>
        public InventoryItemStatusDetails(CurrentStatusEnum? currentStatus = default(CurrentStatusEnum?), string fulfillmentLocationName = default(string), string fulfillmentLocationNumber = default(string), FulfillmentLocationTypeEnum? fulfillmentLocationType = default(FulfillmentLocationTypeEnum?), InventoryItem inventoryItem = default(InventoryItem), bool isFulfillmentLocationAtpEnabled = default(bool), bool isFulfillmentLocationInventoryEnabled = default(bool), string scope = default(string))
        {
            this.CurrentStatus = currentStatus;
            this.FulfillmentLocationName = fulfillmentLocationName;
            this.FulfillmentLocationNumber = fulfillmentLocationNumber;
            this.FulfillmentLocationType = fulfillmentLocationType;
            this.InventoryItem = inventoryItem;
            this.IsFulfillmentLocationAtpEnabled = isFulfillmentLocationAtpEnabled;
            this.IsFulfillmentLocationInventoryEnabled = isFulfillmentLocationInventoryEnabled;
            this.Scope = scope;
        }

        /// <summary>
        /// The name of the FulfillmentLocation associated to the inventory location
        /// </summary>
        /// <value>The name of the FulfillmentLocation associated to the inventory location</value>
        [DataMember(Name = "fulfillmentLocationName", EmitDefaultValue = false)]
        public string FulfillmentLocationName { get; set; }

        /// <summary>
        /// The identifier of the FulfillmentLocation associated to the inventory location
        /// </summary>
        /// <value>The identifier of the FulfillmentLocation associated to the inventory location</value>
        [DataMember(Name = "fulfillmentLocationNumber", EmitDefaultValue = false)]
        public string FulfillmentLocationNumber { get; set; }

        /// <summary>
        /// Gets or Sets InventoryItem
        /// </summary>
        [DataMember(Name = "inventoryItem", EmitDefaultValue = false)]
        public InventoryItem InventoryItem { get; set; }

        /// <summary>
        /// A value indicating whether the inventory availability to promise is enabled for the fulfillment location associated to the inventory location
        /// </summary>
        /// <value>A value indicating whether the inventory availability to promise is enabled for the fulfillment location associated to the inventory location</value>
        [DataMember(Name = "isFulfillmentLocationAtpEnabled", EmitDefaultValue = true)]
        public bool IsFulfillmentLocationAtpEnabled { get; set; }

        /// <summary>
        /// A value indicating whether the inventory is enabled for the fulfillment location associated to the inventory location
        /// </summary>
        /// <value>A value indicating whether the inventory is enabled for the fulfillment location associated to the inventory location</value>
        [DataMember(Name = "isFulfillmentLocationInventoryEnabled", EmitDefaultValue = true)]
        public bool IsFulfillmentLocationInventoryEnabled { get; set; }

        /// <summary>
        /// The scope associated to the FulfillmentLocation associated to the inventory Location.
        /// </summary>
        /// <value>The scope associated to the FulfillmentLocation associated to the inventory Location.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryItemStatusDetails {\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  FulfillmentLocationName: ").Append(FulfillmentLocationName).Append("\n");
            sb.Append("  FulfillmentLocationNumber: ").Append(FulfillmentLocationNumber).Append("\n");
            sb.Append("  FulfillmentLocationType: ").Append(FulfillmentLocationType).Append("\n");
            sb.Append("  InventoryItem: ").Append(InventoryItem).Append("\n");
            sb.Append("  IsFulfillmentLocationAtpEnabled: ").Append(IsFulfillmentLocationAtpEnabled).Append("\n");
            sb.Append("  IsFulfillmentLocationInventoryEnabled: ").Append(IsFulfillmentLocationInventoryEnabled).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryItemStatusDetails);
        }

        /// <summary>
        /// Returns true if InventoryItemStatusDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryItemStatusDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryItemStatusDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentStatus == input.CurrentStatus ||
                    this.CurrentStatus.Equals(input.CurrentStatus)
                ) && 
                (
                    this.FulfillmentLocationName == input.FulfillmentLocationName ||
                    (this.FulfillmentLocationName != null &&
                    this.FulfillmentLocationName.Equals(input.FulfillmentLocationName))
                ) && 
                (
                    this.FulfillmentLocationNumber == input.FulfillmentLocationNumber ||
                    (this.FulfillmentLocationNumber != null &&
                    this.FulfillmentLocationNumber.Equals(input.FulfillmentLocationNumber))
                ) && 
                (
                    this.FulfillmentLocationType == input.FulfillmentLocationType ||
                    this.FulfillmentLocationType.Equals(input.FulfillmentLocationType)
                ) && 
                (
                    this.InventoryItem == input.InventoryItem ||
                    (this.InventoryItem != null &&
                    this.InventoryItem.Equals(input.InventoryItem))
                ) && 
                (
                    this.IsFulfillmentLocationAtpEnabled == input.IsFulfillmentLocationAtpEnabled ||
                    this.IsFulfillmentLocationAtpEnabled.Equals(input.IsFulfillmentLocationAtpEnabled)
                ) && 
                (
                    this.IsFulfillmentLocationInventoryEnabled == input.IsFulfillmentLocationInventoryEnabled ||
                    this.IsFulfillmentLocationInventoryEnabled.Equals(input.IsFulfillmentLocationInventoryEnabled)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CurrentStatus.GetHashCode();
                if (this.FulfillmentLocationName != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationName.GetHashCode();
                if (this.FulfillmentLocationNumber != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationNumber.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentLocationType.GetHashCode();
                if (this.InventoryItem != null)
                    hashCode = hashCode * 59 + this.InventoryItem.GetHashCode();
                hashCode = hashCode * 59 + this.IsFulfillmentLocationAtpEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.IsFulfillmentLocationInventoryEnabled.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
