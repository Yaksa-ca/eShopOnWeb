/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Categories are entities which represents a classification of products.
    /// </summary>
    [DataContract(Name = "GetCategoryTreeNodesForPathRequest")]
    public partial class GetCategoryTreeNodesForPathRequest : IEquatable<GetCategoryTreeNodesForPathRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCategoryTreeNodesForPathRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCategoryTreeNodesForPathRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCategoryTreeNodesForPathRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The name of the culture to use to process the request. (required).</param>
        /// <param name="endId">The unique identifier of the last node of the path (a category id)..</param>
        /// <param name="scopeId">The ScopeId of the request..</param>
        /// <param name="startId">The unique identifier of the first node of the path (a category id)..</param>
        public GetCategoryTreeNodesForPathRequest(string cultureName = default(string), string endId = default(string), string scopeId = default(string), string startId = default(string))
        {
            // to ensure "cultureName" is required (not null)
            this.CultureName = cultureName ?? throw new ArgumentNullException("cultureName is a required property for GetCategoryTreeNodesForPathRequest and cannot be null");
            this.EndId = endId;
            this.ScopeId = scopeId;
            this.StartId = startId;
        }

        /// <summary>
        /// The name of the culture to use to process the request.
        /// </summary>
        /// <value>The name of the culture to use to process the request.</value>
        [DataMember(Name = "cultureName", IsRequired = true, EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The unique identifier of the last node of the path (a category id).
        /// </summary>
        /// <value>The unique identifier of the last node of the path (a category id).</value>
        [DataMember(Name = "endId", EmitDefaultValue = false)]
        public string EndId { get; set; }

        /// <summary>
        /// The ScopeId of the request.
        /// </summary>
        /// <value>The ScopeId of the request.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The unique identifier of the first node of the path (a category id).
        /// </summary>
        /// <value>The unique identifier of the first node of the path (a category id).</value>
        [DataMember(Name = "startId", EmitDefaultValue = false)]
        public string StartId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCategoryTreeNodesForPathRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  EndId: ").Append(EndId).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  StartId: ").Append(StartId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCategoryTreeNodesForPathRequest);
        }

        /// <summary>
        /// Returns true if GetCategoryTreeNodesForPathRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCategoryTreeNodesForPathRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCategoryTreeNodesForPathRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.EndId == input.EndId ||
                    (this.EndId != null &&
                    this.EndId.Equals(input.EndId))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.StartId == input.StartId ||
                    (this.StartId != null &&
                    this.StartId.Equals(input.StartId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.EndId != null)
                    hashCode = hashCode * 59 + this.EndId.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.StartId != null)
                    hashCode = hashCode * 59 + this.StartId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
