/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "FindPriceListsRequest")]
    public partial class FindPriceListsRequest : IEquatable<FindPriceListsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindPriceListsRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="cultureName">The culture name in which language the data will be returned.</param>
        /// <param name="endDate">Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date..</param>
        /// <param name="includeExpiredEntries">Gets or sets a value indicating whether expired entries should be returned. Default is false..</param>
        /// <param name="startDate">Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date..</param>
        public FindPriceListsRequest(string scopeId = default(string), string cultureName = default(string), DateTime endDate = default(DateTime), bool includeExpiredEntries = default(bool), DateTime startDate = default(DateTime))
        {
            this.ScopeId = scopeId;
            this.CultureName = cultureName;
            this.EndDate = endDate;
            this.IncludeExpiredEntries = includeExpiredEntries;
            this.StartDate = startDate;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The culture name in which language the data will be returned
        /// </summary>
        /// <value>The culture name in which language the data will be returned</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date.
        /// </summary>
        /// <value>Gets or sets the upper bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active before this date.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether expired entries should be returned. Default is false.
        /// </summary>
        /// <value>Gets or sets a value indicating whether expired entries should be returned. Default is false.</value>
        [DataMember(Name = "includeExpiredEntries", EmitDefaultValue = true)]
        public bool IncludeExpiredEntries { get; set; }

        /// <summary>
        /// Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date.
        /// </summary>
        /// <value>Gets or sets the lower bound of dates used to filter returned priceLists (optional). Set this date to filter the results to price lists active after this date.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindPriceListsRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IncludeExpiredEntries: ").Append(IncludeExpiredEntries).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindPriceListsRequest);
        }

        /// <summary>
        /// Returns true if FindPriceListsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindPriceListsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindPriceListsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.IncludeExpiredEntries == input.IncludeExpiredEntries ||
                    this.IncludeExpiredEntries.Equals(input.IncludeExpiredEntries)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeExpiredEntries.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
