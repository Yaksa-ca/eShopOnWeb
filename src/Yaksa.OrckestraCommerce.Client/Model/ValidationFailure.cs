/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ValidationFailure
    /// </summary>
    [DataContract(Name = "ValidationFailure")]
    public partial class ValidationFailure : IEquatable<ValidationFailure>, IValidatableObject
    {
        /// <summary>
        /// The severity level of the failure
        /// </summary>
        /// <value>The severity level of the failure</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum Information for value: Information
            /// </summary>
            [EnumMember(Value = "Information")]
            Information = 1,

            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3,

            /// <summary>
            /// Enum Critical for value: Critical
            /// </summary>
            [EnumMember(Value = "Critical")]
            Critical = 4

        }


        /// <summary>
        /// The severity level of the failure
        /// </summary>
        /// <value>The severity level of the failure</value>
        [DataMember(Name = "severity", EmitDefaultValue = false)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationFailure" /> class.
        /// </summary>
        /// <param name="attemptedValue">Object.</param>
        /// <param name="context">context.</param>
        /// <param name="descriptor">descriptor.</param>
        /// <param name="entityId">The unique entity identifier for which there was an error.</param>
        /// <param name="entityType">The entity type name that was validated.</param>
        /// <param name="fullyQualifiedPropertyName">The complete contextual property name given it&#39;s position in the entity hierarchy. Example: [ContextClass].[ContextCollection][IndexInCollection].[PropertyName].</param>
        /// <param name="propertyName">The name of the property to which the validation failure applied.</param>
        /// <param name="severity">The severity level of the failure.</param>
        public ValidationFailure(Object attemptedValue = default(Object), Dictionary<string, Object> context = default(Dictionary<string, Object>), ValidationFailureDescriptor descriptor = default(ValidationFailureDescriptor), string entityId = default(string), string entityType = default(string), string fullyQualifiedPropertyName = default(string), string propertyName = default(string), SeverityEnum? severity = default(SeverityEnum?))
        {
            this.AttemptedValue = attemptedValue;
            this.Context = context;
            this.Descriptor = descriptor;
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.FullyQualifiedPropertyName = fullyQualifiedPropertyName;
            this.PropertyName = propertyName;
            this.Severity = severity;
        }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "attemptedValue", EmitDefaultValue = false)]
        public Object AttemptedValue { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public Dictionary<string, Object> Context { get; set; }

        /// <summary>
        /// Gets or Sets Descriptor
        /// </summary>
        [DataMember(Name = "descriptor", EmitDefaultValue = false)]
        public ValidationFailureDescriptor Descriptor { get; set; }

        /// <summary>
        /// The unique entity identifier for which there was an error
        /// </summary>
        /// <value>The unique entity identifier for which there was an error</value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The entity type name that was validated
        /// </summary>
        /// <value>The entity type name that was validated</value>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public string EntityType { get; set; }

        /// <summary>
        /// The complete contextual property name given it&#39;s position in the entity hierarchy. Example: [ContextClass].[ContextCollection][IndexInCollection].[PropertyName]
        /// </summary>
        /// <value>The complete contextual property name given it&#39;s position in the entity hierarchy. Example: [ContextClass].[ContextCollection][IndexInCollection].[PropertyName]</value>
        [DataMember(Name = "fullyQualifiedPropertyName", EmitDefaultValue = false)]
        public string FullyQualifiedPropertyName { get; set; }

        /// <summary>
        /// The name of the property to which the validation failure applied
        /// </summary>
        /// <value>The name of the property to which the validation failure applied</value>
        [DataMember(Name = "propertyName", EmitDefaultValue = false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidationFailure {\n");
            sb.Append("  AttemptedValue: ").Append(AttemptedValue).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Descriptor: ").Append(Descriptor).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  FullyQualifiedPropertyName: ").Append(FullyQualifiedPropertyName).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidationFailure);
        }

        /// <summary>
        /// Returns true if ValidationFailure instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidationFailure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidationFailure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttemptedValue == input.AttemptedValue ||
                    (this.AttemptedValue != null &&
                    this.AttemptedValue.Equals(input.AttemptedValue))
                ) && 
                (
                    this.Context == input.Context ||
                    this.Context != null &&
                    input.Context != null &&
                    this.Context.SequenceEqual(input.Context)
                ) && 
                (
                    this.Descriptor == input.Descriptor ||
                    (this.Descriptor != null &&
                    this.Descriptor.Equals(input.Descriptor))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.FullyQualifiedPropertyName == input.FullyQualifiedPropertyName ||
                    (this.FullyQualifiedPropertyName != null &&
                    this.FullyQualifiedPropertyName.Equals(input.FullyQualifiedPropertyName))
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                ) && 
                (
                    this.Severity == input.Severity ||
                    this.Severity.Equals(input.Severity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttemptedValue != null)
                    hashCode = hashCode * 59 + this.AttemptedValue.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.Descriptor != null)
                    hashCode = hashCode * 59 + this.Descriptor.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.FullyQualifiedPropertyName != null)
                    hashCode = hashCode * 59 + this.FullyQualifiedPropertyName.GetHashCode();
                if (this.PropertyName != null)
                    hashCode = hashCode * 59 + this.PropertyName.GetHashCode();
                hashCode = hashCode * 59 + this.Severity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
