/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// The API used to query the search engine.
    /// </summary>
    [DataContract(Name = "SearchProductRequest")]
    public partial class SearchProductRequest : IEquatable<SearchProductRequest>, IValidatableObject
    {
        /// <summary>
        /// the direction used to sort the results.
        /// </summary>
        /// <value>the direction used to sort the results.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortFieldDirectionEnum
        {
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 1,

            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 2

        }


        /// <summary>
        /// the direction used to sort the results.
        /// </summary>
        /// <value>the direction used to sort the results.</value>
        [DataMember(Name = "sortFieldDirection", EmitDefaultValue = false)]
        public SortFieldDirectionEnum? SortFieldDirection { get; set; }
        /// <summary>
        /// The variant grouping strategy
        /// </summary>
        /// <value>The variant grouping strategy</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VariantGroupingStrategyEnum
        {
            /// <summary>
            /// Enum PerConfiguredSearchOption for value: PerConfiguredSearchOption
            /// </summary>
            [EnumMember(Value = "PerConfiguredSearchOption")]
            PerConfiguredSearchOption = 1,

            /// <summary>
            /// Enum PerProduct for value: PerProduct
            /// </summary>
            [EnumMember(Value = "PerProduct")]
            PerProduct = 2,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3

        }


        /// <summary>
        /// The variant grouping strategy
        /// </summary>
        /// <value>The variant grouping strategy</value>
        [DataMember(Name = "variantGroupingStrategy", EmitDefaultValue = false)]
        public VariantGroupingStrategyEnum? VariantGroupingStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchProductRequest" /> class.
        /// </summary>
        /// <param name="configurationName">The name of the configuration to use to process this request.</param>
        /// <param name="activeProductOnly">whether to return active products only. True by default..</param>
        /// <param name="facets">the list of facets that will be included in the results..</param>
        /// <param name="featuredProducts">The document ids of the products that will be elevated.</param>
        /// <param name="keywords">the search terms to use in the query..</param>
        /// <param name="maximumItems">the maximum number of items returned by the search query..</param>
        /// <param name="properties">the collection of properties, represented as string, to return in the search results..</param>
        /// <param name="searchFilters">the collection of SearchFilters..</param>
        /// <param name="searchRanges">the collection of SearchRange..</param>
        /// <param name="sortFieldDirection">the direction used to sort the results..</param>
        /// <param name="sortFieldName">the name of the field used to order the results..</param>
        /// <param name="startingIndex">the index of the first record in the list (used for paging purpose)..</param>
        /// <param name="variantGroupingStrategy">The variant grouping strategy.</param>
        public SearchProductRequest(string configurationName = default(string), bool activeProductOnly = default(bool), List<string> facets = default(List<string>), List<string> featuredProducts = default(List<string>), string keywords = default(string), int maximumItems = default(int), List<string> properties = default(List<string>), List<SearchFilter> searchFilters = default(List<SearchFilter>), List<SearchRange> searchRanges = default(List<SearchRange>), SortFieldDirectionEnum? sortFieldDirection = default(SortFieldDirectionEnum?), string sortFieldName = default(string), int startingIndex = default(int), VariantGroupingStrategyEnum? variantGroupingStrategy = default(VariantGroupingStrategyEnum?))
        {
            this.ConfigurationName = configurationName;
            this.ActiveProductOnly = activeProductOnly;
            this.Facets = facets;
            this.FeaturedProducts = featuredProducts;
            this.Keywords = keywords;
            this.MaximumItems = maximumItems;
            this.Properties = properties;
            this.SearchFilters = searchFilters;
            this.SearchRanges = searchRanges;
            this.SortFieldDirection = sortFieldDirection;
            this.SortFieldName = sortFieldName;
            this.StartingIndex = startingIndex;
            this.VariantGroupingStrategy = variantGroupingStrategy;
        }

        /// <summary>
        /// The name of the configuration to use to process this request
        /// </summary>
        /// <value>The name of the configuration to use to process this request</value>
        [DataMember(Name = "configurationName", EmitDefaultValue = false)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// whether to return active products only. True by default.
        /// </summary>
        /// <value>whether to return active products only. True by default.</value>
        [DataMember(Name = "activeProductOnly", EmitDefaultValue = true)]
        public bool ActiveProductOnly { get; set; }

        /// <summary>
        /// the list of facets that will be included in the results.
        /// </summary>
        /// <value>the list of facets that will be included in the results.</value>
        [DataMember(Name = "facets", EmitDefaultValue = false)]
        public List<string> Facets { get; set; }

        /// <summary>
        /// The document ids of the products that will be elevated
        /// </summary>
        /// <value>The document ids of the products that will be elevated</value>
        [DataMember(Name = "featuredProducts", EmitDefaultValue = false)]
        public List<string> FeaturedProducts { get; set; }

        /// <summary>
        /// the search terms to use in the query.
        /// </summary>
        /// <value>the search terms to use in the query.</value>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public string Keywords { get; set; }

        /// <summary>
        /// the maximum number of items returned by the search query.
        /// </summary>
        /// <value>the maximum number of items returned by the search query.</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// the collection of properties, represented as string, to return in the search results.
        /// </summary>
        /// <value>the collection of properties, represented as string, to return in the search results.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<string> Properties { get; set; }

        /// <summary>
        /// the collection of SearchFilters.
        /// </summary>
        /// <value>the collection of SearchFilters.</value>
        [DataMember(Name = "searchFilters", EmitDefaultValue = false)]
        public List<SearchFilter> SearchFilters { get; set; }

        /// <summary>
        /// the collection of SearchRange.
        /// </summary>
        /// <value>the collection of SearchRange.</value>
        [DataMember(Name = "searchRanges", EmitDefaultValue = false)]
        public List<SearchRange> SearchRanges { get; set; }

        /// <summary>
        /// the name of the field used to order the results.
        /// </summary>
        /// <value>the name of the field used to order the results.</value>
        [DataMember(Name = "sortFieldName", EmitDefaultValue = false)]
        public string SortFieldName { get; set; }

        /// <summary>
        /// the index of the first record in the list (used for paging purpose).
        /// </summary>
        /// <value>the index of the first record in the list (used for paging purpose).</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchProductRequest {\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  ActiveProductOnly: ").Append(ActiveProductOnly).Append("\n");
            sb.Append("  Facets: ").Append(Facets).Append("\n");
            sb.Append("  FeaturedProducts: ").Append(FeaturedProducts).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  SearchFilters: ").Append(SearchFilters).Append("\n");
            sb.Append("  SearchRanges: ").Append(SearchRanges).Append("\n");
            sb.Append("  SortFieldDirection: ").Append(SortFieldDirection).Append("\n");
            sb.Append("  SortFieldName: ").Append(SortFieldName).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("  VariantGroupingStrategy: ").Append(VariantGroupingStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchProductRequest);
        }

        /// <summary>
        /// Returns true if SearchProductRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchProductRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchProductRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.ActiveProductOnly == input.ActiveProductOnly ||
                    this.ActiveProductOnly.Equals(input.ActiveProductOnly)
                ) && 
                (
                    this.Facets == input.Facets ||
                    this.Facets != null &&
                    input.Facets != null &&
                    this.Facets.SequenceEqual(input.Facets)
                ) && 
                (
                    this.FeaturedProducts == input.FeaturedProducts ||
                    this.FeaturedProducts != null &&
                    input.FeaturedProducts != null &&
                    this.FeaturedProducts.SequenceEqual(input.FeaturedProducts)
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.SearchFilters == input.SearchFilters ||
                    this.SearchFilters != null &&
                    input.SearchFilters != null &&
                    this.SearchFilters.SequenceEqual(input.SearchFilters)
                ) && 
                (
                    this.SearchRanges == input.SearchRanges ||
                    this.SearchRanges != null &&
                    input.SearchRanges != null &&
                    this.SearchRanges.SequenceEqual(input.SearchRanges)
                ) && 
                (
                    this.SortFieldDirection == input.SortFieldDirection ||
                    this.SortFieldDirection.Equals(input.SortFieldDirection)
                ) && 
                (
                    this.SortFieldName == input.SortFieldName ||
                    (this.SortFieldName != null &&
                    this.SortFieldName.Equals(input.SortFieldName))
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                ) && 
                (
                    this.VariantGroupingStrategy == input.VariantGroupingStrategy ||
                    this.VariantGroupingStrategy.Equals(input.VariantGroupingStrategy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigurationName != null)
                    hashCode = hashCode * 59 + this.ConfigurationName.GetHashCode();
                hashCode = hashCode * 59 + this.ActiveProductOnly.GetHashCode();
                if (this.Facets != null)
                    hashCode = hashCode * 59 + this.Facets.GetHashCode();
                if (this.FeaturedProducts != null)
                    hashCode = hashCode * 59 + this.FeaturedProducts.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.SearchFilters != null)
                    hashCode = hashCode * 59 + this.SearchFilters.GetHashCode();
                if (this.SearchRanges != null)
                    hashCode = hashCode * 59 + this.SearchRanges.GetHashCode();
                hashCode = hashCode * 59 + this.SortFieldDirection.GetHashCode();
                if (this.SortFieldName != null)
                    hashCode = hashCode * 59 + this.SortFieldName.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                hashCode = hashCode * 59 + this.VariantGroupingStrategy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
