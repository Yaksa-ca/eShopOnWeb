/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// QuoteTime
    /// </summary>
    [DataContract(Name = "QuoteTime")]
    public partial class QuoteTime : IEquatable<QuoteTime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteTime" /> class.
        /// </summary>
        /// <param name="couldBeDelayed">a value indicating whether the quotes could be delayed..</param>
        /// <param name="delayEstimatedDuration">delayEstimatedDuration.</param>
        /// <param name="delayReason">the delay reason..</param>
        /// <param name="duration">duration.</param>
        public QuoteTime(bool couldBeDelayed = default(bool), Duration delayEstimatedDuration = default(Duration), string delayReason = default(string), Duration duration = default(Duration))
        {
            this.CouldBeDelayed = couldBeDelayed;
            this.DelayEstimatedDuration = delayEstimatedDuration;
            this.DelayReason = delayReason;
            this.Duration = duration;
        }

        /// <summary>
        /// a value indicating whether the quotes could be delayed.
        /// </summary>
        /// <value>a value indicating whether the quotes could be delayed.</value>
        [DataMember(Name = "couldBeDelayed", EmitDefaultValue = true)]
        public bool CouldBeDelayed { get; set; }

        /// <summary>
        /// Gets or Sets DelayEstimatedDuration
        /// </summary>
        [DataMember(Name = "delayEstimatedDuration", EmitDefaultValue = false)]
        public Duration DelayEstimatedDuration { get; set; }

        /// <summary>
        /// the delay reason.
        /// </summary>
        /// <value>the delay reason.</value>
        [DataMember(Name = "delayReason", EmitDefaultValue = false)]
        public string DelayReason { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public Duration Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteTime {\n");
            sb.Append("  CouldBeDelayed: ").Append(CouldBeDelayed).Append("\n");
            sb.Append("  DelayEstimatedDuration: ").Append(DelayEstimatedDuration).Append("\n");
            sb.Append("  DelayReason: ").Append(DelayReason).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteTime);
        }

        /// <summary>
        /// Returns true if QuoteTime instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteTime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteTime input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CouldBeDelayed == input.CouldBeDelayed ||
                    this.CouldBeDelayed.Equals(input.CouldBeDelayed)
                ) && 
                (
                    this.DelayEstimatedDuration == input.DelayEstimatedDuration ||
                    (this.DelayEstimatedDuration != null &&
                    this.DelayEstimatedDuration.Equals(input.DelayEstimatedDuration))
                ) && 
                (
                    this.DelayReason == input.DelayReason ||
                    (this.DelayReason != null &&
                    this.DelayReason.Equals(input.DelayReason))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CouldBeDelayed.GetHashCode();
                if (this.DelayEstimatedDuration != null)
                    hashCode = hashCode * 59 + this.DelayEstimatedDuration.GetHashCode();
                if (this.DelayReason != null)
                    hashCode = hashCode * 59 + this.DelayReason.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
