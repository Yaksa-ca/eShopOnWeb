/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Warehouse
    /// </summary>
    [DataContract(Name = "Warehouse")]
    public partial class Warehouse : IEquatable<Warehouse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Warehouse" /> class.
        /// </summary>
        /// <param name="associatedScopes">The warehouse&#39;s associated scopes..</param>
        /// <param name="created">the date the Warehouse was created..</param>
        /// <param name="createdBy">the identifier of the user who created the Warehouse..</param>
        /// <param name="deliverySchedule">deliverySchedule.</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="email">the email of the warehouse. This could be a specific person&#39;s address or a general customerService address depending on the warehouse..</param>
        /// <param name="faxExtension">the extension for the fax number of the warehouse..</param>
        /// <param name="faxNumber">the fax number of the warehouse..</param>
        /// <param name="fulfillmentLocation">fulfillmentLocation.</param>
        /// <param name="id">the unique identifier of the Warehouse..</param>
        /// <param name="isActive">Is this warehouse currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the warehouse to be hidden from many business processes until re-activated. .</param>
        /// <param name="lastModified">The date of the last modification to the Warehouse..</param>
        /// <param name="lastModifiedBy">the identifier of the user who last modified the Warehouse..</param>
        /// <param name="manager">the full name of the manager of the warehouse..</param>
        /// <param name="name">the name of the warehouse. Each warehouse must have a name that unique in the system..</param>
        /// <param name="number">a business centric number to identify the warehouse that could be used to link the warehouse to external data..</param>
        /// <param name="operatingStatus">operatingStatus.</param>
        /// <param name="phoneExtension">the extension for the telephone number of the warehouse..</param>
        /// <param name="phoneNumber">the telephone number of the warehouse..</param>
        /// <param name="pickUpSchedule">pickUpSchedule.</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="warehouseSchedule">warehouseSchedule.</param>
        public Warehouse(List<string> associatedScopes = default(List<string>), DateTime created = default(DateTime), string createdBy = default(string), FulfillmentSchedule deliverySchedule = default(FulfillmentSchedule), Dictionary<string, string> description = default(Dictionary<string, string>), Dictionary<string, string> displayName = default(Dictionary<string, string>), string email = default(string), string faxExtension = default(string), string faxNumber = default(string), FulfillmentLocation fulfillmentLocation = default(FulfillmentLocation), string id = default(string), bool isActive = default(bool), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), string manager = default(string), string name = default(string), string number = default(string), OperatingStatus operatingStatus = default(OperatingStatus), string phoneExtension = default(string), string phoneNumber = default(string), FulfillmentSchedule pickUpSchedule = default(FulfillmentSchedule), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), FulfillmentSchedule warehouseSchedule = default(FulfillmentSchedule))
        {
            this.AssociatedScopes = associatedScopes;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.DeliverySchedule = deliverySchedule;
            this.Description = description;
            this.DisplayName = displayName;
            this.Email = email;
            this.FaxExtension = faxExtension;
            this.FaxNumber = faxNumber;
            this.FulfillmentLocation = fulfillmentLocation;
            this.Id = id;
            this.IsActive = isActive;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.Manager = manager;
            this.Name = name;
            this.Number = number;
            this.OperatingStatus = operatingStatus;
            this.PhoneExtension = phoneExtension;
            this.PhoneNumber = phoneNumber;
            this.PickUpSchedule = pickUpSchedule;
            this.PropertyBag = propertyBag;
            this.WarehouseSchedule = warehouseSchedule;
        }

        /// <summary>
        /// The warehouse&#39;s associated scopes.
        /// </summary>
        /// <value>The warehouse&#39;s associated scopes.</value>
        [DataMember(Name = "associatedScopes", EmitDefaultValue = false)]
        public List<string> AssociatedScopes { get; set; }

        /// <summary>
        /// the date the Warehouse was created.
        /// </summary>
        /// <value>the date the Warehouse was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the identifier of the user who created the Warehouse.
        /// </summary>
        /// <value>the identifier of the user who created the Warehouse.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets DeliverySchedule
        /// </summary>
        [DataMember(Name = "deliverySchedule", EmitDefaultValue = false)]
        public FulfillmentSchedule DeliverySchedule { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// the email of the warehouse. This could be a specific person&#39;s address or a general customerService address depending on the warehouse.
        /// </summary>
        /// <value>the email of the warehouse. This could be a specific person&#39;s address or a general customerService address depending on the warehouse.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// the extension for the fax number of the warehouse.
        /// </summary>
        /// <value>the extension for the fax number of the warehouse.</value>
        [DataMember(Name = "faxExtension", EmitDefaultValue = false)]
        public string FaxExtension { get; set; }

        /// <summary>
        /// the fax number of the warehouse.
        /// </summary>
        /// <value>the fax number of the warehouse.</value>
        [DataMember(Name = "faxNumber", EmitDefaultValue = false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentLocation
        /// </summary>
        [DataMember(Name = "fulfillmentLocation", EmitDefaultValue = false)]
        public FulfillmentLocation FulfillmentLocation { get; set; }

        /// <summary>
        /// the unique identifier of the Warehouse.
        /// </summary>
        /// <value>the unique identifier of the Warehouse.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Is this warehouse currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the warehouse to be hidden from many business processes until re-activated. 
        /// </summary>
        /// <value>Is this warehouse currently active. Set this flag to false as an alternative to deleting it and then recreating it a a later date. This allows the warehouse to be hidden from many business processes until re-activated. </value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The date of the last modification to the Warehouse.
        /// </summary>
        /// <value>The date of the last modification to the Warehouse.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// the identifier of the user who last modified the Warehouse.
        /// </summary>
        /// <value>the identifier of the user who last modified the Warehouse.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// the full name of the manager of the warehouse.
        /// </summary>
        /// <value>the full name of the manager of the warehouse.</value>
        [DataMember(Name = "manager", EmitDefaultValue = false)]
        public string Manager { get; set; }

        /// <summary>
        /// the name of the warehouse. Each warehouse must have a name that unique in the system.
        /// </summary>
        /// <value>the name of the warehouse. Each warehouse must have a name that unique in the system.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// a business centric number to identify the warehouse that could be used to link the warehouse to external data.
        /// </summary>
        /// <value>a business centric number to identify the warehouse that could be used to link the warehouse to external data.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets OperatingStatus
        /// </summary>
        [DataMember(Name = "operatingStatus", EmitDefaultValue = false)]
        public OperatingStatus OperatingStatus { get; set; }

        /// <summary>
        /// the extension for the telephone number of the warehouse.
        /// </summary>
        /// <value>the extension for the telephone number of the warehouse.</value>
        [DataMember(Name = "phoneExtension", EmitDefaultValue = false)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// the telephone number of the warehouse.
        /// </summary>
        /// <value>the telephone number of the warehouse.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets PickUpSchedule
        /// </summary>
        [DataMember(Name = "pickUpSchedule", EmitDefaultValue = false)]
        public FulfillmentSchedule PickUpSchedule { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseSchedule
        /// </summary>
        [DataMember(Name = "warehouseSchedule", EmitDefaultValue = false)]
        public FulfillmentSchedule WarehouseSchedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Warehouse {\n");
            sb.Append("  AssociatedScopes: ").Append(AssociatedScopes).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  DeliverySchedule: ").Append(DeliverySchedule).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FaxExtension: ").Append(FaxExtension).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  FulfillmentLocation: ").Append(FulfillmentLocation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OperatingStatus: ").Append(OperatingStatus).Append("\n");
            sb.Append("  PhoneExtension: ").Append(PhoneExtension).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PickUpSchedule: ").Append(PickUpSchedule).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  WarehouseSchedule: ").Append(WarehouseSchedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Warehouse);
        }

        /// <summary>
        /// Returns true if Warehouse instances are equal
        /// </summary>
        /// <param name="input">Instance of Warehouse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Warehouse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssociatedScopes == input.AssociatedScopes ||
                    this.AssociatedScopes != null &&
                    input.AssociatedScopes != null &&
                    this.AssociatedScopes.SequenceEqual(input.AssociatedScopes)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.DeliverySchedule == input.DeliverySchedule ||
                    (this.DeliverySchedule != null &&
                    this.DeliverySchedule.Equals(input.DeliverySchedule))
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FaxExtension == input.FaxExtension ||
                    (this.FaxExtension != null &&
                    this.FaxExtension.Equals(input.FaxExtension))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.FulfillmentLocation == input.FulfillmentLocation ||
                    (this.FulfillmentLocation != null &&
                    this.FulfillmentLocation.Equals(input.FulfillmentLocation))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.Manager == input.Manager ||
                    (this.Manager != null &&
                    this.Manager.Equals(input.Manager))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.OperatingStatus == input.OperatingStatus ||
                    (this.OperatingStatus != null &&
                    this.OperatingStatus.Equals(input.OperatingStatus))
                ) && 
                (
                    this.PhoneExtension == input.PhoneExtension ||
                    (this.PhoneExtension != null &&
                    this.PhoneExtension.Equals(input.PhoneExtension))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PickUpSchedule == input.PickUpSchedule ||
                    (this.PickUpSchedule != null &&
                    this.PickUpSchedule.Equals(input.PickUpSchedule))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.WarehouseSchedule == input.WarehouseSchedule ||
                    (this.WarehouseSchedule != null &&
                    this.WarehouseSchedule.Equals(input.WarehouseSchedule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssociatedScopes != null)
                    hashCode = hashCode * 59 + this.AssociatedScopes.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.DeliverySchedule != null)
                    hashCode = hashCode * 59 + this.DeliverySchedule.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FaxExtension != null)
                    hashCode = hashCode * 59 + this.FaxExtension.GetHashCode();
                if (this.FaxNumber != null)
                    hashCode = hashCode * 59 + this.FaxNumber.GetHashCode();
                if (this.FulfillmentLocation != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocation.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.Manager != null)
                    hashCode = hashCode * 59 + this.Manager.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.OperatingStatus != null)
                    hashCode = hashCode * 59 + this.OperatingStatus.GetHashCode();
                if (this.PhoneExtension != null)
                    hashCode = hashCode * 59 + this.PhoneExtension.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.PickUpSchedule != null)
                    hashCode = hashCode * 59 + this.PickUpSchedule.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.WarehouseSchedule != null)
                    hashCode = hashCode * 59 + this.WarehouseSchedule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
