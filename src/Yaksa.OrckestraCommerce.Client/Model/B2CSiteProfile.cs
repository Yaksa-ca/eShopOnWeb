/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// B2CSiteProfile
    /// </summary>
    [DataContract(Name = "B2CSiteProfile")]
    public partial class B2CSiteProfile : IEquatable<B2CSiteProfile>, IValidatableObject
    {
        /// <summary>
        /// The way the account was created on the B2C site
        /// </summary>
        /// <value>The way the account was created on the B2C site</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum B2CAccountCreationTypeEnum
        {
            /// <summary>
            /// Enum Invite for value: Invite
            /// </summary>
            [EnumMember(Value = "Invite")]
            Invite = 1,

            /// <summary>
            /// Enum SelfService for value: SelfService
            /// </summary>
            [EnumMember(Value = "SelfService")]
            SelfService = 2

        }


        /// <summary>
        /// The way the account was created on the B2C site
        /// </summary>
        /// <value>The way the account was created on the B2C site</value>
        [DataMember(Name = "b2CAccountCreationType", EmitDefaultValue = false)]
        public B2CAccountCreationTypeEnum? B2CAccountCreationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="B2CSiteProfile" /> class.
        /// </summary>
        /// <param name="id">The Id of this custom profile&#39;s instance.</param>
        /// <param name="customerId">The Id of the customer this B2C site profile belongs to.</param>
        /// <param name="b2CAccountCreationType">The way the account was created on the B2C site.</param>
        /// <param name="approvedBy">The email of the B2C admin customer who approved this customer account.</param>
        /// <param name="approvedOn">The date when the customer account was approved.</param>
        public B2CSiteProfile(string id = default(string), string customerId = default(string), B2CAccountCreationTypeEnum? b2CAccountCreationType = default(B2CAccountCreationTypeEnum?), string approvedBy = default(string), DateTime approvedOn = default(DateTime))
        {
            this.Id = id;
            this.CustomerId = customerId;
            this.B2CAccountCreationType = b2CAccountCreationType;
            this.ApprovedBy = approvedBy;
            this.ApprovedOn = approvedOn;
        }

        /// <summary>
        /// The Id of this custom profile&#39;s instance
        /// </summary>
        /// <value>The Id of this custom profile&#39;s instance</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The Id of the customer this B2C site profile belongs to
        /// </summary>
        /// <value>The Id of the customer this B2C site profile belongs to</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The email of the B2C admin customer who approved this customer account
        /// </summary>
        /// <value>The email of the B2C admin customer who approved this customer account</value>
        [DataMember(Name = "approvedBy", EmitDefaultValue = false)]
        public string ApprovedBy { get; set; }

        /// <summary>
        /// The date when the customer account was approved
        /// </summary>
        /// <value>The date when the customer account was approved</value>
        [DataMember(Name = "approvedOn", EmitDefaultValue = false)]
        public DateTime ApprovedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class B2CSiteProfile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  B2CAccountCreationType: ").Append(B2CAccountCreationType).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  ApprovedOn: ").Append(ApprovedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as B2CSiteProfile);
        }

        /// <summary>
        /// Returns true if B2CSiteProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of B2CSiteProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(B2CSiteProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.B2CAccountCreationType == input.B2CAccountCreationType ||
                    this.B2CAccountCreationType.Equals(input.B2CAccountCreationType)
                ) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    (this.ApprovedBy != null &&
                    this.ApprovedBy.Equals(input.ApprovedBy))
                ) && 
                (
                    this.ApprovedOn == input.ApprovedOn ||
                    (this.ApprovedOn != null &&
                    this.ApprovedOn.Equals(input.ApprovedOn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                hashCode = hashCode * 59 + this.B2CAccountCreationType.GetHashCode();
                if (this.ApprovedBy != null)
                    hashCode = hashCode * 59 + this.ApprovedBy.GetHashCode();
                if (this.ApprovedOn != null)
                    hashCode = hashCode * 59 + this.ApprovedOn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
