/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// TaskInfo
    /// </summary>
    [DataContract(Name = "TaskInfo")]
    public partial class TaskInfo : IEquatable<TaskInfo>, IValidatableObject
    {
        /// <summary>
        /// The task current status
        /// </summary>
        /// <value>The task current status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Created for value: Created
            /// </summary>
            [EnumMember(Value = "Created")]
            Created = 1,

            /// <summary>
            /// Enum WaitingToRun for value: WaitingToRun
            /// </summary>
            [EnumMember(Value = "WaitingToRun")]
            WaitingToRun = 2,

            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 3,

            /// <summary>
            /// Enum RanToCompletion for value: RanToCompletion
            /// </summary>
            [EnumMember(Value = "RanToCompletion")]
            RanToCompletion = 4,

            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 5,

            /// <summary>
            /// Enum Faulted for value: Faulted
            /// </summary>
            [EnumMember(Value = "Faulted")]
            Faulted = 6,

            /// <summary>
            /// Enum Idle for value: Idle
            /// </summary>
            [EnumMember(Value = "Idle")]
            Idle = 7,

            /// <summary>
            /// Enum WaitingToCancel for value: WaitingToCancel
            /// </summary>
            [EnumMember(Value = "WaitingToCancel")]
            WaitingToCancel = 8,

            /// <summary>
            /// Enum Ignored for value: Ignored
            /// </summary>
            [EnumMember(Value = "Ignored")]
            Ignored = 9,

            /// <summary>
            /// Enum QueuedForSequence for value: QueuedForSequence
            /// </summary>
            [EnumMember(Value = "QueuedForSequence")]
            QueuedForSequence = 10,

            /// <summary>
            /// Enum IdleAfterErrorRecovery for value: IdleAfterErrorRecovery
            /// </summary>
            [EnumMember(Value = "IdleAfterErrorRecovery")]
            IdleAfterErrorRecovery = 11,

            /// <summary>
            /// Enum WaitingToRetry for value: WaitingToRetry
            /// </summary>
            [EnumMember(Value = "WaitingToRetry")]
            WaitingToRetry = 12,

            /// <summary>
            /// Enum IdleAfterFault for value: IdleAfterFault
            /// </summary>
            [EnumMember(Value = "IdleAfterFault")]
            IdleAfterFault = 13

        }


        /// <summary>
        /// The task current status
        /// </summary>
        /// <value>The task current status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskInfo" /> class.
        /// </summary>
        /// <param name="correlationId">The correlation id..</param>
        /// <param name="created">The date at which the task was created.</param>
        /// <param name="faultedReason">The reason why the task faulted, if relevant..</param>
        /// <param name="inputArguments">inputArguments.</param>
        /// <param name="isSequential">Value indicating whether a task must be run as part of the specific sequence that the tasks were queued rather than being run at the same time..</param>
        /// <param name="lastModified">The date at which the task was modified.</param>
        /// <param name="logEntriesCount">The number of log entries..</param>
        /// <param name="name">The task name.</param>
        /// <param name="outputArguments">outputArguments.</param>
        /// <param name="requester">The user who requested the task.</param>
        /// <param name="resultBlobUrl">The url to a a resource containing the result of the task execution.</param>
        /// <param name="retryCount">Gets or sets the number of retries to execute the task or resuming a bookmark..</param>
        /// <param name="sequenceGroup">The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup.</param>
        /// <param name="sequenceNumber">The number of the task in the sequence it is part of..</param>
        /// <param name="sequenceQuota">Value indicating what is the expected maximum sequence count..</param>
        /// <param name="status">The task current status.</param>
        /// <param name="taskId">The unique Id for the task.</param>
        /// <param name="type">The type of the current task.</param>
        /// <param name="workflowActivityType">Gets or sets the type of the workflow activity..</param>
        /// <param name="workflowXamlPath">Gets or sets the relative workflow xaml path..</param>
        public TaskInfo(string correlationId = default(string), DateTime created = default(DateTime), string faultedReason = default(string), Dictionary<string, Object> inputArguments = default(Dictionary<string, Object>), bool isSequential = default(bool), DateTime lastModified = default(DateTime), int logEntriesCount = default(int), string name = default(string), Dictionary<string, Object> outputArguments = default(Dictionary<string, Object>), string requester = default(string), string resultBlobUrl = default(string), int retryCount = default(int), string sequenceGroup = default(string), long sequenceNumber = default(long), int sequenceQuota = default(int), StatusEnum? status = default(StatusEnum?), string taskId = default(string), string type = default(string), string workflowActivityType = default(string), string workflowXamlPath = default(string))
        {
            this.CorrelationId = correlationId;
            this.Created = created;
            this.FaultedReason = faultedReason;
            this.InputArguments = inputArguments;
            this.IsSequential = isSequential;
            this.LastModified = lastModified;
            this.LogEntriesCount = logEntriesCount;
            this.Name = name;
            this.OutputArguments = outputArguments;
            this.Requester = requester;
            this.ResultBlobUrl = resultBlobUrl;
            this.RetryCount = retryCount;
            this.SequenceGroup = sequenceGroup;
            this.SequenceNumber = sequenceNumber;
            this.SequenceQuota = sequenceQuota;
            this.Status = status;
            this.TaskId = taskId;
            this.Type = type;
            this.WorkflowActivityType = workflowActivityType;
            this.WorkflowXamlPath = workflowXamlPath;
        }

        /// <summary>
        /// The correlation id.
        /// </summary>
        /// <value>The correlation id.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// The date at which the task was created
        /// </summary>
        /// <value>The date at which the task was created</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The reason why the task faulted, if relevant.
        /// </summary>
        /// <value>The reason why the task faulted, if relevant.</value>
        [DataMember(Name = "faultedReason", EmitDefaultValue = false)]
        public string FaultedReason { get; set; }

        /// <summary>
        /// Gets or Sets InputArguments
        /// </summary>
        [DataMember(Name = "inputArguments", EmitDefaultValue = false)]
        public Dictionary<string, Object> InputArguments { get; set; }

        /// <summary>
        /// Value indicating whether a task must be run as part of the specific sequence that the tasks were queued rather than being run at the same time.
        /// </summary>
        /// <value>Value indicating whether a task must be run as part of the specific sequence that the tasks were queued rather than being run at the same time.</value>
        [DataMember(Name = "isSequential", EmitDefaultValue = true)]
        public bool IsSequential { get; set; }

        /// <summary>
        /// The date at which the task was modified
        /// </summary>
        /// <value>The date at which the task was modified</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The number of log entries.
        /// </summary>
        /// <value>The number of log entries.</value>
        [DataMember(Name = "logEntriesCount", EmitDefaultValue = false)]
        public int LogEntriesCount { get; set; }

        /// <summary>
        /// The task name
        /// </summary>
        /// <value>The task name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OutputArguments
        /// </summary>
        [DataMember(Name = "outputArguments", EmitDefaultValue = false)]
        public Dictionary<string, Object> OutputArguments { get; set; }

        /// <summary>
        /// The user who requested the task
        /// </summary>
        /// <value>The user who requested the task</value>
        [DataMember(Name = "requester", EmitDefaultValue = false)]
        public string Requester { get; set; }

        /// <summary>
        /// The url to a a resource containing the result of the task execution
        /// </summary>
        /// <value>The url to a a resource containing the result of the task execution</value>
        [DataMember(Name = "resultBlobUrl", EmitDefaultValue = false)]
        public string ResultBlobUrl { get; set; }

        /// <summary>
        /// Gets or sets the number of retries to execute the task or resuming a bookmark.
        /// </summary>
        /// <value>Gets or sets the number of retries to execute the task or resuming a bookmark.</value>
        [DataMember(Name = "retryCount", EmitDefaultValue = false)]
        public int RetryCount { get; set; }

        /// <summary>
        /// The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup
        /// </summary>
        /// <value>The name to identify the sequence that this task is part of. Tasks that must execute in sequence must share the same SequenceGroup</value>
        [DataMember(Name = "sequenceGroup", EmitDefaultValue = false)]
        public string SequenceGroup { get; set; }

        /// <summary>
        /// The number of the task in the sequence it is part of.
        /// </summary>
        /// <value>The number of the task in the sequence it is part of.</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public long SequenceNumber { get; set; }

        /// <summary>
        /// Value indicating what is the expected maximum sequence count.
        /// </summary>
        /// <value>Value indicating what is the expected maximum sequence count.</value>
        [DataMember(Name = "sequenceQuota", EmitDefaultValue = false)]
        public int SequenceQuota { get; set; }

        /// <summary>
        /// The unique Id for the task
        /// </summary>
        /// <value>The unique Id for the task</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// The type of the current task
        /// </summary>
        /// <value>The type of the current task</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the type of the workflow activity.
        /// </summary>
        /// <value>Gets or sets the type of the workflow activity.</value>
        [DataMember(Name = "workflowActivityType", EmitDefaultValue = false)]
        public string WorkflowActivityType { get; set; }

        /// <summary>
        /// Gets or sets the relative workflow xaml path.
        /// </summary>
        /// <value>Gets or sets the relative workflow xaml path.</value>
        [DataMember(Name = "workflowXamlPath", EmitDefaultValue = false)]
        public string WorkflowXamlPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskInfo {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  FaultedReason: ").Append(FaultedReason).Append("\n");
            sb.Append("  InputArguments: ").Append(InputArguments).Append("\n");
            sb.Append("  IsSequential: ").Append(IsSequential).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LogEntriesCount: ").Append(LogEntriesCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OutputArguments: ").Append(OutputArguments).Append("\n");
            sb.Append("  Requester: ").Append(Requester).Append("\n");
            sb.Append("  ResultBlobUrl: ").Append(ResultBlobUrl).Append("\n");
            sb.Append("  RetryCount: ").Append(RetryCount).Append("\n");
            sb.Append("  SequenceGroup: ").Append(SequenceGroup).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  SequenceQuota: ").Append(SequenceQuota).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WorkflowActivityType: ").Append(WorkflowActivityType).Append("\n");
            sb.Append("  WorkflowXamlPath: ").Append(WorkflowXamlPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskInfo);
        }

        /// <summary>
        /// Returns true if TaskInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.FaultedReason == input.FaultedReason ||
                    (this.FaultedReason != null &&
                    this.FaultedReason.Equals(input.FaultedReason))
                ) && 
                (
                    this.InputArguments == input.InputArguments ||
                    this.InputArguments != null &&
                    input.InputArguments != null &&
                    this.InputArguments.SequenceEqual(input.InputArguments)
                ) && 
                (
                    this.IsSequential == input.IsSequential ||
                    this.IsSequential.Equals(input.IsSequential)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LogEntriesCount == input.LogEntriesCount ||
                    this.LogEntriesCount.Equals(input.LogEntriesCount)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OutputArguments == input.OutputArguments ||
                    this.OutputArguments != null &&
                    input.OutputArguments != null &&
                    this.OutputArguments.SequenceEqual(input.OutputArguments)
                ) && 
                (
                    this.Requester == input.Requester ||
                    (this.Requester != null &&
                    this.Requester.Equals(input.Requester))
                ) && 
                (
                    this.ResultBlobUrl == input.ResultBlobUrl ||
                    (this.ResultBlobUrl != null &&
                    this.ResultBlobUrl.Equals(input.ResultBlobUrl))
                ) && 
                (
                    this.RetryCount == input.RetryCount ||
                    this.RetryCount.Equals(input.RetryCount)
                ) && 
                (
                    this.SequenceGroup == input.SequenceGroup ||
                    (this.SequenceGroup != null &&
                    this.SequenceGroup.Equals(input.SequenceGroup))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.SequenceQuota == input.SequenceQuota ||
                    this.SequenceQuota.Equals(input.SequenceQuota)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.WorkflowActivityType == input.WorkflowActivityType ||
                    (this.WorkflowActivityType != null &&
                    this.WorkflowActivityType.Equals(input.WorkflowActivityType))
                ) && 
                (
                    this.WorkflowXamlPath == input.WorkflowXamlPath ||
                    (this.WorkflowXamlPath != null &&
                    this.WorkflowXamlPath.Equals(input.WorkflowXamlPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.FaultedReason != null)
                    hashCode = hashCode * 59 + this.FaultedReason.GetHashCode();
                if (this.InputArguments != null)
                    hashCode = hashCode * 59 + this.InputArguments.GetHashCode();
                hashCode = hashCode * 59 + this.IsSequential.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                hashCode = hashCode * 59 + this.LogEntriesCount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OutputArguments != null)
                    hashCode = hashCode * 59 + this.OutputArguments.GetHashCode();
                if (this.Requester != null)
                    hashCode = hashCode * 59 + this.Requester.GetHashCode();
                if (this.ResultBlobUrl != null)
                    hashCode = hashCode * 59 + this.ResultBlobUrl.GetHashCode();
                hashCode = hashCode * 59 + this.RetryCount.GetHashCode();
                if (this.SequenceGroup != null)
                    hashCode = hashCode * 59 + this.SequenceGroup.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceQuota.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.WorkflowActivityType != null)
                    hashCode = hashCode * 59 + this.WorkflowActivityType.GetHashCode();
                if (this.WorkflowXamlPath != null)
                    hashCode = hashCode * 59 + this.WorkflowXamlPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
