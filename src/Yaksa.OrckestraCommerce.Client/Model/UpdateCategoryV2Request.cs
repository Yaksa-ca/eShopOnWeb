/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Categories are entities which represents a classification of products.
    /// </summary>
    [DataContract(Name = "UpdateCategoryV2Request")]
    public partial class UpdateCategoryV2Request : IEquatable<UpdateCategoryV2Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCategoryV2Request" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="includeInSearch">The flag that defines whether the category should appear in frond-end search results.</param>
        /// <param name="parentItemName">The value that defines the id of the parent category.</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="sequenceNumber">The value that defines in what order will the category be returned relative to its parent category.</param>
        public UpdateCategoryV2Request(Dictionary<string, string> description = default(Dictionary<string, string>), Dictionary<string, string> displayName = default(Dictionary<string, string>), bool includeInSearch = default(bool), string parentItemName = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), int sequenceNumber = default(int))
        {
            this.Description = description;
            this.DisplayName = displayName;
            this.IncludeInSearch = includeInSearch;
            this.ParentItemName = parentItemName;
            this.PropertyBag = propertyBag;
            this.SequenceNumber = sequenceNumber;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The flag that defines whether the category should appear in frond-end search results
        /// </summary>
        /// <value>The flag that defines whether the category should appear in frond-end search results</value>
        [DataMember(Name = "includeInSearch", EmitDefaultValue = true)]
        public bool IncludeInSearch { get; set; }

        /// <summary>
        /// The value that defines the id of the parent category
        /// </summary>
        /// <value>The value that defines the id of the parent category</value>
        [DataMember(Name = "parentItemName", EmitDefaultValue = false)]
        public string ParentItemName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The value that defines in what order will the category be returned relative to its parent category
        /// </summary>
        /// <value>The value that defines in what order will the category be returned relative to its parent category</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCategoryV2Request {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IncludeInSearch: ").Append(IncludeInSearch).Append("\n");
            sb.Append("  ParentItemName: ").Append(ParentItemName).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCategoryV2Request);
        }

        /// <summary>
        /// Returns true if UpdateCategoryV2Request instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCategoryV2Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCategoryV2Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.IncludeInSearch == input.IncludeInSearch ||
                    this.IncludeInSearch.Equals(input.IncludeInSearch)
                ) && 
                (
                    this.ParentItemName == input.ParentItemName ||
                    (this.ParentItemName != null &&
                    this.ParentItemName.Equals(input.ParentItemName))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInSearch.GetHashCode();
                if (this.ParentItemName != null)
                    hashCode = hashCode * 59 + this.ParentItemName.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
