/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Users represents the persons interacting with the system.
    /// </summary>
    [DataContract(Name = "FindUsersByNameRequest")]
    public partial class FindUsersByNameRequest : IEquatable<FindUsersByNameRequest>, IValidatableObject
    {
        /// <summary>
        /// The &#39;order by attribute&#39; use to sort users. By default, the users will be order by DisplayName.
        /// </summary>
        /// <value>The &#39;order by attribute&#39; use to sort users. By default, the users will be order by DisplayName.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderByEnum
        {
            /// <summary>
            /// Enum DisplayName for value: DisplayName
            /// </summary>
            [EnumMember(Value = "DisplayName")]
            DisplayName = 1,

            /// <summary>
            /// Enum FirstName for value: FirstName
            /// </summary>
            [EnumMember(Value = "FirstName")]
            FirstName = 2,

            /// <summary>
            /// Enum LastName for value: LastName
            /// </summary>
            [EnumMember(Value = "LastName")]
            LastName = 3,

            /// <summary>
            /// Enum UserName for value: UserName
            /// </summary>
            [EnumMember(Value = "UserName")]
            UserName = 4

        }


        /// <summary>
        /// The &#39;order by attribute&#39; use to sort users. By default, the users will be order by DisplayName.
        /// </summary>
        /// <value>The &#39;order by attribute&#39; use to sort users. By default, the users will be order by DisplayName.</value>
        [DataMember(Name = "orderBy", EmitDefaultValue = false)]
        public OrderByEnum? OrderBy { get; set; }
        /// <summary>
        /// Indicates how to sort the users
        /// </summary>
        /// <value>Indicates how to sort the users</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 1,

            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 2

        }


        /// <summary>
        /// Indicates how to sort the users
        /// </summary>
        /// <value>Indicates how to sort the users</value>
        [DataMember(Name = "sortDirection", EmitDefaultValue = false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindUsersByNameRequest" /> class.
        /// </summary>
        /// <param name="includeDisabled">Indicates whether the query should include disabled user.</param>
        /// <param name="maxResults">The maximum of user results to return..</param>
        /// <param name="name">The name of the user..</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort users. By default, the users will be order by DisplayName..</param>
        /// <param name="pageIndex">The index of the result page.</param>
        /// <param name="pageSize">The number results to return. Used for paging..</param>
        /// <param name="sortDirection">Indicates how to sort the users.</param>
        public FindUsersByNameRequest(bool includeDisabled = default(bool), int maxResults = default(int), string name = default(string), OrderByEnum? orderBy = default(OrderByEnum?), int pageIndex = default(int), int pageSize = default(int), SortDirectionEnum? sortDirection = default(SortDirectionEnum?))
        {
            this.IncludeDisabled = includeDisabled;
            this.MaxResults = maxResults;
            this.Name = name;
            this.OrderBy = orderBy;
            this.PageIndex = pageIndex;
            this.PageSize = pageSize;
            this.SortDirection = sortDirection;
        }

        /// <summary>
        /// Indicates whether the query should include disabled user
        /// </summary>
        /// <value>Indicates whether the query should include disabled user</value>
        [DataMember(Name = "includeDisabled", EmitDefaultValue = true)]
        public bool IncludeDisabled { get; set; }

        /// <summary>
        /// The maximum of user results to return.
        /// </summary>
        /// <value>The maximum of user results to return.</value>
        [DataMember(Name = "maxResults", EmitDefaultValue = false)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The name of the user.
        /// </summary>
        /// <value>The name of the user.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The index of the result page
        /// </summary>
        /// <value>The index of the result page</value>
        [DataMember(Name = "pageIndex", EmitDefaultValue = false)]
        public int PageIndex { get; set; }

        /// <summary>
        /// The number results to return. Used for paging.
        /// </summary>
        /// <value>The number results to return. Used for paging.</value>
        [DataMember(Name = "pageSize", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindUsersByNameRequest {\n");
            sb.Append("  IncludeDisabled: ").Append(IncludeDisabled).Append("\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindUsersByNameRequest);
        }

        /// <summary>
        /// Returns true if FindUsersByNameRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindUsersByNameRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindUsersByNameRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncludeDisabled == input.IncludeDisabled ||
                    this.IncludeDisabled.Equals(input.IncludeDisabled)
                ) && 
                (
                    this.MaxResults == input.MaxResults ||
                    this.MaxResults.Equals(input.MaxResults)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrderBy == input.OrderBy ||
                    this.OrderBy.Equals(input.OrderBy)
                ) && 
                (
                    this.PageIndex == input.PageIndex ||
                    this.PageIndex.Equals(input.PageIndex)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    this.SortDirection.Equals(input.SortDirection)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IncludeDisabled.GetHashCode();
                hashCode = hashCode * 59 + this.MaxResults.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.OrderBy.GetHashCode();
                hashCode = hashCode * 59 + this.PageIndex.GetHashCode();
                hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
