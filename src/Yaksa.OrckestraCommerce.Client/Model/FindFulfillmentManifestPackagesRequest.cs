/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "FindFulfillmentManifestPackagesRequest")]
    public partial class FindFulfillmentManifestPackagesRequest : IEquatable<FindFulfillmentManifestPackagesRequest>, IValidatableObject
    {
        /// <summary>
        /// The optional carrier manifest requirement to find.
        /// </summary>
        /// <value>The optional carrier manifest requirement to find.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierManifestRequirementEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Required for value: Required
            /// </summary>
            [EnumMember(Value = "Required")]
            Required = 2,

            /// <summary>
            /// Enum NotRequired for value: NotRequired
            /// </summary>
            [EnumMember(Value = "NotRequired")]
            NotRequired = 3,

            /// <summary>
            /// Enum Excluded for value: Excluded
            /// </summary>
            [EnumMember(Value = "Excluded")]
            Excluded = 4

        }


        /// <summary>
        /// The optional carrier manifest requirement to find.
        /// </summary>
        /// <value>The optional carrier manifest requirement to find.</value>
        [DataMember(Name = "carrierManifestRequirement", EmitDefaultValue = false)]
        public CarrierManifestRequirementEnum? CarrierManifestRequirement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindFulfillmentManifestPackagesRequest" /> class.
        /// </summary>
        /// <param name="carrierAccountIdOutbound">The carrier account id for outbound..</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name for outbound..</param>
        /// <param name="carrierManifestRequirement">The optional carrier manifest requirement to find..</param>
        /// <param name="carrierNameOutbound">The carrier name for outbound..</param>
        /// <param name="carrierServiceLevelOutbound">The carrier service level for outbound..</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier..</param>
        /// <param name="fulfillmentStatus">The optional fulfillment status..</param>
        /// <param name="includePackageItems">A value indicating whether fulfillment package items are retrieved with each package..</param>
        /// <param name="includePackagesWithManifest">A value indicating whether fulfillment packages with a manifest are returned..</param>
        /// <param name="includePackagesWithoutManifest">A value indicating whether fulfillment packages without a manifest are returned..</param>
        /// <param name="manifestedFrom">The optional manifested from date filter (utc)..</param>
        /// <param name="manifestedTo">The optional manifested from date filter (utc)..</param>
        /// <param name="manifestReferenceId">The optional manifest reference id..</param>
        /// <param name="scopeId">The scope identifier..</param>
        /// <param name="shippingProviderId">The optional shipping provider identifier..</param>
        public FindFulfillmentManifestPackagesRequest(string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), CarrierManifestRequirementEnum? carrierManifestRequirement = default(CarrierManifestRequirementEnum?), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), string fulfillmentLocationId = default(string), string fulfillmentStatus = default(string), bool includePackageItems = default(bool), bool includePackagesWithManifest = default(bool), bool includePackagesWithoutManifest = default(bool), DateTime manifestedFrom = default(DateTime), DateTime manifestedTo = default(DateTime), string manifestReferenceId = default(string), string scopeId = default(string), string shippingProviderId = default(string))
        {
            this.CarrierAccountIdOutbound = carrierAccountIdOutbound;
            this.CarrierAccountNameOutbound = carrierAccountNameOutbound;
            this.CarrierManifestRequirement = carrierManifestRequirement;
            this.CarrierNameOutbound = carrierNameOutbound;
            this.CarrierServiceLevelOutbound = carrierServiceLevelOutbound;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.FulfillmentStatus = fulfillmentStatus;
            this.IncludePackageItems = includePackageItems;
            this.IncludePackagesWithManifest = includePackagesWithManifest;
            this.IncludePackagesWithoutManifest = includePackagesWithoutManifest;
            this.ManifestedFrom = manifestedFrom;
            this.ManifestedTo = manifestedTo;
            this.ManifestReferenceId = manifestReferenceId;
            this.ScopeId = scopeId;
            this.ShippingProviderId = shippingProviderId;
        }

        /// <summary>
        /// The carrier account id for outbound.
        /// </summary>
        /// <value>The carrier account id for outbound.</value>
        [DataMember(Name = "carrierAccountIdOutbound", EmitDefaultValue = false)]
        public string CarrierAccountIdOutbound { get; set; }

        /// <summary>
        /// The carrier account name for outbound.
        /// </summary>
        /// <value>The carrier account name for outbound.</value>
        [DataMember(Name = "carrierAccountNameOutbound", EmitDefaultValue = false)]
        public string CarrierAccountNameOutbound { get; set; }

        /// <summary>
        /// The carrier name for outbound.
        /// </summary>
        /// <value>The carrier name for outbound.</value>
        [DataMember(Name = "carrierNameOutbound", EmitDefaultValue = false)]
        public string CarrierNameOutbound { get; set; }

        /// <summary>
        /// The carrier service level for outbound.
        /// </summary>
        /// <value>The carrier service level for outbound.</value>
        [DataMember(Name = "carrierServiceLevelOutbound", EmitDefaultValue = false)]
        public string CarrierServiceLevelOutbound { get; set; }

        /// <summary>
        /// The fulfillment location identifier.
        /// </summary>
        /// <value>The fulfillment location identifier.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// The optional fulfillment status.
        /// </summary>
        /// <value>The optional fulfillment status.</value>
        [DataMember(Name = "fulfillmentStatus", EmitDefaultValue = false)]
        public string FulfillmentStatus { get; set; }

        /// <summary>
        /// A value indicating whether fulfillment package items are retrieved with each package.
        /// </summary>
        /// <value>A value indicating whether fulfillment package items are retrieved with each package.</value>
        [DataMember(Name = "includePackageItems", EmitDefaultValue = true)]
        public bool IncludePackageItems { get; set; }

        /// <summary>
        /// A value indicating whether fulfillment packages with a manifest are returned.
        /// </summary>
        /// <value>A value indicating whether fulfillment packages with a manifest are returned.</value>
        [DataMember(Name = "includePackagesWithManifest", EmitDefaultValue = true)]
        public bool IncludePackagesWithManifest { get; set; }

        /// <summary>
        /// A value indicating whether fulfillment packages without a manifest are returned.
        /// </summary>
        /// <value>A value indicating whether fulfillment packages without a manifest are returned.</value>
        [DataMember(Name = "includePackagesWithoutManifest", EmitDefaultValue = true)]
        public bool IncludePackagesWithoutManifest { get; set; }

        /// <summary>
        /// The optional manifested from date filter (utc).
        /// </summary>
        /// <value>The optional manifested from date filter (utc).</value>
        [DataMember(Name = "manifestedFrom", EmitDefaultValue = false)]
        public DateTime ManifestedFrom { get; set; }

        /// <summary>
        /// The optional manifested from date filter (utc).
        /// </summary>
        /// <value>The optional manifested from date filter (utc).</value>
        [DataMember(Name = "manifestedTo", EmitDefaultValue = false)]
        public DateTime ManifestedTo { get; set; }

        /// <summary>
        /// The optional manifest reference id.
        /// </summary>
        /// <value>The optional manifest reference id.</value>
        [DataMember(Name = "manifestReferenceId", EmitDefaultValue = false)]
        public string ManifestReferenceId { get; set; }

        /// <summary>
        /// The scope identifier.
        /// </summary>
        /// <value>The scope identifier.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The optional shipping provider identifier.
        /// </summary>
        /// <value>The optional shipping provider identifier.</value>
        [DataMember(Name = "shippingProviderId", EmitDefaultValue = false)]
        public string ShippingProviderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindFulfillmentManifestPackagesRequest {\n");
            sb.Append("  CarrierAccountIdOutbound: ").Append(CarrierAccountIdOutbound).Append("\n");
            sb.Append("  CarrierAccountNameOutbound: ").Append(CarrierAccountNameOutbound).Append("\n");
            sb.Append("  CarrierManifestRequirement: ").Append(CarrierManifestRequirement).Append("\n");
            sb.Append("  CarrierNameOutbound: ").Append(CarrierNameOutbound).Append("\n");
            sb.Append("  CarrierServiceLevelOutbound: ").Append(CarrierServiceLevelOutbound).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentStatus: ").Append(FulfillmentStatus).Append("\n");
            sb.Append("  IncludePackageItems: ").Append(IncludePackageItems).Append("\n");
            sb.Append("  IncludePackagesWithManifest: ").Append(IncludePackagesWithManifest).Append("\n");
            sb.Append("  IncludePackagesWithoutManifest: ").Append(IncludePackagesWithoutManifest).Append("\n");
            sb.Append("  ManifestedFrom: ").Append(ManifestedFrom).Append("\n");
            sb.Append("  ManifestedTo: ").Append(ManifestedTo).Append("\n");
            sb.Append("  ManifestReferenceId: ").Append(ManifestReferenceId).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  ShippingProviderId: ").Append(ShippingProviderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindFulfillmentManifestPackagesRequest);
        }

        /// <summary>
        /// Returns true if FindFulfillmentManifestPackagesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindFulfillmentManifestPackagesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindFulfillmentManifestPackagesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CarrierAccountIdOutbound == input.CarrierAccountIdOutbound ||
                    (this.CarrierAccountIdOutbound != null &&
                    this.CarrierAccountIdOutbound.Equals(input.CarrierAccountIdOutbound))
                ) && 
                (
                    this.CarrierAccountNameOutbound == input.CarrierAccountNameOutbound ||
                    (this.CarrierAccountNameOutbound != null &&
                    this.CarrierAccountNameOutbound.Equals(input.CarrierAccountNameOutbound))
                ) && 
                (
                    this.CarrierManifestRequirement == input.CarrierManifestRequirement ||
                    this.CarrierManifestRequirement.Equals(input.CarrierManifestRequirement)
                ) && 
                (
                    this.CarrierNameOutbound == input.CarrierNameOutbound ||
                    (this.CarrierNameOutbound != null &&
                    this.CarrierNameOutbound.Equals(input.CarrierNameOutbound))
                ) && 
                (
                    this.CarrierServiceLevelOutbound == input.CarrierServiceLevelOutbound ||
                    (this.CarrierServiceLevelOutbound != null &&
                    this.CarrierServiceLevelOutbound.Equals(input.CarrierServiceLevelOutbound))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentStatus == input.FulfillmentStatus ||
                    (this.FulfillmentStatus != null &&
                    this.FulfillmentStatus.Equals(input.FulfillmentStatus))
                ) && 
                (
                    this.IncludePackageItems == input.IncludePackageItems ||
                    this.IncludePackageItems.Equals(input.IncludePackageItems)
                ) && 
                (
                    this.IncludePackagesWithManifest == input.IncludePackagesWithManifest ||
                    this.IncludePackagesWithManifest.Equals(input.IncludePackagesWithManifest)
                ) && 
                (
                    this.IncludePackagesWithoutManifest == input.IncludePackagesWithoutManifest ||
                    this.IncludePackagesWithoutManifest.Equals(input.IncludePackagesWithoutManifest)
                ) && 
                (
                    this.ManifestedFrom == input.ManifestedFrom ||
                    (this.ManifestedFrom != null &&
                    this.ManifestedFrom.Equals(input.ManifestedFrom))
                ) && 
                (
                    this.ManifestedTo == input.ManifestedTo ||
                    (this.ManifestedTo != null &&
                    this.ManifestedTo.Equals(input.ManifestedTo))
                ) && 
                (
                    this.ManifestReferenceId == input.ManifestReferenceId ||
                    (this.ManifestReferenceId != null &&
                    this.ManifestReferenceId.Equals(input.ManifestReferenceId))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.ShippingProviderId == input.ShippingProviderId ||
                    (this.ShippingProviderId != null &&
                    this.ShippingProviderId.Equals(input.ShippingProviderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierAccountIdOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierAccountIdOutbound.GetHashCode();
                if (this.CarrierAccountNameOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierAccountNameOutbound.GetHashCode();
                hashCode = hashCode * 59 + this.CarrierManifestRequirement.GetHashCode();
                if (this.CarrierNameOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierNameOutbound.GetHashCode();
                if (this.CarrierServiceLevelOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierServiceLevelOutbound.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.FulfillmentStatus != null)
                    hashCode = hashCode * 59 + this.FulfillmentStatus.GetHashCode();
                hashCode = hashCode * 59 + this.IncludePackageItems.GetHashCode();
                hashCode = hashCode * 59 + this.IncludePackagesWithManifest.GetHashCode();
                hashCode = hashCode * 59 + this.IncludePackagesWithoutManifest.GetHashCode();
                if (this.ManifestedFrom != null)
                    hashCode = hashCode * 59 + this.ManifestedFrom.GetHashCode();
                if (this.ManifestedTo != null)
                    hashCode = hashCode * 59 + this.ManifestedTo.GetHashCode();
                if (this.ManifestReferenceId != null)
                    hashCode = hashCode * 59 + this.ManifestReferenceId.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.ShippingProviderId != null)
                    hashCode = hashCode * 59 + this.ShippingProviderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
