/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PriceListSummary
    /// </summary>
    [DataContract(Name = "PriceListSummary")]
    public partial class PriceListSummary : IEquatable<PriceListSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListSummary" /> class.
        /// </summary>
        /// <param name="priceListCategory">the price list category.</param>
        /// <param name="priceListId">the price list name.</param>
        /// <param name="priceListType">the type of the price list.</param>
        public PriceListSummary(string priceListCategory = default(string), string priceListId = default(string), string priceListType = default(string))
        {
            this.PriceListCategory = priceListCategory;
            this.PriceListId = priceListId;
            this.PriceListType = priceListType;
        }

        /// <summary>
        /// the price list category
        /// </summary>
        /// <value>the price list category</value>
        [DataMember(Name = "priceListCategory", EmitDefaultValue = false)]
        public string PriceListCategory { get; set; }

        /// <summary>
        /// the price list name
        /// </summary>
        /// <value>the price list name</value>
        [DataMember(Name = "priceListId", EmitDefaultValue = false)]
        public string PriceListId { get; set; }

        /// <summary>
        /// the type of the price list
        /// </summary>
        /// <value>the type of the price list</value>
        [DataMember(Name = "priceListType", EmitDefaultValue = false)]
        public string PriceListType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceListSummary {\n");
            sb.Append("  PriceListCategory: ").Append(PriceListCategory).Append("\n");
            sb.Append("  PriceListId: ").Append(PriceListId).Append("\n");
            sb.Append("  PriceListType: ").Append(PriceListType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceListSummary);
        }

        /// <summary>
        /// Returns true if PriceListSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceListSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceListSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PriceListCategory == input.PriceListCategory ||
                    (this.PriceListCategory != null &&
                    this.PriceListCategory.Equals(input.PriceListCategory))
                ) && 
                (
                    this.PriceListId == input.PriceListId ||
                    (this.PriceListId != null &&
                    this.PriceListId.Equals(input.PriceListId))
                ) && 
                (
                    this.PriceListType == input.PriceListType ||
                    (this.PriceListType != null &&
                    this.PriceListType.Equals(input.PriceListType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceListCategory != null)
                    hashCode = hashCode * 59 + this.PriceListCategory.GetHashCode();
                if (this.PriceListId != null)
                    hashCode = hashCode * 59 + this.PriceListId.GetHashCode();
                if (this.PriceListType != null)
                    hashCode = hashCode * 59 + this.PriceListType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
