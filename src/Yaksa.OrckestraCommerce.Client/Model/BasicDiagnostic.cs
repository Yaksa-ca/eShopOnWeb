/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// BasicDiagnostic
    /// </summary>
    [DataContract(Name = "BasicDiagnostic")]
    public partial class BasicDiagnostic : IEquatable<BasicDiagnostic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicDiagnostic" /> class.
        /// </summary>
        /// <param name="compressionHeader">Content of the Accept-Encoding header of the request.</param>
        /// <param name="serverDateTime">DateTime of the server when executing the request (UTC).</param>
        public BasicDiagnostic(string compressionHeader = default(string), DateTime serverDateTime = default(DateTime))
        {
            this.CompressionHeader = compressionHeader;
            this.ServerDateTime = serverDateTime;
        }

        /// <summary>
        /// Content of the Accept-Encoding header of the request
        /// </summary>
        /// <value>Content of the Accept-Encoding header of the request</value>
        [DataMember(Name = "compressionHeader", EmitDefaultValue = false)]
        public string CompressionHeader { get; set; }

        /// <summary>
        /// DateTime of the server when executing the request (UTC)
        /// </summary>
        /// <value>DateTime of the server when executing the request (UTC)</value>
        [DataMember(Name = "serverDateTime", EmitDefaultValue = false)]
        public DateTime ServerDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicDiagnostic {\n");
            sb.Append("  CompressionHeader: ").Append(CompressionHeader).Append("\n");
            sb.Append("  ServerDateTime: ").Append(ServerDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicDiagnostic);
        }

        /// <summary>
        /// Returns true if BasicDiagnostic instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicDiagnostic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicDiagnostic input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompressionHeader == input.CompressionHeader ||
                    (this.CompressionHeader != null &&
                    this.CompressionHeader.Equals(input.CompressionHeader))
                ) && 
                (
                    this.ServerDateTime == input.ServerDateTime ||
                    (this.ServerDateTime != null &&
                    this.ServerDateTime.Equals(input.ServerDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompressionHeader != null)
                    hashCode = hashCode * 59 + this.CompressionHeader.GetHashCode();
                if (this.ServerDateTime != null)
                    hashCode = hashCode * 59 + this.ServerDateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
