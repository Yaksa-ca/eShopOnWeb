/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Picking missions are entities which represent a list of items that need to be picked to fulfill order shipments.
    /// </summary>
    [DataContract(Name = "CreatePickingMissionRequest")]
    public partial class CreatePickingMissionRequest : IEquatable<CreatePickingMissionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePickingMissionRequest" /> class.
        /// </summary>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier..</param>
        /// <param name="id">the picking mission id..</param>
        /// <param name="missionItems">the picking mission items..</param>
        public CreatePickingMissionRequest(string fulfillmentLocationId = default(string), string id = default(string), List<MissionItem> missionItems = default(List<MissionItem>))
        {
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.Id = id;
            this.MissionItems = missionItems;
        }

        /// <summary>
        /// the fulfillment location identifier.
        /// </summary>
        /// <value>the fulfillment location identifier.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// the picking mission id.
        /// </summary>
        /// <value>the picking mission id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// the picking mission items.
        /// </summary>
        /// <value>the picking mission items.</value>
        [DataMember(Name = "missionItems", EmitDefaultValue = false)]
        public List<MissionItem> MissionItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePickingMissionRequest {\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MissionItems: ").Append(MissionItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePickingMissionRequest);
        }

        /// <summary>
        /// Returns true if CreatePickingMissionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePickingMissionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePickingMissionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MissionItems == input.MissionItems ||
                    this.MissionItems != null &&
                    input.MissionItems != null &&
                    this.MissionItems.SequenceEqual(input.MissionItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MissionItems != null)
                    hashCode = hashCode * 59 + this.MissionItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
