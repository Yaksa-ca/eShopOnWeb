/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductDocument
    /// </summary>
    [DataContract(Name = "ProductDocument")]
    public partial class ProductDocument : IEquatable<ProductDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDocument" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="catalogId">the catalog identifier..</param>
        /// <param name="currentPrice">the current price according to the date sent in the request..</param>
        /// <param name="defaultPrice">[Obsolete] the default price..</param>
        /// <param name="entityPricing">entityPricing.</param>
        /// <param name="groupPricing">groupPricing.</param>
        /// <param name="inventoryLocationStatuses">the inventory statuses in each inventory location sent in the request..</param>
        /// <param name="listPrice">[Obsolete] the list price (default price)..</param>
        /// <param name="price">the current price according to the date sent in the request..</param>
        /// <param name="productId">the product identifier..</param>
        /// <param name="regularPrice">The current regular price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow..</param>
        /// <param name="sku">the sku..</param>
        public ProductDocument(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string catalogId = default(string), double currentPrice = default(double), double defaultPrice = default(double), EntityPricing entityPricing = default(EntityPricing), GroupPricing groupPricing = default(GroupPricing), List<InventoryItemAvailability> inventoryLocationStatuses = default(List<InventoryItemAvailability>), double listPrice = default(double), double price = default(double), string productId = default(string), double regularPrice = default(double), string sku = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for ProductDocument and cannot be null");
            this.PropertyBag = propertyBag;
            this.CatalogId = catalogId;
            this.CurrentPrice = currentPrice;
            this.DefaultPrice = defaultPrice;
            this.EntityPricing = entityPricing;
            this.GroupPricing = groupPricing;
            this.InventoryLocationStatuses = inventoryLocationStatuses;
            this.ListPrice = listPrice;
            this.Price = price;
            this.ProductId = productId;
            this.RegularPrice = regularPrice;
            this.Sku = sku;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// the catalog identifier.
        /// </summary>
        /// <value>the catalog identifier.</value>
        [DataMember(Name = "catalogId", EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// the current price according to the date sent in the request.
        /// </summary>
        /// <value>the current price according to the date sent in the request.</value>
        [DataMember(Name = "currentPrice", EmitDefaultValue = false)]
        public double CurrentPrice { get; set; }

        /// <summary>
        /// [Obsolete] the default price.
        /// </summary>
        /// <value>[Obsolete] the default price.</value>
        [DataMember(Name = "defaultPrice", EmitDefaultValue = false)]
        public double DefaultPrice { get; set; }

        /// <summary>
        /// Gets or Sets EntityPricing
        /// </summary>
        [DataMember(Name = "entityPricing", EmitDefaultValue = false)]
        public EntityPricing EntityPricing { get; set; }

        /// <summary>
        /// Gets or Sets GroupPricing
        /// </summary>
        [DataMember(Name = "groupPricing", EmitDefaultValue = false)]
        public GroupPricing GroupPricing { get; set; }

        /// <summary>
        /// the inventory statuses in each inventory location sent in the request.
        /// </summary>
        /// <value>the inventory statuses in each inventory location sent in the request.</value>
        [DataMember(Name = "inventoryLocationStatuses", EmitDefaultValue = false)]
        public List<InventoryItemAvailability> InventoryLocationStatuses { get; set; }

        /// <summary>
        /// [Obsolete] the list price (default price).
        /// </summary>
        /// <value>[Obsolete] the list price (default price).</value>
        [DataMember(Name = "listPrice", EmitDefaultValue = false)]
        public double ListPrice { get; set; }

        /// <summary>
        /// the current price according to the date sent in the request.
        /// </summary>
        /// <value>the current price according to the date sent in the request.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// the product identifier.
        /// </summary>
        /// <value>the product identifier.</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// The current regular price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.
        /// </summary>
        /// <value>The current regular price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.</value>
        [DataMember(Name = "regularPrice", EmitDefaultValue = false)]
        public double RegularPrice { get; set; }

        /// <summary>
        /// the sku.
        /// </summary>
        /// <value>the sku.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  CurrentPrice: ").Append(CurrentPrice).Append("\n");
            sb.Append("  DefaultPrice: ").Append(DefaultPrice).Append("\n");
            sb.Append("  EntityPricing: ").Append(EntityPricing).Append("\n");
            sb.Append("  GroupPricing: ").Append(GroupPricing).Append("\n");
            sb.Append("  InventoryLocationStatuses: ").Append(InventoryLocationStatuses).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  RegularPrice: ").Append(RegularPrice).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductDocument);
        }

        /// <summary>
        /// Returns true if ProductDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.CurrentPrice == input.CurrentPrice ||
                    this.CurrentPrice.Equals(input.CurrentPrice)
                ) && 
                (
                    this.DefaultPrice == input.DefaultPrice ||
                    this.DefaultPrice.Equals(input.DefaultPrice)
                ) && 
                (
                    this.EntityPricing == input.EntityPricing ||
                    (this.EntityPricing != null &&
                    this.EntityPricing.Equals(input.EntityPricing))
                ) && 
                (
                    this.GroupPricing == input.GroupPricing ||
                    (this.GroupPricing != null &&
                    this.GroupPricing.Equals(input.GroupPricing))
                ) && 
                (
                    this.InventoryLocationStatuses == input.InventoryLocationStatuses ||
                    this.InventoryLocationStatuses != null &&
                    input.InventoryLocationStatuses != null &&
                    this.InventoryLocationStatuses.SequenceEqual(input.InventoryLocationStatuses)
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    this.ListPrice.Equals(input.ListPrice)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.RegularPrice == input.RegularPrice ||
                    this.RegularPrice.Equals(input.RegularPrice)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.CatalogId != null)
                    hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentPrice.GetHashCode();
                hashCode = hashCode * 59 + this.DefaultPrice.GetHashCode();
                if (this.EntityPricing != null)
                    hashCode = hashCode * 59 + this.EntityPricing.GetHashCode();
                if (this.GroupPricing != null)
                    hashCode = hashCode * 59 + this.GroupPricing.GetHashCode();
                if (this.InventoryLocationStatuses != null)
                    hashCode = hashCode * 59 + this.InventoryLocationStatuses.GetHashCode();
                hashCode = hashCode * 59 + this.ListPrice.GetHashCode();
                hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                hashCode = hashCode * 59 + this.RegularPrice.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
