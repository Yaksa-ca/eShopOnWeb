/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Fulfillment locations are entities which handles fulfillment for a shipment.
    /// </summary>
    [DataContract(Name = "UpdateFulfillmentLocationTimeSlotReservationRequest")]
    public partial class UpdateFulfillmentLocationTimeSlotReservationRequest : IEquatable<UpdateFulfillmentLocationTimeSlotReservationRequest>, IValidatableObject
    {
        /// <summary>
        /// The reservation status. Options are Tentative, Confirmed, Expired and Void.
        /// </summary>
        /// <value>The reservation status. Options are Tentative, Confirmed, Expired and Void.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReservationStatusEnum
        {
            /// <summary>
            /// Enum Tentative for value: Tentative
            /// </summary>
            [EnumMember(Value = "Tentative")]
            Tentative = 1,

            /// <summary>
            /// Enum Confirmed for value: Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed = 2,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 3,

            /// <summary>
            /// Enum Voided for value: Voided
            /// </summary>
            [EnumMember(Value = "Voided")]
            Voided = 4

        }


        /// <summary>
        /// The reservation status. Options are Tentative, Confirmed, Expired and Void.
        /// </summary>
        /// <value>The reservation status. Options are Tentative, Confirmed, Expired and Void.</value>
        [DataMember(Name = "reservationStatus", IsRequired = true, EmitDefaultValue = false)]
        public ReservationStatusEnum ReservationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateFulfillmentLocationTimeSlotReservationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateFulfillmentLocationTimeSlotReservationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateFulfillmentLocationTimeSlotReservationRequest" /> class.
        /// </summary>
        /// <param name="slotId">The unique identifier of the time slot. An empty guid will not update the time slot..</param>
        /// <param name="comment">The comment of the time slot reservation..</param>
        /// <param name="expiryTime">The expiry time for this reservation. Required only for Tentative status..</param>
        /// <param name="expiryWarningTime">The expiry time for this reservation. Required only for Tentative status..</param>
        /// <param name="orderId">The reservation order id associated with the reservation..</param>
        /// <param name="orderNumber">The reservation order number associated with the reservation..</param>
        /// <param name="reservationStatus">The reservation status. Options are Tentative, Confirmed, Expired and Void. (required).</param>
        /// <param name="shipmentId">The reservation shipment id associated with the reservation..</param>
        public UpdateFulfillmentLocationTimeSlotReservationRequest(string slotId = default(string), string comment = default(string), string expiryTime = default(string), string expiryWarningTime = default(string), string orderId = default(string), string orderNumber = default(string), ReservationStatusEnum reservationStatus = default(ReservationStatusEnum), string shipmentId = default(string))
        {
            this.ReservationStatus = reservationStatus;
            this.SlotId = slotId;
            this.Comment = comment;
            this.ExpiryTime = expiryTime;
            this.ExpiryWarningTime = expiryWarningTime;
            this.OrderId = orderId;
            this.OrderNumber = orderNumber;
            this.ShipmentId = shipmentId;
        }

        /// <summary>
        /// The unique identifier of the time slot. An empty guid will not update the time slot.
        /// </summary>
        /// <value>The unique identifier of the time slot. An empty guid will not update the time slot.</value>
        [DataMember(Name = "slotId", EmitDefaultValue = false)]
        public string SlotId { get; set; }

        /// <summary>
        /// The comment of the time slot reservation.
        /// </summary>
        /// <value>The comment of the time slot reservation.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// The expiry time for this reservation. Required only for Tentative status.
        /// </summary>
        /// <value>The expiry time for this reservation. Required only for Tentative status.</value>
        [DataMember(Name = "expiryTime", EmitDefaultValue = false)]
        public string ExpiryTime { get; set; }

        /// <summary>
        /// The expiry time for this reservation. Required only for Tentative status.
        /// </summary>
        /// <value>The expiry time for this reservation. Required only for Tentative status.</value>
        [DataMember(Name = "expiryWarningTime", EmitDefaultValue = false)]
        public string ExpiryWarningTime { get; set; }

        /// <summary>
        /// The reservation order id associated with the reservation.
        /// </summary>
        /// <value>The reservation order id associated with the reservation.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The reservation order number associated with the reservation.
        /// </summary>
        /// <value>The reservation order number associated with the reservation.</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The reservation shipment id associated with the reservation.
        /// </summary>
        /// <value>The reservation shipment id associated with the reservation.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateFulfillmentLocationTimeSlotReservationRequest {\n");
            sb.Append("  SlotId: ").Append(SlotId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ExpiryTime: ").Append(ExpiryTime).Append("\n");
            sb.Append("  ExpiryWarningTime: ").Append(ExpiryWarningTime).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ReservationStatus: ").Append(ReservationStatus).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateFulfillmentLocationTimeSlotReservationRequest);
        }

        /// <summary>
        /// Returns true if UpdateFulfillmentLocationTimeSlotReservationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateFulfillmentLocationTimeSlotReservationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateFulfillmentLocationTimeSlotReservationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SlotId == input.SlotId ||
                    (this.SlotId != null &&
                    this.SlotId.Equals(input.SlotId))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.ExpiryTime == input.ExpiryTime ||
                    (this.ExpiryTime != null &&
                    this.ExpiryTime.Equals(input.ExpiryTime))
                ) && 
                (
                    this.ExpiryWarningTime == input.ExpiryWarningTime ||
                    (this.ExpiryWarningTime != null &&
                    this.ExpiryWarningTime.Equals(input.ExpiryWarningTime))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.ReservationStatus == input.ReservationStatus ||
                    this.ReservationStatus.Equals(input.ReservationStatus)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SlotId != null)
                    hashCode = hashCode * 59 + this.SlotId.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.ExpiryTime != null)
                    hashCode = hashCode * 59 + this.ExpiryTime.GetHashCode();
                if (this.ExpiryWarningTime != null)
                    hashCode = hashCode * 59 + this.ExpiryWarningTime.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                hashCode = hashCode * 59 + this.ReservationStatus.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
