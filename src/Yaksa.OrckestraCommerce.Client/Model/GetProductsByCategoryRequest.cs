/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Categories are entities which represents a classification of products.
    /// </summary>
    [DataContract(Name = "GetProductsByCategoryRequest")]
    public partial class GetProductsByCategoryRequest : IEquatable<GetProductsByCategoryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsByCategoryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetProductsByCategoryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsByCategoryRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned.</param>
        /// <param name="includeVariants">Whether or not to include the variants (if they exists) of the products..</param>
        /// <param name="categoryId">The category id at which point in the category hierarchy should the &#39;get products&#39; be started. (required).</param>
        /// <param name="includePriceLists">Whether or not to include the price lists of the products..</param>
        /// <param name="maximumItems">The maximum number of results to return. Default value : 10.</param>
        /// <param name="startingIndex">the starting index in the results to start getting the products (used for paging purpose).</param>
        public GetProductsByCategoryRequest(string scopeId = default(string), string cultureName = default(string), bool includeVariants = default(bool), string categoryId = default(string), bool includePriceLists = default(bool), int maximumItems = default(int), int startingIndex = default(int))
        {
            // to ensure "categoryId" is required (not null)
            this.CategoryId = categoryId ?? throw new ArgumentNullException("categoryId is a required property for GetProductsByCategoryRequest and cannot be null");
            this.ScopeId = scopeId;
            this.CultureName = cultureName;
            this.IncludeVariants = includeVariants;
            this.IncludePriceLists = includePriceLists;
            this.MaximumItems = maximumItems;
            this.StartingIndex = startingIndex;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The culture name in which language tha data will be returned
        /// </summary>
        /// <value>The culture name in which language tha data will be returned</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// Whether or not to include the variants (if they exists) of the products.
        /// </summary>
        /// <value>Whether or not to include the variants (if they exists) of the products.</value>
        [DataMember(Name = "includeVariants", EmitDefaultValue = true)]
        public bool IncludeVariants { get; set; }

        /// <summary>
        /// The category id at which point in the category hierarchy should the &#39;get products&#39; be started.
        /// </summary>
        /// <value>The category id at which point in the category hierarchy should the &#39;get products&#39; be started.</value>
        [DataMember(Name = "categoryId", IsRequired = true, EmitDefaultValue = false)]
        public string CategoryId { get; set; }

        /// <summary>
        /// Whether or not to include the price lists of the products.
        /// </summary>
        /// <value>Whether or not to include the price lists of the products.</value>
        [DataMember(Name = "includePriceLists", EmitDefaultValue = true)]
        public bool IncludePriceLists { get; set; }

        /// <summary>
        /// The maximum number of results to return. Default value : 10
        /// </summary>
        /// <value>The maximum number of results to return. Default value : 10</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// the starting index in the results to start getting the products (used for paging purpose)
        /// </summary>
        /// <value>the starting index in the results to start getting the products (used for paging purpose)</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProductsByCategoryRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  IncludeVariants: ").Append(IncludeVariants).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  IncludePriceLists: ").Append(IncludePriceLists).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProductsByCategoryRequest);
        }

        /// <summary>
        /// Returns true if GetProductsByCategoryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProductsByCategoryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProductsByCategoryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.IncludeVariants == input.IncludeVariants ||
                    this.IncludeVariants.Equals(input.IncludeVariants)
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.IncludePriceLists == input.IncludePriceLists ||
                    this.IncludePriceLists.Equals(input.IncludePriceLists)
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeVariants.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                hashCode = hashCode * 59 + this.IncludePriceLists.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
