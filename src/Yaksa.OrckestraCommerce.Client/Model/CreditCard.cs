/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// CreditCard
    /// </summary>
    [DataContract(Name = "CreditCard")]
    public partial class CreditCard : IEquatable<CreditCard>, IValidatableObject
    {
        /// <summary>
        /// The PaymentMethodType that is associated with this payment method.
        /// </summary>
        /// <value>The PaymentMethodType that is associated with this payment method.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CreditCard for value: CreditCard
            /// </summary>
            [EnumMember(Value = "CreditCard")]
            CreditCard = 1,

            /// <summary>
            /// Enum SavedCreditCard for value: SavedCreditCard
            /// </summary>
            [EnumMember(Value = "SavedCreditCard")]
            SavedCreditCard = 2,

            /// <summary>
            /// Enum GiftCertificate for value: GiftCertificate
            /// </summary>
            [EnumMember(Value = "GiftCertificate")]
            GiftCertificate = 3,

            /// <summary>
            /// Enum PurchaseOrder for value: PurchaseOrder
            /// </summary>
            [EnumMember(Value = "PurchaseOrder")]
            PurchaseOrder = 4,

            /// <summary>
            /// Enum CashCard for value: CashCard
            /// </summary>
            [EnumMember(Value = "CashCard")]
            CashCard = 5,

            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 6,

            /// <summary>
            /// Enum Debit for value: Debit
            /// </summary>
            [EnumMember(Value = "Debit")]
            Debit = 7,

            /// <summary>
            /// Enum OnSiteCredit for value: OnSiteCredit
            /// </summary>
            [EnumMember(Value = "OnSiteCredit")]
            OnSiteCredit = 8,

            /// <summary>
            /// Enum OnSiteDebit for value: OnSiteDebit
            /// </summary>
            [EnumMember(Value = "OnSiteDebit")]
            OnSiteDebit = 9,

            /// <summary>
            /// Enum Cheque for value: Cheque
            /// </summary>
            [EnumMember(Value = "Cheque")]
            Cheque = 10,

            /// <summary>
            /// Enum OnSiteUnspecified for value: OnSiteUnspecified
            /// </summary>
            [EnumMember(Value = "OnSiteUnspecified")]
            OnSiteUnspecified = 11,

            /// <summary>
            /// Enum Paypal for value: Paypal
            /// </summary>
            [EnumMember(Value = "Paypal")]
            Paypal = 12

        }


        /// <summary>
        /// The PaymentMethodType that is associated with this payment method.
        /// </summary>
        /// <value>The PaymentMethodType that is associated with this payment method.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCard" /> class.
        /// </summary>
        /// <param name="vaultProfileDataKey">The credit card vault profile data key.</param>
        /// <param name="cardMask">The credit masked number.</param>
        /// <param name="cardType">The credit card type.</param>
        /// <param name="expiryDate">The credit card expiry date.</param>
        /// <param name="cardHolderName">The credit card holder name.</param>
        /// <param name="orderLocationId">The credit card order location Id.</param>
        /// <param name="isExpired">The credit card is expired.</param>
        /// <param name="canDelete">The credit card can be deleted.</param>
        /// <param name="id">The unique identifier for this payment method..</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="enabled">Whether this payment method is currently enabled and can be used..</param>
        /// <param name="type">The PaymentMethodType that is associated with this payment method..</param>
        /// <param name="paymentProviderName">The name of the associated payment provider..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="_default">Whether this payment method is used when none are specified.</param>
        public CreditCard(string vaultProfileDataKey = default(string), string cardMask = default(string), string cardType = default(string), string expiryDate = default(string), string cardHolderName = default(string), string orderLocationId = default(string), bool isExpired = default(bool), bool canDelete = default(bool), string id = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), bool enabled = default(bool), TypeEnum? type = default(TypeEnum?), string paymentProviderName = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), bool _default = default(bool))
        {
            this.VaultProfileDataKey = vaultProfileDataKey;
            this.CardMask = cardMask;
            this.CardType = cardType;
            this.ExpiryDate = expiryDate;
            this.CardHolderName = cardHolderName;
            this.OrderLocationId = orderLocationId;
            this.IsExpired = isExpired;
            this.CanDelete = canDelete;
            this.Id = id;
            this.DisplayName = displayName;
            this.Enabled = enabled;
            this.Type = type;
            this.PaymentProviderName = paymentProviderName;
            this.PropertyBag = propertyBag;
            this.Default = _default;
        }

        /// <summary>
        /// The credit card vault profile data key
        /// </summary>
        /// <value>The credit card vault profile data key</value>
        [DataMember(Name = "vaultProfileDataKey", EmitDefaultValue = false)]
        public string VaultProfileDataKey { get; set; }

        /// <summary>
        /// The credit masked number
        /// </summary>
        /// <value>The credit masked number</value>
        [DataMember(Name = "cardMask", EmitDefaultValue = false)]
        public string CardMask { get; set; }

        /// <summary>
        /// The credit card type
        /// </summary>
        /// <value>The credit card type</value>
        [DataMember(Name = "cardType", EmitDefaultValue = false)]
        public string CardType { get; set; }

        /// <summary>
        /// The credit card expiry date
        /// </summary>
        /// <value>The credit card expiry date</value>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// The credit card holder name
        /// </summary>
        /// <value>The credit card holder name</value>
        [DataMember(Name = "cardHolderName", EmitDefaultValue = false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// The credit card order location Id
        /// </summary>
        /// <value>The credit card order location Id</value>
        [DataMember(Name = "orderLocationId", EmitDefaultValue = false)]
        public string OrderLocationId { get; set; }

        /// <summary>
        /// The credit card is expired
        /// </summary>
        /// <value>The credit card is expired</value>
        [DataMember(Name = "isExpired", EmitDefaultValue = true)]
        public bool IsExpired { get; set; }

        /// <summary>
        /// The credit card can be deleted
        /// </summary>
        /// <value>The credit card can be deleted</value>
        [DataMember(Name = "canDelete", EmitDefaultValue = true)]
        public bool CanDelete { get; set; }

        /// <summary>
        /// The unique identifier for this payment method.
        /// </summary>
        /// <value>The unique identifier for this payment method.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Whether this payment method is currently enabled and can be used.
        /// </summary>
        /// <value>Whether this payment method is currently enabled and can be used.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The name of the associated payment provider.
        /// </summary>
        /// <value>The name of the associated payment provider.</value>
        [DataMember(Name = "paymentProviderName", EmitDefaultValue = false)]
        public string PaymentProviderName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Whether this payment method is used when none are specified
        /// </summary>
        /// <value>Whether this payment method is used when none are specified</value>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public bool Default { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCard {\n");
            sb.Append("  VaultProfileDataKey: ").Append(VaultProfileDataKey).Append("\n");
            sb.Append("  CardMask: ").Append(CardMask).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  OrderLocationId: ").Append(OrderLocationId).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  CanDelete: ").Append(CanDelete).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PaymentProviderName: ").Append(PaymentProviderName).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCard);
        }

        /// <summary>
        /// Returns true if CreditCard instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VaultProfileDataKey == input.VaultProfileDataKey ||
                    (this.VaultProfileDataKey != null &&
                    this.VaultProfileDataKey.Equals(input.VaultProfileDataKey))
                ) && 
                (
                    this.CardMask == input.CardMask ||
                    (this.CardMask != null &&
                    this.CardMask.Equals(input.CardMask))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.OrderLocationId == input.OrderLocationId ||
                    (this.OrderLocationId != null &&
                    this.OrderLocationId.Equals(input.OrderLocationId))
                ) && 
                (
                    this.IsExpired == input.IsExpired ||
                    this.IsExpired.Equals(input.IsExpired)
                ) && 
                (
                    this.CanDelete == input.CanDelete ||
                    this.CanDelete.Equals(input.CanDelete)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.PaymentProviderName == input.PaymentProviderName ||
                    (this.PaymentProviderName != null &&
                    this.PaymentProviderName.Equals(input.PaymentProviderName))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Default == input.Default ||
                    this.Default.Equals(input.Default)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VaultProfileDataKey != null)
                    hashCode = hashCode * 59 + this.VaultProfileDataKey.GetHashCode();
                if (this.CardMask != null)
                    hashCode = hashCode * 59 + this.CardMask.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.OrderLocationId != null)
                    hashCode = hashCode * 59 + this.OrderLocationId.GetHashCode();
                hashCode = hashCode * 59 + this.IsExpired.GetHashCode();
                hashCode = hashCode * 59 + this.CanDelete.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PaymentProviderName != null)
                    hashCode = hashCode * 59 + this.PaymentProviderName.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.Default.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
