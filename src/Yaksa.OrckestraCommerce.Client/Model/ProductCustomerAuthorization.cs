/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductCustomerAuthorization
    /// </summary>
    [DataContract(Name = "ProductCustomerAuthorization")]
    public partial class ProductCustomerAuthorization : IEquatable<ProductCustomerAuthorization>, IValidatableObject
    {
        /// <summary>
        /// The current status of the authorization
        /// </summary>
        /// <value>The current status of the authorization</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,

            /// <summary>
            /// Enum Authorized for value: Authorized
            /// </summary>
            [EnumMember(Value = "Authorized")]
            Authorized = 2,

            /// <summary>
            /// Enum Refused for value: Refused
            /// </summary>
            [EnumMember(Value = "Refused")]
            Refused = 3

        }


        /// <summary>
        /// The current status of the authorization
        /// </summary>
        /// <value>The current status of the authorization</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCustomerAuthorization" /> class.
        /// </summary>
        /// <param name="customer">customer.</param>
        /// <param name="id">The Id of this custom profile&#39;s instance.</param>
        /// <param name="customerId">The Id of the customer this product authorization belongs to.</param>
        /// <param name="productId">The product Id this authorization is for.</param>
        /// <param name="product">product.</param>
        /// <param name="requestedDate">The date the authorization was requested at.</param>
        /// <param name="expiryDate">The date the authorization expires.</param>
        /// <param name="resolutionDate">The date the authorization got resolved (accepted or refused).</param>
        /// <param name="status">The current status of the authorization.</param>
        /// <param name="isExpired">Whether the authorization has expired or not..</param>
        /// <param name="isActive">Whether the product authorization is active or not. This means that the customer is able to purchase the product associated to this authorization..</param>
        public ProductCustomerAuthorization(CDMVCustomerInfo customer = default(CDMVCustomerInfo), string id = default(string), string customerId = default(string), string productId = default(string), Product product = default(Product), DateTime requestedDate = default(DateTime), DateTime expiryDate = default(DateTime), DateTime resolutionDate = default(DateTime), StatusEnum? status = default(StatusEnum?), bool isExpired = default(bool), bool isActive = default(bool))
        {
            this.Customer = customer;
            this.Id = id;
            this.CustomerId = customerId;
            this.ProductId = productId;
            this.Product = product;
            this.RequestedDate = requestedDate;
            this.ExpiryDate = expiryDate;
            this.ResolutionDate = resolutionDate;
            this.Status = status;
            this.IsExpired = isExpired;
            this.IsActive = isActive;
        }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public CDMVCustomerInfo Customer { get; set; }

        /// <summary>
        /// The Id of this custom profile&#39;s instance
        /// </summary>
        /// <value>The Id of this custom profile&#39;s instance</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The Id of the customer this product authorization belongs to
        /// </summary>
        /// <value>The Id of the customer this product authorization belongs to</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The product Id this authorization is for
        /// </summary>
        /// <value>The product Id this authorization is for</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", EmitDefaultValue = false)]
        public Product Product { get; set; }

        /// <summary>
        /// The date the authorization was requested at
        /// </summary>
        /// <value>The date the authorization was requested at</value>
        [DataMember(Name = "requestedDate", EmitDefaultValue = false)]
        public DateTime RequestedDate { get; set; }

        /// <summary>
        /// The date the authorization expires
        /// </summary>
        /// <value>The date the authorization expires</value>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public DateTime ExpiryDate { get; set; }

        /// <summary>
        /// The date the authorization got resolved (accepted or refused)
        /// </summary>
        /// <value>The date the authorization got resolved (accepted or refused)</value>
        [DataMember(Name = "resolutionDate", EmitDefaultValue = false)]
        public DateTime ResolutionDate { get; set; }

        /// <summary>
        /// Whether the authorization has expired or not.
        /// </summary>
        /// <value>Whether the authorization has expired or not.</value>
        [DataMember(Name = "isExpired", EmitDefaultValue = true)]
        public bool IsExpired { get; set; }

        /// <summary>
        /// Whether the product authorization is active or not. This means that the customer is able to purchase the product associated to this authorization.
        /// </summary>
        /// <value>Whether the product authorization is active or not. This means that the customer is able to purchase the product associated to this authorization.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductCustomerAuthorization {\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  RequestedDate: ").Append(RequestedDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  ResolutionDate: ").Append(ResolutionDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductCustomerAuthorization);
        }

        /// <summary>
        /// Returns true if ProductCustomerAuthorization instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductCustomerAuthorization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductCustomerAuthorization input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.RequestedDate == input.RequestedDate ||
                    (this.RequestedDate != null &&
                    this.RequestedDate.Equals(input.RequestedDate))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.ResolutionDate == input.ResolutionDate ||
                    (this.ResolutionDate != null &&
                    this.ResolutionDate.Equals(input.ResolutionDate))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.IsExpired == input.IsExpired ||
                    this.IsExpired.Equals(input.IsExpired)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.RequestedDate != null)
                    hashCode = hashCode * 59 + this.RequestedDate.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.ResolutionDate != null)
                    hashCode = hashCode * 59 + this.ResolutionDate.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.IsExpired.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
