/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Carts are entities used for assembling an order before submitting.
    /// </summary>
    [DataContract(Name = "UpdatePaymentMethodRequest")]
    public partial class UpdatePaymentMethodRequest : IEquatable<UpdatePaymentMethodRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePaymentMethodRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The culture name in which language the data will be returned..</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed..</param>
        /// <param name="executeWorkflow">Whether or not to execute the specified workflow before returning the cart..</param>
        /// <param name="paymentMethodId">The payment method identifier.</param>
        /// <param name="paymentProviderName">The name of the payment provider.</param>
        public UpdatePaymentMethodRequest(string cultureName = default(string), string workflowToExecute = default(string), bool executeWorkflow = default(bool), string paymentMethodId = default(string), string paymentProviderName = default(string))
        {
            this.CultureName = cultureName;
            this.WorkflowToExecute = workflowToExecute;
            this.ExecuteWorkflow = executeWorkflow;
            this.PaymentMethodId = paymentMethodId;
            this.PaymentProviderName = paymentProviderName;
        }

        /// <summary>
        /// The culture name in which language the data will be returned.
        /// </summary>
        /// <value>The culture name in which language the data will be returned.</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The name of the workflow that should be executed.
        /// </summary>
        /// <value>The name of the workflow that should be executed.</value>
        [DataMember(Name = "workflowToExecute", EmitDefaultValue = false)]
        public string WorkflowToExecute { get; set; }

        /// <summary>
        /// Whether or not to execute the specified workflow before returning the cart.
        /// </summary>
        /// <value>Whether or not to execute the specified workflow before returning the cart.</value>
        [DataMember(Name = "executeWorkflow", EmitDefaultValue = true)]
        public bool ExecuteWorkflow { get; set; }

        /// <summary>
        /// The payment method identifier
        /// </summary>
        /// <value>The payment method identifier</value>
        [DataMember(Name = "paymentMethodId", EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The name of the payment provider
        /// </summary>
        /// <value>The name of the payment provider</value>
        [DataMember(Name = "paymentProviderName", EmitDefaultValue = false)]
        public string PaymentProviderName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatePaymentMethodRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  WorkflowToExecute: ").Append(WorkflowToExecute).Append("\n");
            sb.Append("  ExecuteWorkflow: ").Append(ExecuteWorkflow).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PaymentProviderName: ").Append(PaymentProviderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePaymentMethodRequest);
        }

        /// <summary>
        /// Returns true if UpdatePaymentMethodRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePaymentMethodRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePaymentMethodRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.WorkflowToExecute == input.WorkflowToExecute ||
                    (this.WorkflowToExecute != null &&
                    this.WorkflowToExecute.Equals(input.WorkflowToExecute))
                ) && 
                (
                    this.ExecuteWorkflow == input.ExecuteWorkflow ||
                    this.ExecuteWorkflow.Equals(input.ExecuteWorkflow)
                ) && 
                (
                    this.PaymentMethodId == input.PaymentMethodId ||
                    (this.PaymentMethodId != null &&
                    this.PaymentMethodId.Equals(input.PaymentMethodId))
                ) && 
                (
                    this.PaymentProviderName == input.PaymentProviderName ||
                    (this.PaymentProviderName != null &&
                    this.PaymentProviderName.Equals(input.PaymentProviderName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.WorkflowToExecute != null)
                    hashCode = hashCode * 59 + this.WorkflowToExecute.GetHashCode();
                hashCode = hashCode * 59 + this.ExecuteWorkflow.GetHashCode();
                if (this.PaymentMethodId != null)
                    hashCode = hashCode * 59 + this.PaymentMethodId.GetHashCode();
                if (this.PaymentProviderName != null)
                    hashCode = hashCode * 59 + this.PaymentProviderName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
