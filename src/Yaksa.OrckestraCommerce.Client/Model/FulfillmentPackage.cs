/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentPackage
    /// </summary>
    [DataContract(Name = "FulfillmentPackage")]
    public partial class FulfillmentPackage : IEquatable<FulfillmentPackage>, IValidatableObject
    {
        /// <summary>
        /// The carrier manifest requirement.
        /// </summary>
        /// <value>The carrier manifest requirement.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierManifestRequirementEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum Required for value: Required
            /// </summary>
            [EnumMember(Value = "Required")]
            Required = 2,

            /// <summary>
            /// Enum NotRequired for value: NotRequired
            /// </summary>
            [EnumMember(Value = "NotRequired")]
            NotRequired = 3,

            /// <summary>
            /// Enum Excluded for value: Excluded
            /// </summary>
            [EnumMember(Value = "Excluded")]
            Excluded = 4

        }


        /// <summary>
        /// The carrier manifest requirement.
        /// </summary>
        /// <value>The carrier manifest requirement.</value>
        [DataMember(Name = "carrierManifestRequirement", EmitDefaultValue = false)]
        public CarrierManifestRequirementEnum? CarrierManifestRequirement { get; set; }
        /// <summary>
        /// The carrier manifest status.
        /// </summary>
        /// <value>The carrier manifest status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarrierManifestStatusEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,

            /// <summary>
            /// Enum Manifested for value: Manifested
            /// </summary>
            [EnumMember(Value = "Manifested")]
            Manifested = 3,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 4

        }


        /// <summary>
        /// The carrier manifest status.
        /// </summary>
        /// <value>The carrier manifest status.</value>
        [DataMember(Name = "carrierManifestStatus", EmitDefaultValue = false)]
        public CarrierManifestStatusEnum? CarrierManifestStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentPackage" /> class.
        /// </summary>
        /// <param name="carrierAccountIdOutbound">The carrier account id used for the package on outbound..</param>
        /// <param name="carrierAccountNameOutbound">The carrier account name used for the package on outbound..</param>
        /// <param name="carrierManifestRequirement">The carrier manifest requirement..</param>
        /// <param name="carrierManifestStatus">The carrier manifest status..</param>
        /// <param name="carrierNameOutbound">The carrier name used for the package on outbound..</param>
        /// <param name="carrierServiceLevelOutbound">The carrier sevice level used for the package on outbound..</param>
        /// <param name="created">The date the fulfillment package was created..</param>
        /// <param name="createdBy">The identifier of the operator who created the fulfillment package..</param>
        /// <param name="fulfillmentPackageItems">The fulfillment package items..</param>
        /// <param name="fulfillmentPackageType">fulfillmentPackageType.</param>
        /// <param name="fulfillmentPackageTypeId">The fulfillment package type identifier..</param>
        /// <param name="id">The fulfillment package identifier..</param>
        /// <param name="lastModified">The date that the last modification was applied to the fulfillment package..</param>
        /// <param name="lastModifiedBy">The identifier of the operator who last modified the fulfillment package..</param>
        /// <param name="manifested">The date the package was manifested..</param>
        /// <param name="manifestedBy">The identifier of the operator who manifested the fulfillment package..</param>
        /// <param name="manifestReferenceId">The manifest reference id..</param>
        /// <param name="manifestUrl">The manifest url..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="returnTrackingNumber">The return tracking number..</param>
        /// <param name="returnTrackingReferenceId">The return tracking reference id..</param>
        /// <param name="returnTrackingUrl">The return tracking url..</param>
        /// <param name="scopeId">The scope identifier..</param>
        /// <param name="serialShippingContainerCode">The serial shipping container code (SSCC)..</param>
        /// <param name="total">The total amount value for the fulfillment package..</param>
        /// <param name="trackingNumber">The tracking number..</param>
        /// <param name="trackingReferenceId">The tracking reference id..</param>
        /// <param name="trackingUrl">The tracking url..</param>
        /// <param name="weight">The package weight..</param>
        /// <param name="weightUOM">The package unit of measure for weight..</param>
        public FulfillmentPackage(string carrierAccountIdOutbound = default(string), string carrierAccountNameOutbound = default(string), CarrierManifestRequirementEnum? carrierManifestRequirement = default(CarrierManifestRequirementEnum?), CarrierManifestStatusEnum? carrierManifestStatus = default(CarrierManifestStatusEnum?), string carrierNameOutbound = default(string), string carrierServiceLevelOutbound = default(string), DateTime created = default(DateTime), string createdBy = default(string), List<FulfillmentPackageItem> fulfillmentPackageItems = default(List<FulfillmentPackageItem>), FulfillmentPackageType fulfillmentPackageType = default(FulfillmentPackageType), string fulfillmentPackageTypeId = default(string), string id = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), DateTime manifested = default(DateTime), string manifestedBy = default(string), string manifestReferenceId = default(string), string manifestUrl = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string returnTrackingNumber = default(string), string returnTrackingReferenceId = default(string), string returnTrackingUrl = default(string), string scopeId = default(string), string serialShippingContainerCode = default(string), double total = default(double), string trackingNumber = default(string), string trackingReferenceId = default(string), string trackingUrl = default(string), double weight = default(double), string weightUOM = default(string))
        {
            this.CarrierAccountIdOutbound = carrierAccountIdOutbound;
            this.CarrierAccountNameOutbound = carrierAccountNameOutbound;
            this.CarrierManifestRequirement = carrierManifestRequirement;
            this.CarrierManifestStatus = carrierManifestStatus;
            this.CarrierNameOutbound = carrierNameOutbound;
            this.CarrierServiceLevelOutbound = carrierServiceLevelOutbound;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.FulfillmentPackageItems = fulfillmentPackageItems;
            this.FulfillmentPackageType = fulfillmentPackageType;
            this.FulfillmentPackageTypeId = fulfillmentPackageTypeId;
            this.Id = id;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.Manifested = manifested;
            this.ManifestedBy = manifestedBy;
            this.ManifestReferenceId = manifestReferenceId;
            this.ManifestUrl = manifestUrl;
            this.PropertyBag = propertyBag;
            this.ReturnTrackingNumber = returnTrackingNumber;
            this.ReturnTrackingReferenceId = returnTrackingReferenceId;
            this.ReturnTrackingUrl = returnTrackingUrl;
            this.ScopeId = scopeId;
            this.SerialShippingContainerCode = serialShippingContainerCode;
            this.Total = total;
            this.TrackingNumber = trackingNumber;
            this.TrackingReferenceId = trackingReferenceId;
            this.TrackingUrl = trackingUrl;
            this.Weight = weight;
            this.WeightUOM = weightUOM;
        }

        /// <summary>
        /// The carrier account id used for the package on outbound.
        /// </summary>
        /// <value>The carrier account id used for the package on outbound.</value>
        [DataMember(Name = "carrierAccountIdOutbound", EmitDefaultValue = false)]
        public string CarrierAccountIdOutbound { get; set; }

        /// <summary>
        /// The carrier account name used for the package on outbound.
        /// </summary>
        /// <value>The carrier account name used for the package on outbound.</value>
        [DataMember(Name = "carrierAccountNameOutbound", EmitDefaultValue = false)]
        public string CarrierAccountNameOutbound { get; set; }

        /// <summary>
        /// The carrier name used for the package on outbound.
        /// </summary>
        /// <value>The carrier name used for the package on outbound.</value>
        [DataMember(Name = "carrierNameOutbound", EmitDefaultValue = false)]
        public string CarrierNameOutbound { get; set; }

        /// <summary>
        /// The carrier sevice level used for the package on outbound.
        /// </summary>
        /// <value>The carrier sevice level used for the package on outbound.</value>
        [DataMember(Name = "carrierServiceLevelOutbound", EmitDefaultValue = false)]
        public string CarrierServiceLevelOutbound { get; set; }

        /// <summary>
        /// The date the fulfillment package was created.
        /// </summary>
        /// <value>The date the fulfillment package was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The identifier of the operator who created the fulfillment package.
        /// </summary>
        /// <value>The identifier of the operator who created the fulfillment package.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The fulfillment package items.
        /// </summary>
        /// <value>The fulfillment package items.</value>
        [DataMember(Name = "fulfillmentPackageItems", EmitDefaultValue = false)]
        public List<FulfillmentPackageItem> FulfillmentPackageItems { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentPackageType
        /// </summary>
        [DataMember(Name = "fulfillmentPackageType", EmitDefaultValue = false)]
        public FulfillmentPackageType FulfillmentPackageType { get; set; }

        /// <summary>
        /// The fulfillment package type identifier.
        /// </summary>
        /// <value>The fulfillment package type identifier.</value>
        [DataMember(Name = "fulfillmentPackageTypeId", EmitDefaultValue = false)]
        public string FulfillmentPackageTypeId { get; set; }

        /// <summary>
        /// The fulfillment package identifier.
        /// </summary>
        /// <value>The fulfillment package identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The date that the last modification was applied to the fulfillment package.
        /// </summary>
        /// <value>The date that the last modification was applied to the fulfillment package.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The identifier of the operator who last modified the fulfillment package.
        /// </summary>
        /// <value>The identifier of the operator who last modified the fulfillment package.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The date the package was manifested.
        /// </summary>
        /// <value>The date the package was manifested.</value>
        [DataMember(Name = "manifested", EmitDefaultValue = false)]
        public DateTime Manifested { get; set; }

        /// <summary>
        /// The identifier of the operator who manifested the fulfillment package.
        /// </summary>
        /// <value>The identifier of the operator who manifested the fulfillment package.</value>
        [DataMember(Name = "manifestedBy", EmitDefaultValue = false)]
        public string ManifestedBy { get; set; }

        /// <summary>
        /// The manifest reference id.
        /// </summary>
        /// <value>The manifest reference id.</value>
        [DataMember(Name = "manifestReferenceId", EmitDefaultValue = false)]
        public string ManifestReferenceId { get; set; }

        /// <summary>
        /// The manifest url.
        /// </summary>
        /// <value>The manifest url.</value>
        [DataMember(Name = "manifestUrl", EmitDefaultValue = false)]
        public string ManifestUrl { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The return tracking number.
        /// </summary>
        /// <value>The return tracking number.</value>
        [DataMember(Name = "returnTrackingNumber", EmitDefaultValue = false)]
        public string ReturnTrackingNumber { get; set; }

        /// <summary>
        /// The return tracking reference id.
        /// </summary>
        /// <value>The return tracking reference id.</value>
        [DataMember(Name = "returnTrackingReferenceId", EmitDefaultValue = false)]
        public string ReturnTrackingReferenceId { get; set; }

        /// <summary>
        /// The return tracking url.
        /// </summary>
        /// <value>The return tracking url.</value>
        [DataMember(Name = "returnTrackingUrl", EmitDefaultValue = false)]
        public string ReturnTrackingUrl { get; set; }

        /// <summary>
        /// The scope identifier.
        /// </summary>
        /// <value>The scope identifier.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The serial shipping container code (SSCC).
        /// </summary>
        /// <value>The serial shipping container code (SSCC).</value>
        [DataMember(Name = "serialShippingContainerCode", EmitDefaultValue = false)]
        public string SerialShippingContainerCode { get; set; }

        /// <summary>
        /// The total amount value for the fulfillment package.
        /// </summary>
        /// <value>The total amount value for the fulfillment package.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// The tracking number.
        /// </summary>
        /// <value>The tracking number.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// The tracking reference id.
        /// </summary>
        /// <value>The tracking reference id.</value>
        [DataMember(Name = "trackingReferenceId", EmitDefaultValue = false)]
        public string TrackingReferenceId { get; set; }

        /// <summary>
        /// The tracking url.
        /// </summary>
        /// <value>The tracking url.</value>
        [DataMember(Name = "trackingUrl", EmitDefaultValue = false)]
        public string TrackingUrl { get; set; }

        /// <summary>
        /// The package weight.
        /// </summary>
        /// <value>The package weight.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public double Weight { get; set; }

        /// <summary>
        /// The package unit of measure for weight.
        /// </summary>
        /// <value>The package unit of measure for weight.</value>
        [DataMember(Name = "weightUOM", EmitDefaultValue = false)]
        public string WeightUOM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentPackage {\n");
            sb.Append("  CarrierAccountIdOutbound: ").Append(CarrierAccountIdOutbound).Append("\n");
            sb.Append("  CarrierAccountNameOutbound: ").Append(CarrierAccountNameOutbound).Append("\n");
            sb.Append("  CarrierManifestRequirement: ").Append(CarrierManifestRequirement).Append("\n");
            sb.Append("  CarrierManifestStatus: ").Append(CarrierManifestStatus).Append("\n");
            sb.Append("  CarrierNameOutbound: ").Append(CarrierNameOutbound).Append("\n");
            sb.Append("  CarrierServiceLevelOutbound: ").Append(CarrierServiceLevelOutbound).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  FulfillmentPackageItems: ").Append(FulfillmentPackageItems).Append("\n");
            sb.Append("  FulfillmentPackageType: ").Append(FulfillmentPackageType).Append("\n");
            sb.Append("  FulfillmentPackageTypeId: ").Append(FulfillmentPackageTypeId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  Manifested: ").Append(Manifested).Append("\n");
            sb.Append("  ManifestedBy: ").Append(ManifestedBy).Append("\n");
            sb.Append("  ManifestReferenceId: ").Append(ManifestReferenceId).Append("\n");
            sb.Append("  ManifestUrl: ").Append(ManifestUrl).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  ReturnTrackingNumber: ").Append(ReturnTrackingNumber).Append("\n");
            sb.Append("  ReturnTrackingReferenceId: ").Append(ReturnTrackingReferenceId).Append("\n");
            sb.Append("  ReturnTrackingUrl: ").Append(ReturnTrackingUrl).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  SerialShippingContainerCode: ").Append(SerialShippingContainerCode).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  TrackingReferenceId: ").Append(TrackingReferenceId).Append("\n");
            sb.Append("  TrackingUrl: ").Append(TrackingUrl).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightUOM: ").Append(WeightUOM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentPackage);
        }

        /// <summary>
        /// Returns true if FulfillmentPackage instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentPackage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentPackage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CarrierAccountIdOutbound == input.CarrierAccountIdOutbound ||
                    (this.CarrierAccountIdOutbound != null &&
                    this.CarrierAccountIdOutbound.Equals(input.CarrierAccountIdOutbound))
                ) && 
                (
                    this.CarrierAccountNameOutbound == input.CarrierAccountNameOutbound ||
                    (this.CarrierAccountNameOutbound != null &&
                    this.CarrierAccountNameOutbound.Equals(input.CarrierAccountNameOutbound))
                ) && 
                (
                    this.CarrierManifestRequirement == input.CarrierManifestRequirement ||
                    this.CarrierManifestRequirement.Equals(input.CarrierManifestRequirement)
                ) && 
                (
                    this.CarrierManifestStatus == input.CarrierManifestStatus ||
                    this.CarrierManifestStatus.Equals(input.CarrierManifestStatus)
                ) && 
                (
                    this.CarrierNameOutbound == input.CarrierNameOutbound ||
                    (this.CarrierNameOutbound != null &&
                    this.CarrierNameOutbound.Equals(input.CarrierNameOutbound))
                ) && 
                (
                    this.CarrierServiceLevelOutbound == input.CarrierServiceLevelOutbound ||
                    (this.CarrierServiceLevelOutbound != null &&
                    this.CarrierServiceLevelOutbound.Equals(input.CarrierServiceLevelOutbound))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.FulfillmentPackageItems == input.FulfillmentPackageItems ||
                    this.FulfillmentPackageItems != null &&
                    input.FulfillmentPackageItems != null &&
                    this.FulfillmentPackageItems.SequenceEqual(input.FulfillmentPackageItems)
                ) && 
                (
                    this.FulfillmentPackageType == input.FulfillmentPackageType ||
                    (this.FulfillmentPackageType != null &&
                    this.FulfillmentPackageType.Equals(input.FulfillmentPackageType))
                ) && 
                (
                    this.FulfillmentPackageTypeId == input.FulfillmentPackageTypeId ||
                    (this.FulfillmentPackageTypeId != null &&
                    this.FulfillmentPackageTypeId.Equals(input.FulfillmentPackageTypeId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.Manifested == input.Manifested ||
                    (this.Manifested != null &&
                    this.Manifested.Equals(input.Manifested))
                ) && 
                (
                    this.ManifestedBy == input.ManifestedBy ||
                    (this.ManifestedBy != null &&
                    this.ManifestedBy.Equals(input.ManifestedBy))
                ) && 
                (
                    this.ManifestReferenceId == input.ManifestReferenceId ||
                    (this.ManifestReferenceId != null &&
                    this.ManifestReferenceId.Equals(input.ManifestReferenceId))
                ) && 
                (
                    this.ManifestUrl == input.ManifestUrl ||
                    (this.ManifestUrl != null &&
                    this.ManifestUrl.Equals(input.ManifestUrl))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.ReturnTrackingNumber == input.ReturnTrackingNumber ||
                    (this.ReturnTrackingNumber != null &&
                    this.ReturnTrackingNumber.Equals(input.ReturnTrackingNumber))
                ) && 
                (
                    this.ReturnTrackingReferenceId == input.ReturnTrackingReferenceId ||
                    (this.ReturnTrackingReferenceId != null &&
                    this.ReturnTrackingReferenceId.Equals(input.ReturnTrackingReferenceId))
                ) && 
                (
                    this.ReturnTrackingUrl == input.ReturnTrackingUrl ||
                    (this.ReturnTrackingUrl != null &&
                    this.ReturnTrackingUrl.Equals(input.ReturnTrackingUrl))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.SerialShippingContainerCode == input.SerialShippingContainerCode ||
                    (this.SerialShippingContainerCode != null &&
                    this.SerialShippingContainerCode.Equals(input.SerialShippingContainerCode))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.TrackingReferenceId == input.TrackingReferenceId ||
                    (this.TrackingReferenceId != null &&
                    this.TrackingReferenceId.Equals(input.TrackingReferenceId))
                ) && 
                (
                    this.TrackingUrl == input.TrackingUrl ||
                    (this.TrackingUrl != null &&
                    this.TrackingUrl.Equals(input.TrackingUrl))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.WeightUOM == input.WeightUOM ||
                    (this.WeightUOM != null &&
                    this.WeightUOM.Equals(input.WeightUOM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierAccountIdOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierAccountIdOutbound.GetHashCode();
                if (this.CarrierAccountNameOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierAccountNameOutbound.GetHashCode();
                hashCode = hashCode * 59 + this.CarrierManifestRequirement.GetHashCode();
                hashCode = hashCode * 59 + this.CarrierManifestStatus.GetHashCode();
                if (this.CarrierNameOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierNameOutbound.GetHashCode();
                if (this.CarrierServiceLevelOutbound != null)
                    hashCode = hashCode * 59 + this.CarrierServiceLevelOutbound.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.FulfillmentPackageItems != null)
                    hashCode = hashCode * 59 + this.FulfillmentPackageItems.GetHashCode();
                if (this.FulfillmentPackageType != null)
                    hashCode = hashCode * 59 + this.FulfillmentPackageType.GetHashCode();
                if (this.FulfillmentPackageTypeId != null)
                    hashCode = hashCode * 59 + this.FulfillmentPackageTypeId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.Manifested != null)
                    hashCode = hashCode * 59 + this.Manifested.GetHashCode();
                if (this.ManifestedBy != null)
                    hashCode = hashCode * 59 + this.ManifestedBy.GetHashCode();
                if (this.ManifestReferenceId != null)
                    hashCode = hashCode * 59 + this.ManifestReferenceId.GetHashCode();
                if (this.ManifestUrl != null)
                    hashCode = hashCode * 59 + this.ManifestUrl.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.ReturnTrackingNumber != null)
                    hashCode = hashCode * 59 + this.ReturnTrackingNumber.GetHashCode();
                if (this.ReturnTrackingReferenceId != null)
                    hashCode = hashCode * 59 + this.ReturnTrackingReferenceId.GetHashCode();
                if (this.ReturnTrackingUrl != null)
                    hashCode = hashCode * 59 + this.ReturnTrackingUrl.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.SerialShippingContainerCode != null)
                    hashCode = hashCode * 59 + this.SerialShippingContainerCode.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.TrackingReferenceId != null)
                    hashCode = hashCode * 59 + this.TrackingReferenceId.GetHashCode();
                if (this.TrackingUrl != null)
                    hashCode = hashCode * 59 + this.TrackingUrl.GetHashCode();
                hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightUOM != null)
                    hashCode = hashCode * 59 + this.WeightUOM.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
