/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// SlotReservationSummary
    /// </summary>
    [DataContract(Name = "SlotReservationSummary")]
    public partial class SlotReservationSummary : IEquatable<SlotReservationSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SlotReservationSummary" /> class.
        /// </summary>
        /// <param name="calculatedAvailable">The calculated availability for the timeslot. (Quota - TentativeTotal - ConfirmedTotal)..</param>
        /// <param name="confirmedTotal">The total confirmed reservations for the timeslot..</param>
        /// <param name="maximumReservations">The maximum reservations for the timeslot. (Based on Quota from timeslot)..</param>
        /// <param name="tentativeTotal">The total tentative reservations for the timeslot..</param>
        public SlotReservationSummary(int calculatedAvailable = default(int), int confirmedTotal = default(int), int maximumReservations = default(int), int tentativeTotal = default(int))
        {
            this.CalculatedAvailable = calculatedAvailable;
            this.ConfirmedTotal = confirmedTotal;
            this.MaximumReservations = maximumReservations;
            this.TentativeTotal = tentativeTotal;
        }

        /// <summary>
        /// The calculated availability for the timeslot. (Quota - TentativeTotal - ConfirmedTotal).
        /// </summary>
        /// <value>The calculated availability for the timeslot. (Quota - TentativeTotal - ConfirmedTotal).</value>
        [DataMember(Name = "calculatedAvailable", EmitDefaultValue = false)]
        public int CalculatedAvailable { get; set; }

        /// <summary>
        /// The total confirmed reservations for the timeslot.
        /// </summary>
        /// <value>The total confirmed reservations for the timeslot.</value>
        [DataMember(Name = "confirmedTotal", EmitDefaultValue = false)]
        public int ConfirmedTotal { get; set; }

        /// <summary>
        /// The maximum reservations for the timeslot. (Based on Quota from timeslot).
        /// </summary>
        /// <value>The maximum reservations for the timeslot. (Based on Quota from timeslot).</value>
        [DataMember(Name = "maximumReservations", EmitDefaultValue = false)]
        public int MaximumReservations { get; set; }

        /// <summary>
        /// The total tentative reservations for the timeslot.
        /// </summary>
        /// <value>The total tentative reservations for the timeslot.</value>
        [DataMember(Name = "tentativeTotal", EmitDefaultValue = false)]
        public int TentativeTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SlotReservationSummary {\n");
            sb.Append("  CalculatedAvailable: ").Append(CalculatedAvailable).Append("\n");
            sb.Append("  ConfirmedTotal: ").Append(ConfirmedTotal).Append("\n");
            sb.Append("  MaximumReservations: ").Append(MaximumReservations).Append("\n");
            sb.Append("  TentativeTotal: ").Append(TentativeTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SlotReservationSummary);
        }

        /// <summary>
        /// Returns true if SlotReservationSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of SlotReservationSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SlotReservationSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CalculatedAvailable == input.CalculatedAvailable ||
                    this.CalculatedAvailable.Equals(input.CalculatedAvailable)
                ) && 
                (
                    this.ConfirmedTotal == input.ConfirmedTotal ||
                    this.ConfirmedTotal.Equals(input.ConfirmedTotal)
                ) && 
                (
                    this.MaximumReservations == input.MaximumReservations ||
                    this.MaximumReservations.Equals(input.MaximumReservations)
                ) && 
                (
                    this.TentativeTotal == input.TentativeTotal ||
                    this.TentativeTotal.Equals(input.TentativeTotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CalculatedAvailable.GetHashCode();
                hashCode = hashCode * 59 + this.ConfirmedTotal.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumReservations.GetHashCode();
                hashCode = hashCode * 59 + this.TentativeTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
