/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// RewardDefinition
    /// </summary>
    [DataContract(Name = "RewardDefinition")]
    public partial class RewardDefinition : IEquatable<RewardDefinition>, IValidatableObject
    {
        /// <summary>
        /// the disambiguation method.
        /// </summary>
        /// <value>the disambiguation method.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DisambiguationEnum
        {
            /// <summary>
            /// Enum NotSpecified for value: NotSpecified
            /// </summary>
            [EnumMember(Value = "NotSpecified")]
            NotSpecified = 1,

            /// <summary>
            /// Enum LessExpensive for value: LessExpensive
            /// </summary>
            [EnumMember(Value = "LessExpensive")]
            LessExpensive = 2,

            /// <summary>
            /// Enum MoreExpensive for value: MoreExpensive
            /// </summary>
            [EnumMember(Value = "MoreExpensive")]
            MoreExpensive = 3

        }


        /// <summary>
        /// the disambiguation method.
        /// </summary>
        /// <value>the disambiguation method.</value>
        [DataMember(Name = "disambiguation", EmitDefaultValue = false)]
        public DisambiguationEnum? Disambiguation { get; set; }
        /// <summary>
        /// the level of the reward: on which part of the order the promotion is applied.
        /// </summary>
        /// <value>the level of the reward: on which part of the order the promotion is applied.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            /// <summary>
            /// Enum NotSpecified for value: NotSpecified
            /// </summary>
            [EnumMember(Value = "NotSpecified")]
            NotSpecified = 1,

            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 2,

            /// <summary>
            /// Enum Order for value: Order
            /// </summary>
            [EnumMember(Value = "Order")]
            Order = 3,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 4,

            /// <summary>
            /// Enum Bundle for value: Bundle
            /// </summary>
            [EnumMember(Value = "Bundle")]
            Bundle = 5,

            /// <summary>
            /// Enum Payment for value: Payment
            /// </summary>
            [EnumMember(Value = "Payment")]
            Payment = 6,

            /// <summary>
            /// Enum Gift for value: Gift
            /// </summary>
            [EnumMember(Value = "Gift")]
            Gift = 7

        }


        /// <summary>
        /// the level of the reward: on which part of the order the promotion is applied.
        /// </summary>
        /// <value>the level of the reward: on which part of the order the promotion is applied.</value>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public LevelEnum? Level { get; set; }
        /// <summary>
        /// The type of reward. (e.g: Discount or External)
        /// </summary>
        /// <value>The type of reward. (e.g: Discount or External)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RewardTypeEnum
        {
            /// <summary>
            /// Enum Discount for value: Discount
            /// </summary>
            [EnumMember(Value = "Discount")]
            Discount = 1,

            /// <summary>
            /// Enum External for value: External
            /// </summary>
            [EnumMember(Value = "External")]
            External = 2,

            /// <summary>
            /// Enum Gift for value: Gift
            /// </summary>
            [EnumMember(Value = "Gift")]
            Gift = 3

        }


        /// <summary>
        /// The type of reward. (e.g: Discount or External)
        /// </summary>
        /// <value>The type of reward. (e.g: Discount or External)</value>
        [DataMember(Name = "rewardType", EmitDefaultValue = false)]
        public RewardTypeEnum? RewardType { get; set; }
        /// <summary>
        /// the type of the value of the reward: how the Value will be applied to the RewardTargets.
        /// </summary>
        /// <value>the type of the value of the reward: how the Value will be applied to the RewardTargets.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValueTypeEnum
        {
            /// <summary>
            /// Enum Amount for value: Amount
            /// </summary>
            [EnumMember(Value = "Amount")]
            Amount = 1,

            /// <summary>
            /// Enum Percentage for value: Percentage
            /// </summary>
            [EnumMember(Value = "Percentage")]
            Percentage = 2,

            /// <summary>
            /// Enum FixedPrice for value: FixedPrice
            /// </summary>
            [EnumMember(Value = "FixedPrice")]
            FixedPrice = 3

        }


        /// <summary>
        /// the type of the value of the reward: how the Value will be applied to the RewardTargets.
        /// </summary>
        /// <value>the type of the value of the reward: how the Value will be applied to the RewardTargets.</value>
        [DataMember(Name = "valueType", EmitDefaultValue = false)]
        public ValueTypeEnum? ValueType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RewardDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardDefinition" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="consumabilityRules">the rules used to determine whether an entity should be used when validating the conditions of this promotion..</param>
        /// <param name="disambiguation">the disambiguation method..</param>
        /// <param name="excludeDiscountedItems">a flag indicating whether discounted items should be excluded when evaluating this reward..</param>
        /// <param name="level">the level of the reward: on which part of the order the promotion is applied..</param>
        /// <param name="matchQuantityOrLess">the value indicating whether the reward condition can be less than the quantity specified..</param>
        /// <param name="matchQuantityOrMore">the value indicating whether the reward can be more than the quantity specified..</param>
        /// <param name="quantity">the quantity of targets on which the reward will apply..</param>
        /// <param name="rewardTargets">a list of reward targets on which the reward will be applied. .</param>
        /// <param name="rewardType">The type of reward. (e.g: Discount or External).</param>
        /// <param name="unitOfMeasure">the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the reward..</param>
        /// <param name="useConsumedItemsFromConditions">the value indicating whether the reward can use items consumed in the conditions..</param>
        /// <param name="value">the value of the reward..</param>
        /// <param name="valueType">the type of the value of the reward: how the Value will be applied to the RewardTargets..</param>
        public RewardDefinition(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), List<ConsumabilityRule> consumabilityRules = default(List<ConsumabilityRule>), DisambiguationEnum? disambiguation = default(DisambiguationEnum?), bool excludeDiscountedItems = default(bool), LevelEnum? level = default(LevelEnum?), bool matchQuantityOrLess = default(bool), bool matchQuantityOrMore = default(bool), double quantity = default(double), List<RewardTarget> rewardTargets = default(List<RewardTarget>), RewardTypeEnum? rewardType = default(RewardTypeEnum?), string unitOfMeasure = default(string), bool useConsumedItemsFromConditions = default(bool), double value = default(double), ValueTypeEnum? valueType = default(ValueTypeEnum?))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for RewardDefinition and cannot be null");
            this.PropertyBag = propertyBag;
            this.ConsumabilityRules = consumabilityRules;
            this.Disambiguation = disambiguation;
            this.ExcludeDiscountedItems = excludeDiscountedItems;
            this.Level = level;
            this.MatchQuantityOrLess = matchQuantityOrLess;
            this.MatchQuantityOrMore = matchQuantityOrMore;
            this.Quantity = quantity;
            this.RewardTargets = rewardTargets;
            this.RewardType = rewardType;
            this.UnitOfMeasure = unitOfMeasure;
            this.UseConsumedItemsFromConditions = useConsumedItemsFromConditions;
            this.Value = value;
            this.ValueType = valueType;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// the rules used to determine whether an entity should be used when validating the conditions of this promotion.
        /// </summary>
        /// <value>the rules used to determine whether an entity should be used when validating the conditions of this promotion.</value>
        [DataMember(Name = "consumabilityRules", EmitDefaultValue = false)]
        public List<ConsumabilityRule> ConsumabilityRules { get; set; }

        /// <summary>
        /// a flag indicating whether discounted items should be excluded when evaluating this reward.
        /// </summary>
        /// <value>a flag indicating whether discounted items should be excluded when evaluating this reward.</value>
        [DataMember(Name = "excludeDiscountedItems", EmitDefaultValue = true)]
        public bool ExcludeDiscountedItems { get; set; }

        /// <summary>
        /// the value indicating whether the reward condition can be less than the quantity specified.
        /// </summary>
        /// <value>the value indicating whether the reward condition can be less than the quantity specified.</value>
        [DataMember(Name = "matchQuantityOrLess", EmitDefaultValue = true)]
        public bool MatchQuantityOrLess { get; set; }

        /// <summary>
        /// the value indicating whether the reward can be more than the quantity specified.
        /// </summary>
        /// <value>the value indicating whether the reward can be more than the quantity specified.</value>
        [DataMember(Name = "matchQuantityOrMore", EmitDefaultValue = true)]
        public bool MatchQuantityOrMore { get; set; }

        /// <summary>
        /// the quantity of targets on which the reward will apply.
        /// </summary>
        /// <value>the quantity of targets on which the reward will apply.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// a list of reward targets on which the reward will be applied. 
        /// </summary>
        /// <value>a list of reward targets on which the reward will be applied. </value>
        [DataMember(Name = "rewardTargets", EmitDefaultValue = false)]
        public List<RewardTarget> RewardTargets { get; set; }

        /// <summary>
        /// the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the reward.
        /// </summary>
        /// <value>the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the reward.</value>
        [DataMember(Name = "unitOfMeasure", EmitDefaultValue = false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// the value indicating whether the reward can use items consumed in the conditions.
        /// </summary>
        /// <value>the value indicating whether the reward can use items consumed in the conditions.</value>
        [DataMember(Name = "useConsumedItemsFromConditions", EmitDefaultValue = true)]
        public bool UseConsumedItemsFromConditions { get; set; }

        /// <summary>
        /// the value of the reward.
        /// </summary>
        /// <value>the value of the reward.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RewardDefinition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  ConsumabilityRules: ").Append(ConsumabilityRules).Append("\n");
            sb.Append("  Disambiguation: ").Append(Disambiguation).Append("\n");
            sb.Append("  ExcludeDiscountedItems: ").Append(ExcludeDiscountedItems).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  MatchQuantityOrLess: ").Append(MatchQuantityOrLess).Append("\n");
            sb.Append("  MatchQuantityOrMore: ").Append(MatchQuantityOrMore).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RewardTargets: ").Append(RewardTargets).Append("\n");
            sb.Append("  RewardType: ").Append(RewardType).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  UseConsumedItemsFromConditions: ").Append(UseConsumedItemsFromConditions).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueType: ").Append(ValueType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RewardDefinition);
        }

        /// <summary>
        /// Returns true if RewardDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of RewardDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RewardDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.ConsumabilityRules == input.ConsumabilityRules ||
                    this.ConsumabilityRules != null &&
                    input.ConsumabilityRules != null &&
                    this.ConsumabilityRules.SequenceEqual(input.ConsumabilityRules)
                ) && 
                (
                    this.Disambiguation == input.Disambiguation ||
                    this.Disambiguation.Equals(input.Disambiguation)
                ) && 
                (
                    this.ExcludeDiscountedItems == input.ExcludeDiscountedItems ||
                    this.ExcludeDiscountedItems.Equals(input.ExcludeDiscountedItems)
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.MatchQuantityOrLess == input.MatchQuantityOrLess ||
                    this.MatchQuantityOrLess.Equals(input.MatchQuantityOrLess)
                ) && 
                (
                    this.MatchQuantityOrMore == input.MatchQuantityOrMore ||
                    this.MatchQuantityOrMore.Equals(input.MatchQuantityOrMore)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.RewardTargets == input.RewardTargets ||
                    this.RewardTargets != null &&
                    input.RewardTargets != null &&
                    this.RewardTargets.SequenceEqual(input.RewardTargets)
                ) && 
                (
                    this.RewardType == input.RewardType ||
                    this.RewardType.Equals(input.RewardType)
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.UseConsumedItemsFromConditions == input.UseConsumedItemsFromConditions ||
                    this.UseConsumedItemsFromConditions.Equals(input.UseConsumedItemsFromConditions)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.ValueType == input.ValueType ||
                    this.ValueType.Equals(input.ValueType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.ConsumabilityRules != null)
                    hashCode = hashCode * 59 + this.ConsumabilityRules.GetHashCode();
                hashCode = hashCode * 59 + this.Disambiguation.GetHashCode();
                hashCode = hashCode * 59 + this.ExcludeDiscountedItems.GetHashCode();
                hashCode = hashCode * 59 + this.Level.GetHashCode();
                hashCode = hashCode * 59 + this.MatchQuantityOrLess.GetHashCode();
                hashCode = hashCode * 59 + this.MatchQuantityOrMore.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RewardTargets != null)
                    hashCode = hashCode * 59 + this.RewardTargets.GetHashCode();
                hashCode = hashCode * 59 + this.RewardType.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                hashCode = hashCode * 59 + this.UseConsumedItemsFromConditions.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.ValueType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
