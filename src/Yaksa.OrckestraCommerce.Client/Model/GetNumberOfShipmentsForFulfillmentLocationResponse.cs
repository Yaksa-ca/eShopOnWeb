/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// GetNumberOfShipmentsForFulfillmentLocationResponse
    /// </summary>
    [DataContract(Name = "GetNumberOfShipmentsForFulfillmentLocationResponse")]
    public partial class GetNumberOfShipmentsForFulfillmentLocationResponse : IEquatable<GetNumberOfShipmentsForFulfillmentLocationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetNumberOfShipmentsForFulfillmentLocationResponse" /> class.
        /// </summary>
        /// <param name="statuses">The number of shipments by status..</param>
        public GetNumberOfShipmentsForFulfillmentLocationResponse(List<NumberOfShipmentForStatus> statuses = default(List<NumberOfShipmentForStatus>))
        {
            this.Statuses = statuses;
        }

        /// <summary>
        /// The number of shipments by status.
        /// </summary>
        /// <value>The number of shipments by status.</value>
        [DataMember(Name = "statuses", EmitDefaultValue = false)]
        public List<NumberOfShipmentForStatus> Statuses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetNumberOfShipmentsForFulfillmentLocationResponse {\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetNumberOfShipmentsForFulfillmentLocationResponse);
        }

        /// <summary>
        /// Returns true if GetNumberOfShipmentsForFulfillmentLocationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetNumberOfShipmentsForFulfillmentLocationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetNumberOfShipmentsForFulfillmentLocationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses != null &&
                    input.Statuses != null &&
                    this.Statuses.SequenceEqual(input.Statuses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Statuses != null)
                    hashCode = hashCode * 59 + this.Statuses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
