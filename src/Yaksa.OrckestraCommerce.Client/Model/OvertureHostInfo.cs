/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// OvertureHostInfo
    /// </summary>
    [DataContract(Name = "OvertureHostInfo")]
    public partial class OvertureHostInfo : IEquatable<OvertureHostInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OvertureHostInfo" /> class.
        /// </summary>
        /// <param name="serverName">serverName.</param>
        /// <param name="environment">environment.</param>
        /// <param name="hostname">hostname.</param>
        /// <param name="variation">variation.</param>
        /// <param name="overtureVersion">overtureVersion.</param>
        /// <param name="serviceStackVersion">serviceStackVersion.</param>
        /// <param name="dbStatuses">dbStatuses.</param>
        /// <param name="blobStorageStatus">blobStorageStatus.</param>
        /// <param name="overturePlugins">overturePlugins.</param>
        /// <param name="serviceStackPlugins">serviceStackPlugins.</param>
        public OvertureHostInfo(string serverName = default(string), string environment = default(string), string hostname = default(string), string variation = default(string), string overtureVersion = default(string), string serviceStackVersion = default(string), List<DbStatus> dbStatuses = default(List<DbStatus>), BlobStorageStatus blobStorageStatus = default(BlobStorageStatus), List<PluginInfo> overturePlugins = default(List<PluginInfo>), List<PluginInfo> serviceStackPlugins = default(List<PluginInfo>))
        {
            this.ServerName = serverName;
            this.Environment = environment;
            this.Hostname = hostname;
            this.Variation = variation;
            this.OvertureVersion = overtureVersion;
            this.ServiceStackVersion = serviceStackVersion;
            this.DbStatuses = dbStatuses;
            this.BlobStorageStatus = blobStorageStatus;
            this.OverturePlugins = overturePlugins;
            this.ServiceStackPlugins = serviceStackPlugins;
        }

        /// <summary>
        /// Gets or Sets ServerName
        /// </summary>
        [DataMember(Name = "serverName", EmitDefaultValue = false)]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public string Environment { get; set; }

        /// <summary>
        /// Gets or Sets Hostname
        /// </summary>
        [DataMember(Name = "hostname", EmitDefaultValue = false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or Sets Variation
        /// </summary>
        [DataMember(Name = "variation", EmitDefaultValue = false)]
        public string Variation { get; set; }

        /// <summary>
        /// Gets or Sets OvertureVersion
        /// </summary>
        [DataMember(Name = "overtureVersion", EmitDefaultValue = false)]
        public string OvertureVersion { get; set; }

        /// <summary>
        /// Gets or Sets ServiceStackVersion
        /// </summary>
        [DataMember(Name = "serviceStackVersion", EmitDefaultValue = false)]
        public string ServiceStackVersion { get; set; }

        /// <summary>
        /// Gets or Sets DbStatuses
        /// </summary>
        [DataMember(Name = "dbStatuses", EmitDefaultValue = false)]
        public List<DbStatus> DbStatuses { get; set; }

        /// <summary>
        /// Gets or Sets BlobStorageStatus
        /// </summary>
        [DataMember(Name = "blobStorageStatus", EmitDefaultValue = false)]
        public BlobStorageStatus BlobStorageStatus { get; set; }

        /// <summary>
        /// Gets or Sets OverturePlugins
        /// </summary>
        [DataMember(Name = "overturePlugins", EmitDefaultValue = false)]
        public List<PluginInfo> OverturePlugins { get; set; }

        /// <summary>
        /// Gets or Sets ServiceStackPlugins
        /// </summary>
        [DataMember(Name = "serviceStackPlugins", EmitDefaultValue = false)]
        public List<PluginInfo> ServiceStackPlugins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OvertureHostInfo {\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Variation: ").Append(Variation).Append("\n");
            sb.Append("  OvertureVersion: ").Append(OvertureVersion).Append("\n");
            sb.Append("  ServiceStackVersion: ").Append(ServiceStackVersion).Append("\n");
            sb.Append("  DbStatuses: ").Append(DbStatuses).Append("\n");
            sb.Append("  BlobStorageStatus: ").Append(BlobStorageStatus).Append("\n");
            sb.Append("  OverturePlugins: ").Append(OverturePlugins).Append("\n");
            sb.Append("  ServiceStackPlugins: ").Append(ServiceStackPlugins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OvertureHostInfo);
        }

        /// <summary>
        /// Returns true if OvertureHostInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of OvertureHostInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OvertureHostInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServerName == input.ServerName ||
                    (this.ServerName != null &&
                    this.ServerName.Equals(input.ServerName))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.Variation == input.Variation ||
                    (this.Variation != null &&
                    this.Variation.Equals(input.Variation))
                ) && 
                (
                    this.OvertureVersion == input.OvertureVersion ||
                    (this.OvertureVersion != null &&
                    this.OvertureVersion.Equals(input.OvertureVersion))
                ) && 
                (
                    this.ServiceStackVersion == input.ServiceStackVersion ||
                    (this.ServiceStackVersion != null &&
                    this.ServiceStackVersion.Equals(input.ServiceStackVersion))
                ) && 
                (
                    this.DbStatuses == input.DbStatuses ||
                    this.DbStatuses != null &&
                    input.DbStatuses != null &&
                    this.DbStatuses.SequenceEqual(input.DbStatuses)
                ) && 
                (
                    this.BlobStorageStatus == input.BlobStorageStatus ||
                    (this.BlobStorageStatus != null &&
                    this.BlobStorageStatus.Equals(input.BlobStorageStatus))
                ) && 
                (
                    this.OverturePlugins == input.OverturePlugins ||
                    this.OverturePlugins != null &&
                    input.OverturePlugins != null &&
                    this.OverturePlugins.SequenceEqual(input.OverturePlugins)
                ) && 
                (
                    this.ServiceStackPlugins == input.ServiceStackPlugins ||
                    this.ServiceStackPlugins != null &&
                    input.ServiceStackPlugins != null &&
                    this.ServiceStackPlugins.SequenceEqual(input.ServiceStackPlugins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServerName != null)
                    hashCode = hashCode * 59 + this.ServerName.GetHashCode();
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.Variation != null)
                    hashCode = hashCode * 59 + this.Variation.GetHashCode();
                if (this.OvertureVersion != null)
                    hashCode = hashCode * 59 + this.OvertureVersion.GetHashCode();
                if (this.ServiceStackVersion != null)
                    hashCode = hashCode * 59 + this.ServiceStackVersion.GetHashCode();
                if (this.DbStatuses != null)
                    hashCode = hashCode * 59 + this.DbStatuses.GetHashCode();
                if (this.BlobStorageStatus != null)
                    hashCode = hashCode * 59 + this.BlobStorageStatus.GetHashCode();
                if (this.OverturePlugins != null)
                    hashCode = hashCode * 59 + this.OverturePlugins.GetHashCode();
                if (this.ServiceStackPlugins != null)
                    hashCode = hashCode * 59 + this.ServiceStackPlugins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
