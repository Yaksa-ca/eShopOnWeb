/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FederationConfiguration
    /// </summary>
    [DataContract(Name = "FederationConfiguration")]
    public partial class FederationConfiguration : IEquatable<FederationConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FederationConfiguration" /> class.
        /// </summary>
        /// <param name="cookieName">Name of cookie carrying the authentication cookie..</param>
        /// <param name="encryptionCertificateThumprint">Thumbprint of the certificate that was used to encrypt the cookie.</param>
        public FederationConfiguration(string cookieName = default(string), string encryptionCertificateThumprint = default(string))
        {
            this.CookieName = cookieName;
            this.EncryptionCertificateThumprint = encryptionCertificateThumprint;
        }

        /// <summary>
        /// Name of cookie carrying the authentication cookie.
        /// </summary>
        /// <value>Name of cookie carrying the authentication cookie.</value>
        [DataMember(Name = "cookieName", EmitDefaultValue = false)]
        public string CookieName { get; set; }

        /// <summary>
        /// Thumbprint of the certificate that was used to encrypt the cookie
        /// </summary>
        /// <value>Thumbprint of the certificate that was used to encrypt the cookie</value>
        [DataMember(Name = "encryptionCertificateThumprint", EmitDefaultValue = false)]
        public string EncryptionCertificateThumprint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FederationConfiguration {\n");
            sb.Append("  CookieName: ").Append(CookieName).Append("\n");
            sb.Append("  EncryptionCertificateThumprint: ").Append(EncryptionCertificateThumprint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FederationConfiguration);
        }

        /// <summary>
        /// Returns true if FederationConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of FederationConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FederationConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CookieName == input.CookieName ||
                    (this.CookieName != null &&
                    this.CookieName.Equals(input.CookieName))
                ) && 
                (
                    this.EncryptionCertificateThumprint == input.EncryptionCertificateThumprint ||
                    (this.EncryptionCertificateThumprint != null &&
                    this.EncryptionCertificateThumprint.Equals(input.EncryptionCertificateThumprint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CookieName != null)
                    hashCode = hashCode * 59 + this.CookieName.GetHashCode();
                if (this.EncryptionCertificateThumprint != null)
                    hashCode = hashCode * 59 + this.EncryptionCertificateThumprint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
