/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ScheduledTaskInfo
    /// </summary>
    [DataContract(Name = "ScheduledTaskInfo")]
    public partial class ScheduledTaskInfo : IEquatable<ScheduledTaskInfo>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the scheduled task&#39;s type: ActivityClassBased or WorkflowFileBased
        /// </summary>
        /// <value>Gets or sets the scheduled task&#39;s type: ActivityClassBased or WorkflowFileBased</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ActivityClassBased for value: ActivityClassBased
            /// </summary>
            [EnumMember(Value = "ActivityClassBased")]
            ActivityClassBased = 1,

            /// <summary>
            /// Enum WorkflowFileBased for value: WorkflowFileBased
            /// </summary>
            [EnumMember(Value = "WorkflowFileBased")]
            WorkflowFileBased = 2

        }


        /// <summary>
        /// Gets or sets the scheduled task&#39;s type: ActivityClassBased or WorkflowFileBased
        /// </summary>
        /// <value>Gets or sets the scheduled task&#39;s type: ActivityClassBased or WorkflowFileBased</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledTaskInfo" /> class.
        /// </summary>
        /// <param name="activityTypeNameOrWorkflowPath">Gets or sets the scheduled task&#39;s activity type name or the workflow path.</param>
        /// <param name="group">the affinity group of the scheduled job..</param>
        /// <param name="inputs">IDictionary&lt;String,Object&gt;.</param>
        /// <param name="name">the name of the scheduled job..</param>
        /// <param name="triggers">the task job triggers..</param>
        /// <param name="type">Gets or sets the scheduled task&#39;s type: ActivityClassBased or WorkflowFileBased.</param>
        public ScheduledTaskInfo(string activityTypeNameOrWorkflowPath = default(string), string group = default(string), Dictionary<string, Object> inputs = default(Dictionary<string, Object>), string name = default(string), List<TriggerInfo> triggers = default(List<TriggerInfo>), TypeEnum? type = default(TypeEnum?))
        {
            this.ActivityTypeNameOrWorkflowPath = activityTypeNameOrWorkflowPath;
            this.Group = group;
            this.Inputs = inputs;
            this.Name = name;
            this.Triggers = triggers;
            this.Type = type;
        }

        /// <summary>
        /// Gets or sets the scheduled task&#39;s activity type name or the workflow path
        /// </summary>
        /// <value>Gets or sets the scheduled task&#39;s activity type name or the workflow path</value>
        [DataMember(Name = "activityTypeNameOrWorkflowPath", EmitDefaultValue = false)]
        public string ActivityTypeNameOrWorkflowPath { get; set; }

        /// <summary>
        /// the affinity group of the scheduled job.
        /// </summary>
        /// <value>the affinity group of the scheduled job.</value>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// IDictionary&lt;String,Object&gt;
        /// </summary>
        /// <value>IDictionary&lt;String,Object&gt;</value>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public Dictionary<string, Object> Inputs { get; set; }

        /// <summary>
        /// the name of the scheduled job.
        /// </summary>
        /// <value>the name of the scheduled job.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the task job triggers.
        /// </summary>
        /// <value>the task job triggers.</value>
        [DataMember(Name = "triggers", EmitDefaultValue = false)]
        public List<TriggerInfo> Triggers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduledTaskInfo {\n");
            sb.Append("  ActivityTypeNameOrWorkflowPath: ").Append(ActivityTypeNameOrWorkflowPath).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduledTaskInfo);
        }

        /// <summary>
        /// Returns true if ScheduledTaskInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduledTaskInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduledTaskInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityTypeNameOrWorkflowPath == input.ActivityTypeNameOrWorkflowPath ||
                    (this.ActivityTypeNameOrWorkflowPath != null &&
                    this.ActivityTypeNameOrWorkflowPath.Equals(input.ActivityTypeNameOrWorkflowPath))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Triggers == input.Triggers ||
                    this.Triggers != null &&
                    input.Triggers != null &&
                    this.Triggers.SequenceEqual(input.Triggers)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityTypeNameOrWorkflowPath != null)
                    hashCode = hashCode * 59 + this.ActivityTypeNameOrWorkflowPath.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Triggers != null)
                    hashCode = hashCode * 59 + this.Triggers.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
