/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Carts are entities used for assembling an order before submitting.
    /// </summary>
    [DataContract(Name = "ReserveTimeSlotRequest")]
    public partial class ReserveTimeSlotRequest : IEquatable<ReserveTimeSlotRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveTimeSlotRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReserveTimeSlotRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveTimeSlotRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The culture name in which language the data will be returned..</param>
        /// <param name="comment">The comment for the reservation..</param>
        /// <param name="expiryTime">The expiry time for the reservation. (required).</param>
        /// <param name="expiryWarningTime">The expiry warning time for the reservation. (required).</param>
        /// <param name="maxNumberOfRenewals">The maximum number of renewals allowed for this reservation..</param>
        /// <param name="reservationDate">The date of the timeslot reservation. (required).</param>
        public ReserveTimeSlotRequest(string cultureName = default(string), string comment = default(string), string expiryTime = default(string), string expiryWarningTime = default(string), int maxNumberOfRenewals = default(int), DateTime reservationDate = default(DateTime))
        {
            // to ensure "expiryTime" is required (not null)
            this.ExpiryTime = expiryTime ?? throw new ArgumentNullException("expiryTime is a required property for ReserveTimeSlotRequest and cannot be null");
            // to ensure "expiryWarningTime" is required (not null)
            this.ExpiryWarningTime = expiryWarningTime ?? throw new ArgumentNullException("expiryWarningTime is a required property for ReserveTimeSlotRequest and cannot be null");
            this.ReservationDate = reservationDate;
            this.CultureName = cultureName;
            this.Comment = comment;
            this.MaxNumberOfRenewals = maxNumberOfRenewals;
        }

        /// <summary>
        /// The culture name in which language the data will be returned.
        /// </summary>
        /// <value>The culture name in which language the data will be returned.</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The comment for the reservation.
        /// </summary>
        /// <value>The comment for the reservation.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// The expiry time for the reservation.
        /// </summary>
        /// <value>The expiry time for the reservation.</value>
        [DataMember(Name = "expiryTime", IsRequired = true, EmitDefaultValue = false)]
        public string ExpiryTime { get; set; }

        /// <summary>
        /// The expiry warning time for the reservation.
        /// </summary>
        /// <value>The expiry warning time for the reservation.</value>
        [DataMember(Name = "expiryWarningTime", IsRequired = true, EmitDefaultValue = false)]
        public string ExpiryWarningTime { get; set; }

        /// <summary>
        /// The maximum number of renewals allowed for this reservation.
        /// </summary>
        /// <value>The maximum number of renewals allowed for this reservation.</value>
        [DataMember(Name = "maxNumberOfRenewals", EmitDefaultValue = false)]
        public int MaxNumberOfRenewals { get; set; }

        /// <summary>
        /// The date of the timeslot reservation.
        /// </summary>
        /// <value>The date of the timeslot reservation.</value>
        [DataMember(Name = "reservationDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ReservationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReserveTimeSlotRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ExpiryTime: ").Append(ExpiryTime).Append("\n");
            sb.Append("  ExpiryWarningTime: ").Append(ExpiryWarningTime).Append("\n");
            sb.Append("  MaxNumberOfRenewals: ").Append(MaxNumberOfRenewals).Append("\n");
            sb.Append("  ReservationDate: ").Append(ReservationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReserveTimeSlotRequest);
        }

        /// <summary>
        /// Returns true if ReserveTimeSlotRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReserveTimeSlotRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReserveTimeSlotRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.ExpiryTime == input.ExpiryTime ||
                    (this.ExpiryTime != null &&
                    this.ExpiryTime.Equals(input.ExpiryTime))
                ) && 
                (
                    this.ExpiryWarningTime == input.ExpiryWarningTime ||
                    (this.ExpiryWarningTime != null &&
                    this.ExpiryWarningTime.Equals(input.ExpiryWarningTime))
                ) && 
                (
                    this.MaxNumberOfRenewals == input.MaxNumberOfRenewals ||
                    this.MaxNumberOfRenewals.Equals(input.MaxNumberOfRenewals)
                ) && 
                (
                    this.ReservationDate == input.ReservationDate ||
                    (this.ReservationDate != null &&
                    this.ReservationDate.Equals(input.ReservationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.ExpiryTime != null)
                    hashCode = hashCode * 59 + this.ExpiryTime.GetHashCode();
                if (this.ExpiryWarningTime != null)
                    hashCode = hashCode * 59 + this.ExpiryWarningTime.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNumberOfRenewals.GetHashCode();
                if (this.ReservationDate != null)
                    hashCode = hashCode * 59 + this.ReservationDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
