/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "GetQuickLinksCountDetailsRequest")]
    public partial class GetQuickLinksCountDetailsRequest : IEquatable<GetQuickLinksCountDetailsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetQuickLinksCountDetailsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetQuickLinksCountDetailsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetQuickLinksCountDetailsRequest" /> class.
        /// </summary>
        /// <param name="catalogName">The catalog name to be used for quick links count (required).</param>
        /// <param name="cultureName">The culture name that should be used to retrieve data (required).</param>
        public GetQuickLinksCountDetailsRequest(string catalogName = default(string), string cultureName = default(string))
        {
            // to ensure "catalogName" is required (not null)
            this.CatalogName = catalogName ?? throw new ArgumentNullException("catalogName is a required property for GetQuickLinksCountDetailsRequest and cannot be null");
            // to ensure "cultureName" is required (not null)
            this.CultureName = cultureName ?? throw new ArgumentNullException("cultureName is a required property for GetQuickLinksCountDetailsRequest and cannot be null");
        }

        /// <summary>
        /// The catalog name to be used for quick links count
        /// </summary>
        /// <value>The catalog name to be used for quick links count</value>
        [DataMember(Name = "catalogName", IsRequired = true, EmitDefaultValue = false)]
        public string CatalogName { get; set; }

        /// <summary>
        /// The culture name that should be used to retrieve data
        /// </summary>
        /// <value>The culture name that should be used to retrieve data</value>
        [DataMember(Name = "cultureName", IsRequired = true, EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetQuickLinksCountDetailsRequest {\n");
            sb.Append("  CatalogName: ").Append(CatalogName).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetQuickLinksCountDetailsRequest);
        }

        /// <summary>
        /// Returns true if GetQuickLinksCountDetailsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetQuickLinksCountDetailsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetQuickLinksCountDetailsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CatalogName == input.CatalogName ||
                    (this.CatalogName != null &&
                    this.CatalogName.Equals(input.CatalogName))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CatalogName != null)
                    hashCode = hashCode * 59 + this.CatalogName.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
