/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Integration resources dedicated to data exchanges across system boundaries or other systems.
    /// </summary>
    [DataContract(Name = "ExportProductPriceRequest")]
    public partial class ExportProductPriceRequest : IEquatable<ExportProductPriceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportProductPriceRequest" /> class.
        /// </summary>
        /// <param name="correlationId">The correlation id for the durable task..</param>
        /// <param name="culture">The language to include in the export..</param>
        /// <param name="fileFormat">The file format of the export, Excel..</param>
        /// <param name="filePath">The File path in the blob storage..</param>
        /// <param name="priceListId">The priceList id..</param>
        /// <param name="products">The list of products to export..</param>
        /// <param name="taskId">The task id..</param>
        public ExportProductPriceRequest(string correlationId = default(string), string culture = default(string), string fileFormat = default(string), string filePath = default(string), string priceListId = default(string), List<string> products = default(List<string>), string taskId = default(string))
        {
            this.CorrelationId = correlationId;
            this.Culture = culture;
            this.FileFormat = fileFormat;
            this.FilePath = filePath;
            this.PriceListId = priceListId;
            this.Products = products;
            this.TaskId = taskId;
        }

        /// <summary>
        /// The correlation id for the durable task.
        /// </summary>
        /// <value>The correlation id for the durable task.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// The language to include in the export.
        /// </summary>
        /// <value>The language to include in the export.</value>
        [DataMember(Name = "culture", EmitDefaultValue = false)]
        public string Culture { get; set; }

        /// <summary>
        /// The file format of the export, Excel.
        /// </summary>
        /// <value>The file format of the export, Excel.</value>
        [DataMember(Name = "fileFormat", EmitDefaultValue = false)]
        public string FileFormat { get; set; }

        /// <summary>
        /// The File path in the blob storage.
        /// </summary>
        /// <value>The File path in the blob storage.</value>
        [DataMember(Name = "filePath", EmitDefaultValue = false)]
        public string FilePath { get; set; }

        /// <summary>
        /// The priceList id.
        /// </summary>
        /// <value>The priceList id.</value>
        [DataMember(Name = "priceListId", EmitDefaultValue = false)]
        public string PriceListId { get; set; }

        /// <summary>
        /// The list of products to export.
        /// </summary>
        /// <value>The list of products to export.</value>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public List<string> Products { get; set; }

        /// <summary>
        /// The task id.
        /// </summary>
        /// <value>The task id.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportProductPriceRequest {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Culture: ").Append(Culture).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  PriceListId: ").Append(PriceListId).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportProductPriceRequest);
        }

        /// <summary>
        /// Returns true if ExportProductPriceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportProductPriceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportProductPriceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.Culture == input.Culture ||
                    (this.Culture != null &&
                    this.Culture.Equals(input.Culture))
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    (this.FileFormat != null &&
                    this.FileFormat.Equals(input.FileFormat))
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.PriceListId == input.PriceListId ||
                    (this.PriceListId != null &&
                    this.PriceListId.Equals(input.PriceListId))
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.Culture != null)
                    hashCode = hashCode * 59 + this.Culture.GetHashCode();
                if (this.FileFormat != null)
                    hashCode = hashCode * 59 + this.FileFormat.GetHashCode();
                if (this.FilePath != null)
                    hashCode = hashCode * 59 + this.FilePath.GetHashCode();
                if (this.PriceListId != null)
                    hashCode = hashCode * 59 + this.PriceListId.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
