/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Facet
    /// </summary>
    [DataContract(Name = "Facet")]
    public partial class Facet : IEquatable<Facet>, IValidatableObject
    {
        /// <summary>
        /// Gets the Facet Type.
        /// </summary>
        /// <value>Gets the Facet Type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FacetTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Field for value: Field
            /// </summary>
            [EnumMember(Value = "Field")]
            Field = 2,

            /// <summary>
            /// Enum Range for value: Range
            /// </summary>
            [EnumMember(Value = "Range")]
            Range = 3,

            /// <summary>
            /// Enum Query for value: Query
            /// </summary>
            [EnumMember(Value = "Query")]
            Query = 4

        }


        /// <summary>
        /// Gets the Facet Type.
        /// </summary>
        /// <value>Gets the Facet Type.</value>
        [DataMember(Name = "facetType", EmitDefaultValue = false)]
        public FacetTypeEnum? FacetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Facet" /> class.
        /// </summary>
        /// <param name="count">Number of documents matching the facet value..</param>
        /// <param name="dataType">the type of the data used in the ranges..</param>
        /// <param name="endValue">the end value of all the ranges..</param>
        /// <param name="facetType">Gets the Facet Type..</param>
        /// <param name="fieldName">the name which is used to refer to this facet..</param>
        /// <param name="gapSize">the size of the gap of all the ranges..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="query">the query..</param>
        /// <param name="startValue">the start value of all the ranges..</param>
        /// <param name="title">the title..</param>
        /// <param name="values">the different values available for this facet..</param>
        public Facet(int count = default(int), string dataType = default(string), string endValue = default(string), FacetTypeEnum? facetType = default(FacetTypeEnum?), string fieldName = default(string), string gapSize = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string query = default(string), string startValue = default(string), string title = default(string), List<FacetValue> values = default(List<FacetValue>))
        {
            this.Count = count;
            this.DataType = dataType;
            this.EndValue = endValue;
            this.FacetType = facetType;
            this.FieldName = fieldName;
            this.GapSize = gapSize;
            this.PropertyBag = propertyBag;
            this.Query = query;
            this.StartValue = startValue;
            this.Title = title;
            this.Values = values;
        }

        /// <summary>
        /// Number of documents matching the facet value.
        /// </summary>
        /// <value>Number of documents matching the facet value.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// the type of the data used in the ranges.
        /// </summary>
        /// <value>the type of the data used in the ranges.</value>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// the end value of all the ranges.
        /// </summary>
        /// <value>the end value of all the ranges.</value>
        [DataMember(Name = "endValue", EmitDefaultValue = false)]
        public string EndValue { get; set; }

        /// <summary>
        /// the name which is used to refer to this facet.
        /// </summary>
        /// <value>the name which is used to refer to this facet.</value>
        [DataMember(Name = "fieldName", EmitDefaultValue = false)]
        public string FieldName { get; set; }

        /// <summary>
        /// the size of the gap of all the ranges.
        /// </summary>
        /// <value>the size of the gap of all the ranges.</value>
        [DataMember(Name = "gapSize", EmitDefaultValue = false)]
        public string GapSize { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// the query.
        /// </summary>
        /// <value>the query.</value>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// the start value of all the ranges.
        /// </summary>
        /// <value>the start value of all the ranges.</value>
        [DataMember(Name = "startValue", EmitDefaultValue = false)]
        public string StartValue { get; set; }

        /// <summary>
        /// the title.
        /// </summary>
        /// <value>the title.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// the different values available for this facet.
        /// </summary>
        /// <value>the different values available for this facet.</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<FacetValue> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Facet {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  EndValue: ").Append(EndValue).Append("\n");
            sb.Append("  FacetType: ").Append(FacetType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  GapSize: ").Append(GapSize).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  StartValue: ").Append(StartValue).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Facet);
        }

        /// <summary>
        /// Returns true if Facet instances are equal
        /// </summary>
        /// <param name="input">Instance of Facet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Facet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.EndValue == input.EndValue ||
                    (this.EndValue != null &&
                    this.EndValue.Equals(input.EndValue))
                ) && 
                (
                    this.FacetType == input.FacetType ||
                    this.FacetType.Equals(input.FacetType)
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.GapSize == input.GapSize ||
                    (this.GapSize != null &&
                    this.GapSize.Equals(input.GapSize))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.StartValue == input.StartValue ||
                    (this.StartValue != null &&
                    this.StartValue.Equals(input.StartValue))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.EndValue != null)
                    hashCode = hashCode * 59 + this.EndValue.GetHashCode();
                hashCode = hashCode * 59 + this.FacetType.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.GapSize != null)
                    hashCode = hashCode * 59 + this.GapSize.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.StartValue != null)
                    hashCode = hashCode * 59 + this.StartValue.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
