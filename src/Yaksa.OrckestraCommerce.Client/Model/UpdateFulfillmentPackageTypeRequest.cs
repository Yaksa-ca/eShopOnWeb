/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "UpdateFulfillmentPackageTypeRequest")]
    public partial class UpdateFulfillmentPackageTypeRequest : IEquatable<UpdateFulfillmentPackageTypeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateFulfillmentPackageTypeRequest" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="distanceUOM">The Distance UOM..</param>
        /// <param name="height">The UOM Height..</param>
        /// <param name="isActive">A value indicating whether the fulfillment package type is active or not..</param>
        /// <param name="length">The UOM Length..</param>
        /// <param name="shortDisplayName">shortDisplayName.</param>
        /// <param name="width">The UOM Width..</param>
        public UpdateFulfillmentPackageTypeRequest(Dictionary<string, string> description = default(Dictionary<string, string>), Dictionary<string, string> displayName = default(Dictionary<string, string>), string distanceUOM = default(string), double height = default(double), bool isActive = default(bool), double length = default(double), Dictionary<string, string> shortDisplayName = default(Dictionary<string, string>), double width = default(double))
        {
            this.Description = description;
            this.DisplayName = displayName;
            this.DistanceUOM = distanceUOM;
            this.Height = height;
            this.IsActive = isActive;
            this.Length = length;
            this.ShortDisplayName = shortDisplayName;
            this.Width = width;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The Distance UOM.
        /// </summary>
        /// <value>The Distance UOM.</value>
        [DataMember(Name = "distanceUOM", EmitDefaultValue = false)]
        public string DistanceUOM { get; set; }

        /// <summary>
        /// The UOM Height.
        /// </summary>
        /// <value>The UOM Height.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public double Height { get; set; }

        /// <summary>
        /// A value indicating whether the fulfillment package type is active or not.
        /// </summary>
        /// <value>A value indicating whether the fulfillment package type is active or not.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The UOM Length.
        /// </summary>
        /// <value>The UOM Length.</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public double Length { get; set; }

        /// <summary>
        /// Gets or Sets ShortDisplayName
        /// </summary>
        [DataMember(Name = "shortDisplayName", EmitDefaultValue = false)]
        public Dictionary<string, string> ShortDisplayName { get; set; }

        /// <summary>
        /// The UOM Width.
        /// </summary>
        /// <value>The UOM Width.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public double Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateFulfillmentPackageTypeRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DistanceUOM: ").Append(DistanceUOM).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  ShortDisplayName: ").Append(ShortDisplayName).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateFulfillmentPackageTypeRequest);
        }

        /// <summary>
        /// Returns true if UpdateFulfillmentPackageTypeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateFulfillmentPackageTypeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateFulfillmentPackageTypeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.DistanceUOM == input.DistanceUOM ||
                    (this.DistanceUOM != null &&
                    this.DistanceUOM.Equals(input.DistanceUOM))
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.ShortDisplayName == input.ShortDisplayName ||
                    this.ShortDisplayName != null &&
                    input.ShortDisplayName != null &&
                    this.ShortDisplayName.SequenceEqual(input.ShortDisplayName)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.DistanceUOM != null)
                    hashCode = hashCode * 59 + this.DistanceUOM.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.ShortDisplayName != null)
                    hashCode = hashCode * 59 + this.ShortDisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
