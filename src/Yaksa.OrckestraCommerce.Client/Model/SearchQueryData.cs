/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// SearchQueryData
    /// </summary>
    [DataContract(Name = "SearchQueryData")]
    public partial class SearchQueryData : IEquatable<SearchQueryData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchQueryData" /> class.
        /// </summary>
        /// <param name="cultureName">Culture Name. Should be * if the QueryData is auto-localizable.</param>
        /// <param name="facetPredicates">The facet predicates to include in the Search Query.</param>
        /// <param name="elevatedIds">The elevated ids.</param>
        /// <param name="productSkus">The product skus.</param>
        /// <param name="sortings">the sorting parameter of the query.</param>
        public SearchQueryData(string cultureName = default(string), List<SavedFacetPredicate> facetPredicates = default(List<SavedFacetPredicate>), List<string> elevatedIds = default(List<string>), List<string> productSkus = default(List<string>), List<SavedQuerySorting> sortings = default(List<SavedQuerySorting>))
        {
            this.CultureName = cultureName;
            this.FacetPredicates = facetPredicates;
            this.ElevatedIds = elevatedIds;
            this.ProductSkus = productSkus;
            this.Sortings = sortings;
        }

        /// <summary>
        /// Culture Name. Should be * if the QueryData is auto-localizable
        /// </summary>
        /// <value>Culture Name. Should be * if the QueryData is auto-localizable</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The facet predicates to include in the Search Query
        /// </summary>
        /// <value>The facet predicates to include in the Search Query</value>
        [DataMember(Name = "facetPredicates", EmitDefaultValue = false)]
        public List<SavedFacetPredicate> FacetPredicates { get; set; }

        /// <summary>
        /// The elevated ids
        /// </summary>
        /// <value>The elevated ids</value>
        [DataMember(Name = "elevatedIds", EmitDefaultValue = false)]
        public List<string> ElevatedIds { get; set; }

        /// <summary>
        /// The product skus
        /// </summary>
        /// <value>The product skus</value>
        [DataMember(Name = "productSkus", EmitDefaultValue = false)]
        public List<string> ProductSkus { get; set; }

        /// <summary>
        /// the sorting parameter of the query
        /// </summary>
        /// <value>the sorting parameter of the query</value>
        [DataMember(Name = "sortings", EmitDefaultValue = false)]
        public List<SavedQuerySorting> Sortings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchQueryData {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  FacetPredicates: ").Append(FacetPredicates).Append("\n");
            sb.Append("  ElevatedIds: ").Append(ElevatedIds).Append("\n");
            sb.Append("  ProductSkus: ").Append(ProductSkus).Append("\n");
            sb.Append("  Sortings: ").Append(Sortings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchQueryData);
        }

        /// <summary>
        /// Returns true if SearchQueryData instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchQueryData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchQueryData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.FacetPredicates == input.FacetPredicates ||
                    this.FacetPredicates != null &&
                    input.FacetPredicates != null &&
                    this.FacetPredicates.SequenceEqual(input.FacetPredicates)
                ) && 
                (
                    this.ElevatedIds == input.ElevatedIds ||
                    this.ElevatedIds != null &&
                    input.ElevatedIds != null &&
                    this.ElevatedIds.SequenceEqual(input.ElevatedIds)
                ) && 
                (
                    this.ProductSkus == input.ProductSkus ||
                    this.ProductSkus != null &&
                    input.ProductSkus != null &&
                    this.ProductSkus.SequenceEqual(input.ProductSkus)
                ) && 
                (
                    this.Sortings == input.Sortings ||
                    this.Sortings != null &&
                    input.Sortings != null &&
                    this.Sortings.SequenceEqual(input.Sortings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.FacetPredicates != null)
                    hashCode = hashCode * 59 + this.FacetPredicates.GetHashCode();
                if (this.ElevatedIds != null)
                    hashCode = hashCode * 59 + this.ElevatedIds.GetHashCode();
                if (this.ProductSkus != null)
                    hashCode = hashCode * 59 + this.ProductSkus.GetHashCode();
                if (this.Sortings != null)
                    hashCode = hashCode * 59 + this.Sortings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
