/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Metadata are entities which represents additional definitions and attribute information.
    /// </summary>
    [DataContract(Name = "CreateProductDefinitionRequest")]
    public partial class CreateProductDefinitionRequest : IEquatable<CreateProductDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProductDefinitionRequest" /> class.
        /// </summary>
        /// <param name="allowPriceLists">Whether the product definition allows setting price lists.</param>
        /// <param name="description">The description of the product definition.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="isDivisible">Whether the components of this product can be divided.</param>
        /// <param name="numberOfDivision">A number of divisions the specified component may be split into.</param>
        public CreateProductDefinitionRequest(bool allowPriceLists = default(bool), string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), bool isDivisible = default(bool), int numberOfDivision = default(int))
        {
            this.AllowPriceLists = allowPriceLists;
            this.Description = description;
            this.DisplayName = displayName;
            this.IsDivisible = isDivisible;
            this.NumberOfDivision = numberOfDivision;
        }

        /// <summary>
        /// Whether the product definition allows setting price lists
        /// </summary>
        /// <value>Whether the product definition allows setting price lists</value>
        [DataMember(Name = "allowPriceLists", EmitDefaultValue = true)]
        public bool AllowPriceLists { get; set; }

        /// <summary>
        /// The description of the product definition
        /// </summary>
        /// <value>The description of the product definition</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Whether the components of this product can be divided
        /// </summary>
        /// <value>Whether the components of this product can be divided</value>
        [DataMember(Name = "isDivisible", EmitDefaultValue = true)]
        public bool IsDivisible { get; set; }

        /// <summary>
        /// A number of divisions the specified component may be split into
        /// </summary>
        /// <value>A number of divisions the specified component may be split into</value>
        [DataMember(Name = "numberOfDivision", EmitDefaultValue = false)]
        public int NumberOfDivision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateProductDefinitionRequest {\n");
            sb.Append("  AllowPriceLists: ").Append(AllowPriceLists).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IsDivisible: ").Append(IsDivisible).Append("\n");
            sb.Append("  NumberOfDivision: ").Append(NumberOfDivision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateProductDefinitionRequest);
        }

        /// <summary>
        /// Returns true if CreateProductDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateProductDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateProductDefinitionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowPriceLists == input.AllowPriceLists ||
                    this.AllowPriceLists.Equals(input.AllowPriceLists)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.IsDivisible == input.IsDivisible ||
                    this.IsDivisible.Equals(input.IsDivisible)
                ) && 
                (
                    this.NumberOfDivision == input.NumberOfDivision ||
                    this.NumberOfDivision.Equals(input.NumberOfDivision)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowPriceLists.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IsDivisible.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfDivision.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
