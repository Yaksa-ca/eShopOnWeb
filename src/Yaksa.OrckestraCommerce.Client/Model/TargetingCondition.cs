/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// TargetingCondition
    /// </summary>
    [DataContract(Name = "TargetingCondition")]
    public partial class TargetingCondition : IEquatable<TargetingCondition>, IValidatableObject
    {
        /// <summary>
        /// The binary operator which will be apply between the children targeting conditions.
        /// </summary>
        /// <value>The binary operator which will be apply between the children targeting conditions.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BinaryOperatorEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum And for value: And
            /// </summary>
            [EnumMember(Value = "And")]
            And = 2,

            /// <summary>
            /// Enum Or for value: Or
            /// </summary>
            [EnumMember(Value = "Or")]
            Or = 3

        }


        /// <summary>
        /// The binary operator which will be apply between the children targeting conditions.
        /// </summary>
        /// <value>The binary operator which will be apply between the children targeting conditions.</value>
        [DataMember(Name = "binaryOperator", EmitDefaultValue = false)]
        public BinaryOperatorEnum? BinaryOperator { get; set; }
        /// <summary>
        ///  Gets or sets the operator to apply on the Value to get the promotion when the target is used on a collection.
        /// </summary>
        /// <value> Gets or sets the operator to apply on the Value to get the promotion when the target is used on a collection.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CollectionOperatorEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 2,

            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            [EnumMember(Value = "Any")]
            Any = 3

        }


        /// <summary>
        ///  Gets or sets the operator to apply on the Value to get the promotion when the target is used on a collection.
        /// </summary>
        /// <value> Gets or sets the operator to apply on the Value to get the promotion when the target is used on a collection.</value>
        [DataMember(Name = "collectionOperator", EmitDefaultValue = false)]
        public CollectionOperatorEnum? CollectionOperator { get; set; }
        /// <summary>
        /// The operator to apply on the Value to get the promotion.
        /// </summary>
        /// <value>The operator to apply on the Value to get the promotion.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Equals for value: Equals
            /// </summary>
            [EnumMember(Value = "Equals")]
            Equals = 2,

            /// <summary>
            /// Enum GreaterThan for value: GreaterThan
            /// </summary>
            [EnumMember(Value = "GreaterThan")]
            GreaterThan = 3,

            /// <summary>
            /// Enum GreaterThanOrEqual for value: GreaterThanOrEqual
            /// </summary>
            [EnumMember(Value = "GreaterThanOrEqual")]
            GreaterThanOrEqual = 4,

            /// <summary>
            /// Enum LessThan for value: LessThan
            /// </summary>
            [EnumMember(Value = "LessThan")]
            LessThan = 5,

            /// <summary>
            /// Enum LessThanOrEqual for value: LessThanOrEqual
            /// </summary>
            [EnumMember(Value = "LessThanOrEqual")]
            LessThanOrEqual = 6,

            /// <summary>
            /// Enum Matches for value: Matches
            /// </summary>
            [EnumMember(Value = "Matches")]
            Matches = 7,

            /// <summary>
            /// Enum In for value: In
            /// </summary>
            [EnumMember(Value = "In")]
            In = 8,

            /// <summary>
            /// Enum HasValue for value: HasValue
            /// </summary>
            [EnumMember(Value = "HasValue")]
            HasValue = 9,

            /// <summary>
            /// Enum IsEmpty for value: IsEmpty
            /// </summary>
            [EnumMember(Value = "IsEmpty")]
            IsEmpty = 10

        }


        /// <summary>
        /// The operator to apply on the Value to get the promotion.
        /// </summary>
        /// <value>The operator to apply on the Value to get the promotion.</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public OperatorEnum? Operator { get; set; }
        /// <summary>
        /// The type of condition
        /// </summary>
        /// <value>The type of condition</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum PropertyFilter for value: PropertyFilter
            /// </summary>
            [EnumMember(Value = "PropertyFilter")]
            PropertyFilter = 2,

            /// <summary>
            /// Enum CollectionFilter for value: CollectionFilter
            /// </summary>
            [EnumMember(Value = "CollectionFilter")]
            CollectionFilter = 3,

            /// <summary>
            /// Enum SegmentFilter for value: SegmentFilter
            /// </summary>
            [EnumMember(Value = "SegmentFilter")]
            SegmentFilter = 4,

            /// <summary>
            /// Enum TargetingGroup for value: TargetingGroup
            /// </summary>
            [EnumMember(Value = "TargetingGroup")]
            TargetingGroup = 5

        }


        /// <summary>
        /// The type of condition
        /// </summary>
        /// <value>The type of condition</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetingCondition" /> class.
        /// </summary>
        /// <param name="binaryOperator">The binary operator which will be apply between the children targeting conditions..</param>
        /// <param name="children">The children of this targeting condition..</param>
        /// <param name="collectionOperator"> Gets or sets the operator to apply on the Value to get the promotion when the target is used on a collection..</param>
        /// <param name="not"> Gets or sets a value indicating whether to use the Operator should NOT be matched..</param>
        /// <param name="_operator">The operator to apply on the Value to get the promotion..</param>
        /// <param name="propertyPath">The relative path of the property used for the condition.</param>
        /// <param name="type">The type of condition.</param>
        /// <param name="value">Object.</param>
        public TargetingCondition(BinaryOperatorEnum? binaryOperator = default(BinaryOperatorEnum?), List<TargetingCondition> children = default(List<TargetingCondition>), CollectionOperatorEnum? collectionOperator = default(CollectionOperatorEnum?), bool not = default(bool), OperatorEnum? _operator = default(OperatorEnum?), string propertyPath = default(string), TypeEnum? type = default(TypeEnum?), Object value = default(Object))
        {
            this.BinaryOperator = binaryOperator;
            this.Children = children;
            this.CollectionOperator = collectionOperator;
            this.Not = not;
            this.Operator = _operator;
            this.PropertyPath = propertyPath;
            this.Type = type;
            this.Value = value;
        }

        /// <summary>
        /// The children of this targeting condition.
        /// </summary>
        /// <value>The children of this targeting condition.</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<TargetingCondition> Children { get; set; }

        /// <summary>
        ///  Gets or sets a value indicating whether to use the Operator should NOT be matched.
        /// </summary>
        /// <value> Gets or sets a value indicating whether to use the Operator should NOT be matched.</value>
        [DataMember(Name = "not", EmitDefaultValue = true)]
        public bool Not { get; set; }

        /// <summary>
        /// The relative path of the property used for the condition
        /// </summary>
        /// <value>The relative path of the property used for the condition</value>
        [DataMember(Name = "propertyPath", EmitDefaultValue = false)]
        public string PropertyPath { get; set; }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TargetingCondition {\n");
            sb.Append("  BinaryOperator: ").Append(BinaryOperator).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  CollectionOperator: ").Append(CollectionOperator).Append("\n");
            sb.Append("  Not: ").Append(Not).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  PropertyPath: ").Append(PropertyPath).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TargetingCondition);
        }

        /// <summary>
        /// Returns true if TargetingCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of TargetingCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetingCondition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BinaryOperator == input.BinaryOperator ||
                    this.BinaryOperator.Equals(input.BinaryOperator)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.CollectionOperator == input.CollectionOperator ||
                    this.CollectionOperator.Equals(input.CollectionOperator)
                ) && 
                (
                    this.Not == input.Not ||
                    this.Not.Equals(input.Not)
                ) && 
                (
                    this.Operator == input.Operator ||
                    this.Operator.Equals(input.Operator)
                ) && 
                (
                    this.PropertyPath == input.PropertyPath ||
                    (this.PropertyPath != null &&
                    this.PropertyPath.Equals(input.PropertyPath))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.BinaryOperator.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                hashCode = hashCode * 59 + this.CollectionOperator.GetHashCode();
                hashCode = hashCode * 59 + this.Not.GetHashCode();
                hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.PropertyPath != null)
                    hashCode = hashCode * 59 + this.PropertyPath.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
