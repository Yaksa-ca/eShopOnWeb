/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// OrderProcessingResult
    /// </summary>
    [DataContract(Name = "OrderProcessingResult")]
    public partial class OrderProcessingResult : IEquatable<OrderProcessingResult>, IValidatableObject
    {
        /// <summary>
        /// the result of the execution.
        /// </summary>
        /// <value>the result of the execution.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecutionResultEnum
        {
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 1,

            /// <summary>
            /// Enum Ignored for value: Ignored
            /// </summary>
            [EnumMember(Value = "Ignored")]
            Ignored = 2,

            /// <summary>
            /// Enum Interruption for value: Interruption
            /// </summary>
            [EnumMember(Value = "Interruption")]
            Interruption = 3,

            /// <summary>
            /// Enum Failure for value: Failure
            /// </summary>
            [EnumMember(Value = "Failure")]
            Failure = 4

        }


        /// <summary>
        /// the result of the execution.
        /// </summary>
        /// <value>the result of the execution.</value>
        [DataMember(Name = "executionResult", EmitDefaultValue = false)]
        public ExecutionResultEnum? ExecutionResult { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderProcessingResult" /> class.
        /// </summary>
        /// <param name="arguments">Dictionary&lt;String,Object&gt;.</param>
        /// <param name="executionResult">the result of the execution..</param>
        /// <param name="messages">the collection of messages collected during the workflow execution..</param>
        /// <param name="processingExceptions">the list of unhandled exceptions that occurred during the workflow execution..</param>
        /// <param name="resultingOrder">resultingOrder.</param>
        /// <param name="shipmentFulfillmentReadinessInfos">a collection of Shipment Fulfillment Readiness Information..</param>
        /// <param name="validationResults">a collection of validation results that were applied..</param>
        public OrderProcessingResult(Dictionary<string, Object> arguments = default(Dictionary<string, Object>), ExecutionResultEnum? executionResult = default(ExecutionResultEnum?), List<ExecutionMessage> messages = default(List<ExecutionMessage>), List<Object> processingExceptions = default(List<Object>), Order resultingOrder = default(Order), List<ShipmentFulfillmentReadinessInfo> shipmentFulfillmentReadinessInfos = default(List<ShipmentFulfillmentReadinessInfo>), List<ValidationResult> validationResults = default(List<ValidationResult>))
        {
            this.Arguments = arguments;
            this.ExecutionResult = executionResult;
            this.Messages = messages;
            this.ProcessingExceptions = processingExceptions;
            this.ResultingOrder = resultingOrder;
            this.ShipmentFulfillmentReadinessInfos = shipmentFulfillmentReadinessInfos;
            this.ValidationResults = validationResults;
        }

        /// <summary>
        /// Dictionary&lt;String,Object&gt;
        /// </summary>
        /// <value>Dictionary&lt;String,Object&gt;</value>
        [DataMember(Name = "arguments", EmitDefaultValue = false)]
        public Dictionary<string, Object> Arguments { get; set; }

        /// <summary>
        /// the collection of messages collected during the workflow execution.
        /// </summary>
        /// <value>the collection of messages collected during the workflow execution.</value>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<ExecutionMessage> Messages { get; set; }

        /// <summary>
        /// the list of unhandled exceptions that occurred during the workflow execution.
        /// </summary>
        /// <value>the list of unhandled exceptions that occurred during the workflow execution.</value>
        [DataMember(Name = "processingExceptions", EmitDefaultValue = false)]
        public List<Object> ProcessingExceptions { get; set; }

        /// <summary>
        /// Gets or Sets ResultingOrder
        /// </summary>
        [DataMember(Name = "resultingOrder", EmitDefaultValue = false)]
        public Order ResultingOrder { get; set; }

        /// <summary>
        /// a collection of Shipment Fulfillment Readiness Information.
        /// </summary>
        /// <value>a collection of Shipment Fulfillment Readiness Information.</value>
        [DataMember(Name = "shipmentFulfillmentReadinessInfos", EmitDefaultValue = false)]
        public List<ShipmentFulfillmentReadinessInfo> ShipmentFulfillmentReadinessInfos { get; set; }

        /// <summary>
        /// a collection of validation results that were applied.
        /// </summary>
        /// <value>a collection of validation results that were applied.</value>
        [DataMember(Name = "validationResults", EmitDefaultValue = false)]
        public List<ValidationResult> ValidationResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderProcessingResult {\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  ExecutionResult: ").Append(ExecutionResult).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  ProcessingExceptions: ").Append(ProcessingExceptions).Append("\n");
            sb.Append("  ResultingOrder: ").Append(ResultingOrder).Append("\n");
            sb.Append("  ShipmentFulfillmentReadinessInfos: ").Append(ShipmentFulfillmentReadinessInfos).Append("\n");
            sb.Append("  ValidationResults: ").Append(ValidationResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderProcessingResult);
        }

        /// <summary>
        /// Returns true if OrderProcessingResult instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderProcessingResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderProcessingResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Arguments == input.Arguments ||
                    this.Arguments != null &&
                    input.Arguments != null &&
                    this.Arguments.SequenceEqual(input.Arguments)
                ) && 
                (
                    this.ExecutionResult == input.ExecutionResult ||
                    this.ExecutionResult.Equals(input.ExecutionResult)
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.ProcessingExceptions == input.ProcessingExceptions ||
                    this.ProcessingExceptions != null &&
                    input.ProcessingExceptions != null &&
                    this.ProcessingExceptions.SequenceEqual(input.ProcessingExceptions)
                ) && 
                (
                    this.ResultingOrder == input.ResultingOrder ||
                    (this.ResultingOrder != null &&
                    this.ResultingOrder.Equals(input.ResultingOrder))
                ) && 
                (
                    this.ShipmentFulfillmentReadinessInfos == input.ShipmentFulfillmentReadinessInfos ||
                    this.ShipmentFulfillmentReadinessInfos != null &&
                    input.ShipmentFulfillmentReadinessInfos != null &&
                    this.ShipmentFulfillmentReadinessInfos.SequenceEqual(input.ShipmentFulfillmentReadinessInfos)
                ) && 
                (
                    this.ValidationResults == input.ValidationResults ||
                    this.ValidationResults != null &&
                    input.ValidationResults != null &&
                    this.ValidationResults.SequenceEqual(input.ValidationResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Arguments != null)
                    hashCode = hashCode * 59 + this.Arguments.GetHashCode();
                hashCode = hashCode * 59 + this.ExecutionResult.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.ProcessingExceptions != null)
                    hashCode = hashCode * 59 + this.ProcessingExceptions.GetHashCode();
                if (this.ResultingOrder != null)
                    hashCode = hashCode * 59 + this.ResultingOrder.GetHashCode();
                if (this.ShipmentFulfillmentReadinessInfos != null)
                    hashCode = hashCode * 59 + this.ShipmentFulfillmentReadinessInfos.GetHashCode();
                if (this.ValidationResults != null)
                    hashCode = hashCode * 59 + this.ValidationResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
