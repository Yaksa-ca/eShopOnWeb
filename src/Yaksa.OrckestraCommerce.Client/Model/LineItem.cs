/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// LineItem
    /// </summary>
    [DataContract(Name = "LineItem")]
    public partial class LineItem : IEquatable<LineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItem" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="giftMessage">if the product is to be gift-wrapped, a message to be written on it..</param>
        /// <param name="giftWrap">whether or not the item will wrapped in a gift presentation..</param>
        /// <param name="placedPrice">Gets or sets the placed price of the line item at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system..</param>
        /// <param name="productId">The unique identifier of the product. (required).</param>
        /// <param name="quantity">The number of items bought for this Product. (required).</param>
        /// <param name="recurringOrderFrequencyName">the name of the recurring order program frequency..</param>
        /// <param name="recurringOrderProgramName">the name of the recurring order program..</param>
        /// <param name="variantId">The unique identifier of the product variant, if there is one..</param>
        /// <param name="additionalFeeAmount">The amount for all line item additional fees applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="additionalFees">The collection of additional fees to apply on this line item..</param>
        /// <param name="catalogId">The unique identifier of the catalog where the product belongs. (required).</param>
        /// <param name="currentPrice">The price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow..</param>
        /// <param name="defaultListPrice">The default price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow..</param>
        /// <param name="defaultPrice">The default price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow..</param>
        /// <param name="discountAmount">The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="isGiftItem">item is a gift.</param>
        /// <param name="kvaDisplayValues">kvaDisplayValues.</param>
        /// <param name="kvaValues">kvaValues.</param>
        /// <param name="listPrice">The price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow..</param>
        /// <param name="placedQuantity">The placed quantity of product to purchase at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system. A decimal number can be used for products sold with a unit of measure (pounds, kilos, etc.)..</param>
        /// <param name="pricingCalculationSummary">pricingCalculationSummary.</param>
        /// <param name="productDefinitionName">the product definition name..</param>
        /// <param name="productSummary">productSummary.</param>
        /// <param name="regularPrice">The current regular price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow..</param>
        /// <param name="reservationStatus">The LineItem inventory reservation status..</param>
        /// <param name="rewards">The collection of RewardDefinitions to apply on this line item..</param>
        /// <param name="shipmentId">The unique identifier of the shipment to use for this item. The shipment reference must be available within the same cart or order..</param>
        /// <param name="sku">The LineItem Sku.</param>
        /// <param name="status">The LineItem status, according to the LineItemStatus lookup..</param>
        /// <param name="total">The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="totalWithoutDiscount">The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        public LineItem(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string giftMessage = default(string), bool giftWrap = default(bool), double placedPrice = default(double), string productId = default(string), double quantity = default(double), string recurringOrderFrequencyName = default(string), string recurringOrderProgramName = default(string), string variantId = default(string), double additionalFeeAmount = default(double), List<LineItemAdditionalFee> additionalFees = default(List<LineItemAdditionalFee>), string catalogId = default(string), double currentPrice = default(double), double defaultListPrice = default(double), double defaultPrice = default(double), double discountAmount = default(double), bool isGiftItem = default(bool), Dictionary<string, Object> kvaDisplayValues = default(Dictionary<string, Object>), Dictionary<string, Object> kvaValues = default(Dictionary<string, Object>), double listPrice = default(double), double placedQuantity = default(double), PricingCalculationSummary pricingCalculationSummary = default(PricingCalculationSummary), string productDefinitionName = default(string), CartProductSummary productSummary = default(CartProductSummary), double regularPrice = default(double), string reservationStatus = default(string), List<Reward> rewards = default(List<Reward>), string shipmentId = default(string), string sku = default(string), string status = default(string), double total = default(double), double totalWithoutDiscount = default(double))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for LineItem and cannot be null");
            // to ensure "productId" is required (not null)
            this.ProductId = productId ?? throw new ArgumentNullException("productId is a required property for LineItem and cannot be null");
            this.Quantity = quantity;
            // to ensure "catalogId" is required (not null)
            this.CatalogId = catalogId ?? throw new ArgumentNullException("catalogId is a required property for LineItem and cannot be null");
            this.PropertyBag = propertyBag;
            this.GiftMessage = giftMessage;
            this.GiftWrap = giftWrap;
            this.PlacedPrice = placedPrice;
            this.RecurringOrderFrequencyName = recurringOrderFrequencyName;
            this.RecurringOrderProgramName = recurringOrderProgramName;
            this.VariantId = variantId;
            this.AdditionalFeeAmount = additionalFeeAmount;
            this.AdditionalFees = additionalFees;
            this.CurrentPrice = currentPrice;
            this.DefaultListPrice = defaultListPrice;
            this.DefaultPrice = defaultPrice;
            this.DiscountAmount = discountAmount;
            this.IsGiftItem = isGiftItem;
            this.KvaDisplayValues = kvaDisplayValues;
            this.KvaValues = kvaValues;
            this.ListPrice = listPrice;
            this.PlacedQuantity = placedQuantity;
            this.PricingCalculationSummary = pricingCalculationSummary;
            this.ProductDefinitionName = productDefinitionName;
            this.ProductSummary = productSummary;
            this.RegularPrice = regularPrice;
            this.ReservationStatus = reservationStatus;
            this.Rewards = rewards;
            this.ShipmentId = shipmentId;
            this.Sku = sku;
            this.Status = status;
            this.Total = total;
            this.TotalWithoutDiscount = totalWithoutDiscount;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// if the product is to be gift-wrapped, a message to be written on it.
        /// </summary>
        /// <value>if the product is to be gift-wrapped, a message to be written on it.</value>
        [DataMember(Name = "giftMessage", EmitDefaultValue = false)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// whether or not the item will wrapped in a gift presentation.
        /// </summary>
        /// <value>whether or not the item will wrapped in a gift presentation.</value>
        [DataMember(Name = "giftWrap", EmitDefaultValue = true)]
        public bool GiftWrap { get; set; }

        /// <summary>
        /// Gets or sets the placed price of the line item at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system.
        /// </summary>
        /// <value>Gets or sets the placed price of the line item at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system.</value>
        [DataMember(Name = "placedPrice", EmitDefaultValue = false)]
        public double PlacedPrice { get; set; }

        /// <summary>
        /// The unique identifier of the product.
        /// </summary>
        /// <value>The unique identifier of the product.</value>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// The number of items bought for this Product.
        /// </summary>
        /// <value>The number of items bought for this Product.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// the name of the recurring order program frequency.
        /// </summary>
        /// <value>the name of the recurring order program frequency.</value>
        [DataMember(Name = "recurringOrderFrequencyName", EmitDefaultValue = false)]
        public string RecurringOrderFrequencyName { get; set; }

        /// <summary>
        /// the name of the recurring order program.
        /// </summary>
        /// <value>the name of the recurring order program.</value>
        [DataMember(Name = "recurringOrderProgramName", EmitDefaultValue = false)]
        public string RecurringOrderProgramName { get; set; }

        /// <summary>
        /// The unique identifier of the product variant, if there is one.
        /// </summary>
        /// <value>The unique identifier of the product variant, if there is one.</value>
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// The amount for all line item additional fees applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>The amount for all line item additional fees applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "additionalFeeAmount", EmitDefaultValue = false)]
        public double AdditionalFeeAmount { get; set; }

        /// <summary>
        /// The collection of additional fees to apply on this line item.
        /// </summary>
        /// <value>The collection of additional fees to apply on this line item.</value>
        [DataMember(Name = "additionalFees", EmitDefaultValue = false)]
        public List<LineItemAdditionalFee> AdditionalFees { get; set; }

        /// <summary>
        /// The unique identifier of the catalog where the product belongs.
        /// </summary>
        /// <value>The unique identifier of the catalog where the product belongs.</value>
        [DataMember(Name = "catalogId", IsRequired = true, EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// The price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.
        /// </summary>
        /// <value>The price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.</value>
        [DataMember(Name = "currentPrice", EmitDefaultValue = false)]
        public double CurrentPrice { get; set; }

        /// <summary>
        /// The default price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.
        /// </summary>
        /// <value>The default price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.</value>
        [DataMember(Name = "defaultListPrice", EmitDefaultValue = false)]
        public double DefaultListPrice { get; set; }

        /// <summary>
        /// The default price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.
        /// </summary>
        /// <value>The default price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.</value>
        [DataMember(Name = "defaultPrice", EmitDefaultValue = false)]
        public double DefaultPrice { get; set; }

        /// <summary>
        /// The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>The amount for all discounts applied to this line item. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "discountAmount", EmitDefaultValue = false)]
        public double DiscountAmount { get; set; }

        /// <summary>
        /// item is a gift
        /// </summary>
        /// <value>item is a gift</value>
        [DataMember(Name = "isGiftItem", EmitDefaultValue = true)]
        public bool IsGiftItem { get; set; }

        /// <summary>
        /// Gets or Sets KvaDisplayValues
        /// </summary>
        [DataMember(Name = "kvaDisplayValues", EmitDefaultValue = false)]
        public Dictionary<string, Object> KvaDisplayValues { get; set; }

        /// <summary>
        /// Gets or Sets KvaValues
        /// </summary>
        [DataMember(Name = "kvaValues", EmitDefaultValue = false)]
        public Dictionary<string, Object> KvaValues { get; set; }

        /// <summary>
        /// The price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.
        /// </summary>
        /// <value>The price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.</value>
        [DataMember(Name = "listPrice", EmitDefaultValue = false)]
        public double ListPrice { get; set; }

        /// <summary>
        /// The placed quantity of product to purchase at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system. A decimal number can be used for products sold with a unit of measure (pounds, kilos, etc.).
        /// </summary>
        /// <value>The placed quantity of product to purchase at the moment the cart was submitted either on order creation or order modification. This value is set automatically by the system. A decimal number can be used for products sold with a unit of measure (pounds, kilos, etc.).</value>
        [DataMember(Name = "placedQuantity", EmitDefaultValue = false)]
        public double PlacedQuantity { get; set; }

        /// <summary>
        /// Gets or Sets PricingCalculationSummary
        /// </summary>
        [DataMember(Name = "pricingCalculationSummary", EmitDefaultValue = false)]
        public PricingCalculationSummary PricingCalculationSummary { get; set; }

        /// <summary>
        /// the product definition name.
        /// </summary>
        /// <value>the product definition name.</value>
        [DataMember(Name = "productDefinitionName", EmitDefaultValue = false)]
        public string ProductDefinitionName { get; set; }

        /// <summary>
        /// Gets or Sets ProductSummary
        /// </summary>
        [DataMember(Name = "productSummary", EmitDefaultValue = false)]
        public CartProductSummary ProductSummary { get; set; }

        /// <summary>
        /// The current regular price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.
        /// </summary>
        /// <value>The current regular price for one instance of the item (quantity &#x3D; 1), at the moment that the item is to be processed by the workflow.</value>
        [DataMember(Name = "regularPrice", EmitDefaultValue = false)]
        public double RegularPrice { get; set; }

        /// <summary>
        /// The LineItem inventory reservation status.
        /// </summary>
        /// <value>The LineItem inventory reservation status.</value>
        [DataMember(Name = "reservationStatus", EmitDefaultValue = false)]
        public string ReservationStatus { get; set; }

        /// <summary>
        /// The collection of RewardDefinitions to apply on this line item.
        /// </summary>
        /// <value>The collection of RewardDefinitions to apply on this line item.</value>
        [DataMember(Name = "rewards", EmitDefaultValue = false)]
        public List<Reward> Rewards { get; set; }

        /// <summary>
        /// The unique identifier of the shipment to use for this item. The shipment reference must be available within the same cart or order.
        /// </summary>
        /// <value>The unique identifier of the shipment to use for this item. The shipment reference must be available within the same cart or order.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The LineItem Sku
        /// </summary>
        /// <value>The LineItem Sku</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// The LineItem status, according to the LineItemStatus lookup.
        /// </summary>
        /// <value>The LineItem status, according to the LineItemStatus lookup.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>The total amount for this line item, including discounts (list price * quantity - discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "totalWithoutDiscount", EmitDefaultValue = false)]
        public double TotalWithoutDiscount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  GiftWrap: ").Append(GiftWrap).Append("\n");
            sb.Append("  PlacedPrice: ").Append(PlacedPrice).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RecurringOrderFrequencyName: ").Append(RecurringOrderFrequencyName).Append("\n");
            sb.Append("  RecurringOrderProgramName: ").Append(RecurringOrderProgramName).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("  AdditionalFeeAmount: ").Append(AdditionalFeeAmount).Append("\n");
            sb.Append("  AdditionalFees: ").Append(AdditionalFees).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  CurrentPrice: ").Append(CurrentPrice).Append("\n");
            sb.Append("  DefaultListPrice: ").Append(DefaultListPrice).Append("\n");
            sb.Append("  DefaultPrice: ").Append(DefaultPrice).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  IsGiftItem: ").Append(IsGiftItem).Append("\n");
            sb.Append("  KvaDisplayValues: ").Append(KvaDisplayValues).Append("\n");
            sb.Append("  KvaValues: ").Append(KvaValues).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  PlacedQuantity: ").Append(PlacedQuantity).Append("\n");
            sb.Append("  PricingCalculationSummary: ").Append(PricingCalculationSummary).Append("\n");
            sb.Append("  ProductDefinitionName: ").Append(ProductDefinitionName).Append("\n");
            sb.Append("  ProductSummary: ").Append(ProductSummary).Append("\n");
            sb.Append("  RegularPrice: ").Append(RegularPrice).Append("\n");
            sb.Append("  ReservationStatus: ").Append(ReservationStatus).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalWithoutDiscount: ").Append(TotalWithoutDiscount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LineItem);
        }

        /// <summary>
        /// Returns true if LineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of LineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.GiftMessage == input.GiftMessage ||
                    (this.GiftMessage != null &&
                    this.GiftMessage.Equals(input.GiftMessage))
                ) && 
                (
                    this.GiftWrap == input.GiftWrap ||
                    this.GiftWrap.Equals(input.GiftWrap)
                ) && 
                (
                    this.PlacedPrice == input.PlacedPrice ||
                    this.PlacedPrice.Equals(input.PlacedPrice)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.RecurringOrderFrequencyName == input.RecurringOrderFrequencyName ||
                    (this.RecurringOrderFrequencyName != null &&
                    this.RecurringOrderFrequencyName.Equals(input.RecurringOrderFrequencyName))
                ) && 
                (
                    this.RecurringOrderProgramName == input.RecurringOrderProgramName ||
                    (this.RecurringOrderProgramName != null &&
                    this.RecurringOrderProgramName.Equals(input.RecurringOrderProgramName))
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                ) && 
                (
                    this.AdditionalFeeAmount == input.AdditionalFeeAmount ||
                    this.AdditionalFeeAmount.Equals(input.AdditionalFeeAmount)
                ) && 
                (
                    this.AdditionalFees == input.AdditionalFees ||
                    this.AdditionalFees != null &&
                    input.AdditionalFees != null &&
                    this.AdditionalFees.SequenceEqual(input.AdditionalFees)
                ) && 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.CurrentPrice == input.CurrentPrice ||
                    this.CurrentPrice.Equals(input.CurrentPrice)
                ) && 
                (
                    this.DefaultListPrice == input.DefaultListPrice ||
                    this.DefaultListPrice.Equals(input.DefaultListPrice)
                ) && 
                (
                    this.DefaultPrice == input.DefaultPrice ||
                    this.DefaultPrice.Equals(input.DefaultPrice)
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    this.DiscountAmount.Equals(input.DiscountAmount)
                ) && 
                (
                    this.IsGiftItem == input.IsGiftItem ||
                    this.IsGiftItem.Equals(input.IsGiftItem)
                ) && 
                (
                    this.KvaDisplayValues == input.KvaDisplayValues ||
                    this.KvaDisplayValues != null &&
                    input.KvaDisplayValues != null &&
                    this.KvaDisplayValues.SequenceEqual(input.KvaDisplayValues)
                ) && 
                (
                    this.KvaValues == input.KvaValues ||
                    this.KvaValues != null &&
                    input.KvaValues != null &&
                    this.KvaValues.SequenceEqual(input.KvaValues)
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    this.ListPrice.Equals(input.ListPrice)
                ) && 
                (
                    this.PlacedQuantity == input.PlacedQuantity ||
                    this.PlacedQuantity.Equals(input.PlacedQuantity)
                ) && 
                (
                    this.PricingCalculationSummary == input.PricingCalculationSummary ||
                    (this.PricingCalculationSummary != null &&
                    this.PricingCalculationSummary.Equals(input.PricingCalculationSummary))
                ) && 
                (
                    this.ProductDefinitionName == input.ProductDefinitionName ||
                    (this.ProductDefinitionName != null &&
                    this.ProductDefinitionName.Equals(input.ProductDefinitionName))
                ) && 
                (
                    this.ProductSummary == input.ProductSummary ||
                    (this.ProductSummary != null &&
                    this.ProductSummary.Equals(input.ProductSummary))
                ) && 
                (
                    this.RegularPrice == input.RegularPrice ||
                    this.RegularPrice.Equals(input.RegularPrice)
                ) && 
                (
                    this.ReservationStatus == input.ReservationStatus ||
                    (this.ReservationStatus != null &&
                    this.ReservationStatus.Equals(input.ReservationStatus))
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    this.Rewards != null &&
                    input.Rewards != null &&
                    this.Rewards.SequenceEqual(input.Rewards)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.TotalWithoutDiscount == input.TotalWithoutDiscount ||
                    this.TotalWithoutDiscount.Equals(input.TotalWithoutDiscount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.GiftMessage != null)
                    hashCode = hashCode * 59 + this.GiftMessage.GetHashCode();
                hashCode = hashCode * 59 + this.GiftWrap.GetHashCode();
                hashCode = hashCode * 59 + this.PlacedPrice.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RecurringOrderFrequencyName != null)
                    hashCode = hashCode * 59 + this.RecurringOrderFrequencyName.GetHashCode();
                if (this.RecurringOrderProgramName != null)
                    hashCode = hashCode * 59 + this.RecurringOrderProgramName.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                hashCode = hashCode * 59 + this.AdditionalFeeAmount.GetHashCode();
                if (this.AdditionalFees != null)
                    hashCode = hashCode * 59 + this.AdditionalFees.GetHashCode();
                if (this.CatalogId != null)
                    hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentPrice.GetHashCode();
                hashCode = hashCode * 59 + this.DefaultListPrice.GetHashCode();
                hashCode = hashCode * 59 + this.DefaultPrice.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                hashCode = hashCode * 59 + this.IsGiftItem.GetHashCode();
                if (this.KvaDisplayValues != null)
                    hashCode = hashCode * 59 + this.KvaDisplayValues.GetHashCode();
                if (this.KvaValues != null)
                    hashCode = hashCode * 59 + this.KvaValues.GetHashCode();
                hashCode = hashCode * 59 + this.ListPrice.GetHashCode();
                hashCode = hashCode * 59 + this.PlacedQuantity.GetHashCode();
                if (this.PricingCalculationSummary != null)
                    hashCode = hashCode * 59 + this.PricingCalculationSummary.GetHashCode();
                if (this.ProductDefinitionName != null)
                    hashCode = hashCode * 59 + this.ProductDefinitionName.GetHashCode();
                if (this.ProductSummary != null)
                    hashCode = hashCode * 59 + this.ProductSummary.GetHashCode();
                hashCode = hashCode * 59 + this.RegularPrice.GetHashCode();
                if (this.ReservationStatus != null)
                    hashCode = hashCode * 59 + this.ReservationStatus.GetHashCode();
                if (this.Rewards != null)
                    hashCode = hashCode * 59 + this.Rewards.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                hashCode = hashCode * 59 + this.TotalWithoutDiscount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
