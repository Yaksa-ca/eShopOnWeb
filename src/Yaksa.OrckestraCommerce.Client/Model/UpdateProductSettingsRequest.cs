/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "UpdateProductSettingsRequest")]
    public partial class UpdateProductSettingsRequest : IEquatable<UpdateProductSettingsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProductSettingsRequest" /> class.
        /// </summary>
        /// <param name="allowTranslationFromSalesToGlobal">whether or not the changes to multilingual attributes in a sales scope should be copied over to the Global scope..</param>
        /// <param name="availableInventoryStatuses">the list of inventory statuses available to search..</param>
        /// <param name="defaultProductImportStatus">Specify what will be the Active value for the products imported..</param>
        /// <param name="enableExtendedProductWorkflow">a value indicating whether the product workflow is simple (false) or with composer (true)..</param>
        /// <param name="isInventoryEnabled">Determine if the inventory is enabled.</param>
        /// <param name="isPricingAuditEnabled">the changes made to an price will be audited.</param>
        /// <param name="maxNumberOfMediaItems">the maximum number of media items.</param>
        /// <param name="maxNumberOfProductAttributes">the maximum number of product attributes.</param>
        /// <param name="maxNumberOfRelationships">the maximum number of relations.</param>
        /// <param name="maxNumberOfVariantAttributes">the maximum number of variant attributes..</param>
        /// <param name="maxNumberOfVariants">the maximum number of variants.</param>
        /// <param name="newProductDays">the number of days the product stays in the New count..</param>
        /// <param name="notifySameScopeOtherLanguages">Whether or not to create notifications (for changes in system culture)  to all other languages of the same scope as the changes..</param>
        /// <param name="overrideGreaterThanZeroPricingConstraint">System setting to allow overriding the default behavior of not allowing any product with regular prices to be saved at 0 pricing..</param>
        /// <param name="productExportMaxNumberOfItemPerFile">the maximum number of product in a file for the product export..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="skuUniquenessLevel">Specifies the product and variant sku uniqueness level..</param>
        public UpdateProductSettingsRequest(bool allowTranslationFromSalesToGlobal = default(bool), string availableInventoryStatuses = default(string), string defaultProductImportStatus = default(string), bool enableExtendedProductWorkflow = default(bool), bool isInventoryEnabled = default(bool), bool isPricingAuditEnabled = default(bool), int maxNumberOfMediaItems = default(int), int maxNumberOfProductAttributes = default(int), int maxNumberOfRelationships = default(int), int maxNumberOfVariantAttributes = default(int), int maxNumberOfVariants = default(int), int newProductDays = default(int), bool notifySameScopeOtherLanguages = default(bool), bool overrideGreaterThanZeroPricingConstraint = default(bool), int productExportMaxNumberOfItemPerFile = default(int), Dictionary<string, string> propertyBag = default(Dictionary<string, string>), string skuUniquenessLevel = default(string))
        {
            this.AllowTranslationFromSalesToGlobal = allowTranslationFromSalesToGlobal;
            this.AvailableInventoryStatuses = availableInventoryStatuses;
            this.DefaultProductImportStatus = defaultProductImportStatus;
            this.EnableExtendedProductWorkflow = enableExtendedProductWorkflow;
            this.IsInventoryEnabled = isInventoryEnabled;
            this.IsPricingAuditEnabled = isPricingAuditEnabled;
            this.MaxNumberOfMediaItems = maxNumberOfMediaItems;
            this.MaxNumberOfProductAttributes = maxNumberOfProductAttributes;
            this.MaxNumberOfRelationships = maxNumberOfRelationships;
            this.MaxNumberOfVariantAttributes = maxNumberOfVariantAttributes;
            this.MaxNumberOfVariants = maxNumberOfVariants;
            this.NewProductDays = newProductDays;
            this.NotifySameScopeOtherLanguages = notifySameScopeOtherLanguages;
            this.OverrideGreaterThanZeroPricingConstraint = overrideGreaterThanZeroPricingConstraint;
            this.ProductExportMaxNumberOfItemPerFile = productExportMaxNumberOfItemPerFile;
            this.PropertyBag = propertyBag;
            this.SkuUniquenessLevel = skuUniquenessLevel;
        }

        /// <summary>
        /// whether or not the changes to multilingual attributes in a sales scope should be copied over to the Global scope.
        /// </summary>
        /// <value>whether or not the changes to multilingual attributes in a sales scope should be copied over to the Global scope.</value>
        [DataMember(Name = "allowTranslationFromSalesToGlobal", EmitDefaultValue = true)]
        public bool AllowTranslationFromSalesToGlobal { get; set; }

        /// <summary>
        /// the list of inventory statuses available to search.
        /// </summary>
        /// <value>the list of inventory statuses available to search.</value>
        [DataMember(Name = "availableInventoryStatuses", EmitDefaultValue = false)]
        public string AvailableInventoryStatuses { get; set; }

        /// <summary>
        /// Specify what will be the Active value for the products imported.
        /// </summary>
        /// <value>Specify what will be the Active value for the products imported.</value>
        [DataMember(Name = "defaultProductImportStatus", EmitDefaultValue = false)]
        public string DefaultProductImportStatus { get; set; }

        /// <summary>
        /// a value indicating whether the product workflow is simple (false) or with composer (true).
        /// </summary>
        /// <value>a value indicating whether the product workflow is simple (false) or with composer (true).</value>
        [DataMember(Name = "enableExtendedProductWorkflow", EmitDefaultValue = true)]
        public bool EnableExtendedProductWorkflow { get; set; }

        /// <summary>
        /// Determine if the inventory is enabled
        /// </summary>
        /// <value>Determine if the inventory is enabled</value>
        [DataMember(Name = "isInventoryEnabled", EmitDefaultValue = true)]
        public bool IsInventoryEnabled { get; set; }

        /// <summary>
        /// the changes made to an price will be audited
        /// </summary>
        /// <value>the changes made to an price will be audited</value>
        [DataMember(Name = "isPricingAuditEnabled", EmitDefaultValue = true)]
        public bool IsPricingAuditEnabled { get; set; }

        /// <summary>
        /// the maximum number of media items
        /// </summary>
        /// <value>the maximum number of media items</value>
        [DataMember(Name = "maxNumberOfMediaItems", EmitDefaultValue = false)]
        public int MaxNumberOfMediaItems { get; set; }

        /// <summary>
        /// the maximum number of product attributes
        /// </summary>
        /// <value>the maximum number of product attributes</value>
        [DataMember(Name = "maxNumberOfProductAttributes", EmitDefaultValue = false)]
        public int MaxNumberOfProductAttributes { get; set; }

        /// <summary>
        /// the maximum number of relations
        /// </summary>
        /// <value>the maximum number of relations</value>
        [DataMember(Name = "maxNumberOfRelationships", EmitDefaultValue = false)]
        public int MaxNumberOfRelationships { get; set; }

        /// <summary>
        /// the maximum number of variant attributes.
        /// </summary>
        /// <value>the maximum number of variant attributes.</value>
        [DataMember(Name = "maxNumberOfVariantAttributes", EmitDefaultValue = false)]
        public int MaxNumberOfVariantAttributes { get; set; }

        /// <summary>
        /// the maximum number of variants
        /// </summary>
        /// <value>the maximum number of variants</value>
        [DataMember(Name = "maxNumberOfVariants", EmitDefaultValue = false)]
        public int MaxNumberOfVariants { get; set; }

        /// <summary>
        /// the number of days the product stays in the New count.
        /// </summary>
        /// <value>the number of days the product stays in the New count.</value>
        [DataMember(Name = "newProductDays", EmitDefaultValue = false)]
        public int NewProductDays { get; set; }

        /// <summary>
        /// Whether or not to create notifications (for changes in system culture)  to all other languages of the same scope as the changes.
        /// </summary>
        /// <value>Whether or not to create notifications (for changes in system culture)  to all other languages of the same scope as the changes.</value>
        [DataMember(Name = "notifySameScopeOtherLanguages", EmitDefaultValue = true)]
        public bool NotifySameScopeOtherLanguages { get; set; }

        /// <summary>
        /// System setting to allow overriding the default behavior of not allowing any product with regular prices to be saved at 0 pricing.
        /// </summary>
        /// <value>System setting to allow overriding the default behavior of not allowing any product with regular prices to be saved at 0 pricing.</value>
        [DataMember(Name = "overrideGreaterThanZeroPricingConstraint", EmitDefaultValue = true)]
        public bool OverrideGreaterThanZeroPricingConstraint { get; set; }

        /// <summary>
        /// the maximum number of product in a file for the product export.
        /// </summary>
        /// <value>the maximum number of product in a file for the product export.</value>
        [DataMember(Name = "productExportMaxNumberOfItemPerFile", EmitDefaultValue = false)]
        public int ProductExportMaxNumberOfItemPerFile { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, string> PropertyBag { get; set; }

        /// <summary>
        /// Specifies the product and variant sku uniqueness level.
        /// </summary>
        /// <value>Specifies the product and variant sku uniqueness level.</value>
        [DataMember(Name = "skuUniquenessLevel", EmitDefaultValue = false)]
        public string SkuUniquenessLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateProductSettingsRequest {\n");
            sb.Append("  AllowTranslationFromSalesToGlobal: ").Append(AllowTranslationFromSalesToGlobal).Append("\n");
            sb.Append("  AvailableInventoryStatuses: ").Append(AvailableInventoryStatuses).Append("\n");
            sb.Append("  DefaultProductImportStatus: ").Append(DefaultProductImportStatus).Append("\n");
            sb.Append("  EnableExtendedProductWorkflow: ").Append(EnableExtendedProductWorkflow).Append("\n");
            sb.Append("  IsInventoryEnabled: ").Append(IsInventoryEnabled).Append("\n");
            sb.Append("  IsPricingAuditEnabled: ").Append(IsPricingAuditEnabled).Append("\n");
            sb.Append("  MaxNumberOfMediaItems: ").Append(MaxNumberOfMediaItems).Append("\n");
            sb.Append("  MaxNumberOfProductAttributes: ").Append(MaxNumberOfProductAttributes).Append("\n");
            sb.Append("  MaxNumberOfRelationships: ").Append(MaxNumberOfRelationships).Append("\n");
            sb.Append("  MaxNumberOfVariantAttributes: ").Append(MaxNumberOfVariantAttributes).Append("\n");
            sb.Append("  MaxNumberOfVariants: ").Append(MaxNumberOfVariants).Append("\n");
            sb.Append("  NewProductDays: ").Append(NewProductDays).Append("\n");
            sb.Append("  NotifySameScopeOtherLanguages: ").Append(NotifySameScopeOtherLanguages).Append("\n");
            sb.Append("  OverrideGreaterThanZeroPricingConstraint: ").Append(OverrideGreaterThanZeroPricingConstraint).Append("\n");
            sb.Append("  ProductExportMaxNumberOfItemPerFile: ").Append(ProductExportMaxNumberOfItemPerFile).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  SkuUniquenessLevel: ").Append(SkuUniquenessLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateProductSettingsRequest);
        }

        /// <summary>
        /// Returns true if UpdateProductSettingsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateProductSettingsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateProductSettingsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowTranslationFromSalesToGlobal == input.AllowTranslationFromSalesToGlobal ||
                    this.AllowTranslationFromSalesToGlobal.Equals(input.AllowTranslationFromSalesToGlobal)
                ) && 
                (
                    this.AvailableInventoryStatuses == input.AvailableInventoryStatuses ||
                    (this.AvailableInventoryStatuses != null &&
                    this.AvailableInventoryStatuses.Equals(input.AvailableInventoryStatuses))
                ) && 
                (
                    this.DefaultProductImportStatus == input.DefaultProductImportStatus ||
                    (this.DefaultProductImportStatus != null &&
                    this.DefaultProductImportStatus.Equals(input.DefaultProductImportStatus))
                ) && 
                (
                    this.EnableExtendedProductWorkflow == input.EnableExtendedProductWorkflow ||
                    this.EnableExtendedProductWorkflow.Equals(input.EnableExtendedProductWorkflow)
                ) && 
                (
                    this.IsInventoryEnabled == input.IsInventoryEnabled ||
                    this.IsInventoryEnabled.Equals(input.IsInventoryEnabled)
                ) && 
                (
                    this.IsPricingAuditEnabled == input.IsPricingAuditEnabled ||
                    this.IsPricingAuditEnabled.Equals(input.IsPricingAuditEnabled)
                ) && 
                (
                    this.MaxNumberOfMediaItems == input.MaxNumberOfMediaItems ||
                    this.MaxNumberOfMediaItems.Equals(input.MaxNumberOfMediaItems)
                ) && 
                (
                    this.MaxNumberOfProductAttributes == input.MaxNumberOfProductAttributes ||
                    this.MaxNumberOfProductAttributes.Equals(input.MaxNumberOfProductAttributes)
                ) && 
                (
                    this.MaxNumberOfRelationships == input.MaxNumberOfRelationships ||
                    this.MaxNumberOfRelationships.Equals(input.MaxNumberOfRelationships)
                ) && 
                (
                    this.MaxNumberOfVariantAttributes == input.MaxNumberOfVariantAttributes ||
                    this.MaxNumberOfVariantAttributes.Equals(input.MaxNumberOfVariantAttributes)
                ) && 
                (
                    this.MaxNumberOfVariants == input.MaxNumberOfVariants ||
                    this.MaxNumberOfVariants.Equals(input.MaxNumberOfVariants)
                ) && 
                (
                    this.NewProductDays == input.NewProductDays ||
                    this.NewProductDays.Equals(input.NewProductDays)
                ) && 
                (
                    this.NotifySameScopeOtherLanguages == input.NotifySameScopeOtherLanguages ||
                    this.NotifySameScopeOtherLanguages.Equals(input.NotifySameScopeOtherLanguages)
                ) && 
                (
                    this.OverrideGreaterThanZeroPricingConstraint == input.OverrideGreaterThanZeroPricingConstraint ||
                    this.OverrideGreaterThanZeroPricingConstraint.Equals(input.OverrideGreaterThanZeroPricingConstraint)
                ) && 
                (
                    this.ProductExportMaxNumberOfItemPerFile == input.ProductExportMaxNumberOfItemPerFile ||
                    this.ProductExportMaxNumberOfItemPerFile.Equals(input.ProductExportMaxNumberOfItemPerFile)
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.SkuUniquenessLevel == input.SkuUniquenessLevel ||
                    (this.SkuUniquenessLevel != null &&
                    this.SkuUniquenessLevel.Equals(input.SkuUniquenessLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowTranslationFromSalesToGlobal.GetHashCode();
                if (this.AvailableInventoryStatuses != null)
                    hashCode = hashCode * 59 + this.AvailableInventoryStatuses.GetHashCode();
                if (this.DefaultProductImportStatus != null)
                    hashCode = hashCode * 59 + this.DefaultProductImportStatus.GetHashCode();
                hashCode = hashCode * 59 + this.EnableExtendedProductWorkflow.GetHashCode();
                hashCode = hashCode * 59 + this.IsInventoryEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.IsPricingAuditEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNumberOfMediaItems.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNumberOfProductAttributes.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNumberOfRelationships.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNumberOfVariantAttributes.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNumberOfVariants.GetHashCode();
                hashCode = hashCode * 59 + this.NewProductDays.GetHashCode();
                hashCode = hashCode * 59 + this.NotifySameScopeOtherLanguages.GetHashCode();
                hashCode = hashCode * 59 + this.OverrideGreaterThanZeroPricingConstraint.GetHashCode();
                hashCode = hashCode * 59 + this.ProductExportMaxNumberOfItemPerFile.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.SkuUniquenessLevel != null)
                    hashCode = hashCode * 59 + this.SkuUniquenessLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
