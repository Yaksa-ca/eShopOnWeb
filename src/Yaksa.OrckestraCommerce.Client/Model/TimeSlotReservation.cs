/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// TimeSlotReservation
    /// </summary>
    [DataContract(Name = "TimeSlotReservation")]
    public partial class TimeSlotReservation : IEquatable<TimeSlotReservation>, IValidatableObject
    {
        /// <summary>
        /// The reservation status.
        /// </summary>
        /// <value>The reservation status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReservationStatusEnum
        {
            /// <summary>
            /// Enum Tentative for value: Tentative
            /// </summary>
            [EnumMember(Value = "Tentative")]
            Tentative = 1,

            /// <summary>
            /// Enum Confirmed for value: Confirmed
            /// </summary>
            [EnumMember(Value = "Confirmed")]
            Confirmed = 2,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 3,

            /// <summary>
            /// Enum Voided for value: Voided
            /// </summary>
            [EnumMember(Value = "Voided")]
            Voided = 4

        }


        /// <summary>
        /// The reservation status.
        /// </summary>
        /// <value>The reservation status.</value>
        [DataMember(Name = "reservationStatus", IsRequired = true, EmitDefaultValue = false)]
        public ReservationStatusEnum ReservationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSlotReservation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeSlotReservation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSlotReservation" /> class.
        /// </summary>
        /// <param name="cartCustomerId">The cart customer id associated with the reservation. (required).</param>
        /// <param name="cartName">The cart name associated with the reservation. (required).</param>
        /// <param name="cartScopeId">The cart scope id associated with the reservation. (required).</param>
        /// <param name="comment">The reservation comment..</param>
        /// <param name="created">The date and time the reservation was created..</param>
        /// <param name="createdBy">The user who created the reservation..</param>
        /// <param name="expiryDateTime">The reservation expiry time. Required for Tentative status..</param>
        /// <param name="expiryWarningDateTime">The reservation expiry warning time. Required for Tentative status..</param>
        /// <param name="fulfillmentLocationId">The unique identifier of a fulfillment location. (required).</param>
        /// <param name="fulfillmentLocationTimeSlotId">The unique identifier of a fulfillment location timeslot. (required).</param>
        /// <param name="id">The unique identifier of the time slot. (required).</param>
        /// <param name="lastModified">The date and time the reservation was last modified..</param>
        /// <param name="lastModifiedBy">The user who last modified the reservation..</param>
        /// <param name="maxNumberOfRenewals">The maximum number of renewals that can be performed on this reservation..</param>
        /// <param name="numberOfRenewals">The number of renewals performed on this reservation..</param>
        /// <param name="orderId">The unique identifier of an order..</param>
        /// <param name="orderNumber">The order number associated with the reservation..</param>
        /// <param name="reservationDate">The reservation date. (required).</param>
        /// <param name="reservationStatus">The reservation status. (required).</param>
        /// <param name="shipmentId">The unique identifier of a shipment..</param>
        public TimeSlotReservation(string cartCustomerId = default(string), string cartName = default(string), string cartScopeId = default(string), string comment = default(string), DateTime created = default(DateTime), string createdBy = default(string), DateTime expiryDateTime = default(DateTime), DateTime expiryWarningDateTime = default(DateTime), string fulfillmentLocationId = default(string), string fulfillmentLocationTimeSlotId = default(string), string id = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), int maxNumberOfRenewals = default(int), int numberOfRenewals = default(int), string orderId = default(string), string orderNumber = default(string), DateTime reservationDate = default(DateTime), ReservationStatusEnum reservationStatus = default(ReservationStatusEnum), string shipmentId = default(string))
        {
            // to ensure "cartCustomerId" is required (not null)
            this.CartCustomerId = cartCustomerId ?? throw new ArgumentNullException("cartCustomerId is a required property for TimeSlotReservation and cannot be null");
            // to ensure "cartName" is required (not null)
            this.CartName = cartName ?? throw new ArgumentNullException("cartName is a required property for TimeSlotReservation and cannot be null");
            // to ensure "cartScopeId" is required (not null)
            this.CartScopeId = cartScopeId ?? throw new ArgumentNullException("cartScopeId is a required property for TimeSlotReservation and cannot be null");
            // to ensure "fulfillmentLocationId" is required (not null)
            this.FulfillmentLocationId = fulfillmentLocationId ?? throw new ArgumentNullException("fulfillmentLocationId is a required property for TimeSlotReservation and cannot be null");
            // to ensure "fulfillmentLocationTimeSlotId" is required (not null)
            this.FulfillmentLocationTimeSlotId = fulfillmentLocationTimeSlotId ?? throw new ArgumentNullException("fulfillmentLocationTimeSlotId is a required property for TimeSlotReservation and cannot be null");
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for TimeSlotReservation and cannot be null");
            this.ReservationDate = reservationDate;
            this.ReservationStatus = reservationStatus;
            this.Comment = comment;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.ExpiryDateTime = expiryDateTime;
            this.ExpiryWarningDateTime = expiryWarningDateTime;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.MaxNumberOfRenewals = maxNumberOfRenewals;
            this.NumberOfRenewals = numberOfRenewals;
            this.OrderId = orderId;
            this.OrderNumber = orderNumber;
            this.ShipmentId = shipmentId;
        }

        /// <summary>
        /// The cart customer id associated with the reservation.
        /// </summary>
        /// <value>The cart customer id associated with the reservation.</value>
        [DataMember(Name = "cartCustomerId", IsRequired = true, EmitDefaultValue = false)]
        public string CartCustomerId { get; set; }

        /// <summary>
        /// The cart name associated with the reservation.
        /// </summary>
        /// <value>The cart name associated with the reservation.</value>
        [DataMember(Name = "cartName", IsRequired = true, EmitDefaultValue = false)]
        public string CartName { get; set; }

        /// <summary>
        /// The cart scope id associated with the reservation.
        /// </summary>
        /// <value>The cart scope id associated with the reservation.</value>
        [DataMember(Name = "cartScopeId", IsRequired = true, EmitDefaultValue = false)]
        public string CartScopeId { get; set; }

        /// <summary>
        /// The reservation comment.
        /// </summary>
        /// <value>The reservation comment.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// The date and time the reservation was created.
        /// </summary>
        /// <value>The date and time the reservation was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The user who created the reservation.
        /// </summary>
        /// <value>The user who created the reservation.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The reservation expiry time. Required for Tentative status.
        /// </summary>
        /// <value>The reservation expiry time. Required for Tentative status.</value>
        [DataMember(Name = "expiryDateTime", EmitDefaultValue = false)]
        public DateTime ExpiryDateTime { get; set; }

        /// <summary>
        /// The reservation expiry warning time. Required for Tentative status.
        /// </summary>
        /// <value>The reservation expiry warning time. Required for Tentative status.</value>
        [DataMember(Name = "expiryWarningDateTime", EmitDefaultValue = false)]
        public DateTime ExpiryWarningDateTime { get; set; }

        /// <summary>
        /// The unique identifier of a fulfillment location.
        /// </summary>
        /// <value>The unique identifier of a fulfillment location.</value>
        [DataMember(Name = "fulfillmentLocationId", IsRequired = true, EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// The unique identifier of a fulfillment location timeslot.
        /// </summary>
        /// <value>The unique identifier of a fulfillment location timeslot.</value>
        [DataMember(Name = "fulfillmentLocationTimeSlotId", IsRequired = true, EmitDefaultValue = false)]
        public string FulfillmentLocationTimeSlotId { get; set; }

        /// <summary>
        /// The unique identifier of the time slot.
        /// </summary>
        /// <value>The unique identifier of the time slot.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The date and time the reservation was last modified.
        /// </summary>
        /// <value>The date and time the reservation was last modified.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The user who last modified the reservation.
        /// </summary>
        /// <value>The user who last modified the reservation.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The maximum number of renewals that can be performed on this reservation.
        /// </summary>
        /// <value>The maximum number of renewals that can be performed on this reservation.</value>
        [DataMember(Name = "maxNumberOfRenewals", EmitDefaultValue = false)]
        public int MaxNumberOfRenewals { get; set; }

        /// <summary>
        /// The number of renewals performed on this reservation.
        /// </summary>
        /// <value>The number of renewals performed on this reservation.</value>
        [DataMember(Name = "numberOfRenewals", EmitDefaultValue = false)]
        public int NumberOfRenewals { get; set; }

        /// <summary>
        /// The unique identifier of an order.
        /// </summary>
        /// <value>The unique identifier of an order.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The order number associated with the reservation.
        /// </summary>
        /// <value>The order number associated with the reservation.</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The reservation date.
        /// </summary>
        /// <value>The reservation date.</value>
        [DataMember(Name = "reservationDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ReservationDate { get; set; }

        /// <summary>
        /// The unique identifier of a shipment.
        /// </summary>
        /// <value>The unique identifier of a shipment.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeSlotReservation {\n");
            sb.Append("  CartCustomerId: ").Append(CartCustomerId).Append("\n");
            sb.Append("  CartName: ").Append(CartName).Append("\n");
            sb.Append("  CartScopeId: ").Append(CartScopeId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  ExpiryDateTime: ").Append(ExpiryDateTime).Append("\n");
            sb.Append("  ExpiryWarningDateTime: ").Append(ExpiryWarningDateTime).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentLocationTimeSlotId: ").Append(FulfillmentLocationTimeSlotId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  MaxNumberOfRenewals: ").Append(MaxNumberOfRenewals).Append("\n");
            sb.Append("  NumberOfRenewals: ").Append(NumberOfRenewals).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ReservationDate: ").Append(ReservationDate).Append("\n");
            sb.Append("  ReservationStatus: ").Append(ReservationStatus).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeSlotReservation);
        }

        /// <summary>
        /// Returns true if TimeSlotReservation instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeSlotReservation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeSlotReservation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CartCustomerId == input.CartCustomerId ||
                    (this.CartCustomerId != null &&
                    this.CartCustomerId.Equals(input.CartCustomerId))
                ) && 
                (
                    this.CartName == input.CartName ||
                    (this.CartName != null &&
                    this.CartName.Equals(input.CartName))
                ) && 
                (
                    this.CartScopeId == input.CartScopeId ||
                    (this.CartScopeId != null &&
                    this.CartScopeId.Equals(input.CartScopeId))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.ExpiryDateTime == input.ExpiryDateTime ||
                    (this.ExpiryDateTime != null &&
                    this.ExpiryDateTime.Equals(input.ExpiryDateTime))
                ) && 
                (
                    this.ExpiryWarningDateTime == input.ExpiryWarningDateTime ||
                    (this.ExpiryWarningDateTime != null &&
                    this.ExpiryWarningDateTime.Equals(input.ExpiryWarningDateTime))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentLocationTimeSlotId == input.FulfillmentLocationTimeSlotId ||
                    (this.FulfillmentLocationTimeSlotId != null &&
                    this.FulfillmentLocationTimeSlotId.Equals(input.FulfillmentLocationTimeSlotId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.MaxNumberOfRenewals == input.MaxNumberOfRenewals ||
                    this.MaxNumberOfRenewals.Equals(input.MaxNumberOfRenewals)
                ) && 
                (
                    this.NumberOfRenewals == input.NumberOfRenewals ||
                    this.NumberOfRenewals.Equals(input.NumberOfRenewals)
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.ReservationDate == input.ReservationDate ||
                    (this.ReservationDate != null &&
                    this.ReservationDate.Equals(input.ReservationDate))
                ) && 
                (
                    this.ReservationStatus == input.ReservationStatus ||
                    this.ReservationStatus.Equals(input.ReservationStatus)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CartCustomerId != null)
                    hashCode = hashCode * 59 + this.CartCustomerId.GetHashCode();
                if (this.CartName != null)
                    hashCode = hashCode * 59 + this.CartName.GetHashCode();
                if (this.CartScopeId != null)
                    hashCode = hashCode * 59 + this.CartScopeId.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.ExpiryDateTime != null)
                    hashCode = hashCode * 59 + this.ExpiryDateTime.GetHashCode();
                if (this.ExpiryWarningDateTime != null)
                    hashCode = hashCode * 59 + this.ExpiryWarningDateTime.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.FulfillmentLocationTimeSlotId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationTimeSlotId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNumberOfRenewals.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfRenewals.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                if (this.ReservationDate != null)
                    hashCode = hashCode * 59 + this.ReservationDate.GetHashCode();
                hashCode = hashCode * 59 + this.ReservationStatus.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
