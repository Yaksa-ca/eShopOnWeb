/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// LookupValue
    /// </summary>
    [DataContract(Name = "LookupValue")]
    public partial class LookupValue : IEquatable<LookupValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LookupValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupValue" /> class.
        /// </summary>
        /// <param name="displayName">displayName.</param>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="isActive">If the lookup value is active. Lookup value can not be used after being deactivated but previous references are not deleted..</param>
        /// <param name="isSystem">Whether this lookup value is built-in..</param>
        /// <param name="lookupId">The name of the lookup for which this value is defined..</param>
        /// <param name="sortOrder">The number used for ordering the LookupValue in a list.An integer that allows the ordering of the values when they are presented in a list. No restriction is given for the number (e.g. it allows two values to have the same value for this property)..</param>
        /// <param name="value">The unique lookup value name..</param>
        public LookupValue(Dictionary<string, string> displayName = default(Dictionary<string, string>), string id = default(string), bool isActive = default(bool), bool isSystem = default(bool), string lookupId = default(string), int sortOrder = default(int), string value = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for LookupValue and cannot be null");
            this.DisplayName = displayName;
            this.IsActive = isActive;
            this.IsSystem = isSystem;
            this.LookupId = lookupId;
            this.SortOrder = sortOrder;
            this.Value = value;
        }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// If the lookup value is active. Lookup value can not be used after being deactivated but previous references are not deleted.
        /// </summary>
        /// <value>If the lookup value is active. Lookup value can not be used after being deactivated but previous references are not deleted.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Whether this lookup value is built-in.
        /// </summary>
        /// <value>Whether this lookup value is built-in.</value>
        [DataMember(Name = "isSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// The name of the lookup for which this value is defined.
        /// </summary>
        /// <value>The name of the lookup for which this value is defined.</value>
        [DataMember(Name = "lookupId", EmitDefaultValue = false)]
        public string LookupId { get; set; }

        /// <summary>
        /// The number used for ordering the LookupValue in a list.An integer that allows the ordering of the values when they are presented in a list. No restriction is given for the number (e.g. it allows two values to have the same value for this property).
        /// </summary>
        /// <value>The number used for ordering the LookupValue in a list.An integer that allows the ordering of the values when they are presented in a list. No restriction is given for the number (e.g. it allows two values to have the same value for this property).</value>
        [DataMember(Name = "sortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// The unique lookup value name.
        /// </summary>
        /// <value>The unique lookup value name.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LookupValue {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  LookupId: ").Append(LookupId).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LookupValue);
        }

        /// <summary>
        /// Returns true if LookupValue instances are equal
        /// </summary>
        /// <param name="input">Instance of LookupValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LookupValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.IsSystem == input.IsSystem ||
                    this.IsSystem.Equals(input.IsSystem)
                ) && 
                (
                    this.LookupId == input.LookupId ||
                    (this.LookupId != null &&
                    this.LookupId.Equals(input.LookupId))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                hashCode = hashCode * 59 + this.IsSystem.GetHashCode();
                if (this.LookupId != null)
                    hashCode = hashCode * 59 + this.LookupId.GetHashCode();
                hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
