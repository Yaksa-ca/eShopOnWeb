/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PurchaseCondition
    /// </summary>
    [DataContract(Name = "PurchaseCondition")]
    public partial class PurchaseCondition : IEquatable<PurchaseCondition>, IValidatableObject
    {
        /// <summary>
        /// The level of the purchase condition: on which part of the cart the condition will be applied.
        /// </summary>
        /// <value>The level of the purchase condition: on which part of the cart the condition will be applied.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            /// <summary>
            /// Enum NotSpecified for value: NotSpecified
            /// </summary>
            [EnumMember(Value = "NotSpecified")]
            NotSpecified = 1,

            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 2,

            /// <summary>
            /// Enum Order for value: Order
            /// </summary>
            [EnumMember(Value = "Order")]
            Order = 3,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 4,

            /// <summary>
            /// Enum Bundle for value: Bundle
            /// </summary>
            [EnumMember(Value = "Bundle")]
            Bundle = 5,

            /// <summary>
            /// Enum Payment for value: Payment
            /// </summary>
            [EnumMember(Value = "Payment")]
            Payment = 6,

            /// <summary>
            /// Enum Gift for value: Gift
            /// </summary>
            [EnumMember(Value = "Gift")]
            Gift = 7

        }


        /// <summary>
        /// The level of the purchase condition: on which part of the cart the condition will be applied.
        /// </summary>
        /// <value>The level of the purchase condition: on which part of the cart the condition will be applied.</value>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public LevelEnum? Level { get; set; }
        /// <summary>
        /// The type: how the Value will be applied to the Targets.
        /// </summary>
        /// <value>The type: how the Value will be applied to the Targets.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Quantity for value: Quantity
            /// </summary>
            [EnumMember(Value = "Quantity")]
            Quantity = 1,

            /// <summary>
            /// Enum Amount for value: Amount
            /// </summary>
            [EnumMember(Value = "Amount")]
            Amount = 2,

            /// <summary>
            /// Enum FulfillmentMethod for value: FulfillmentMethod
            /// </summary>
            [EnumMember(Value = "FulfillmentMethod")]
            FulfillmentMethod = 3,

            /// <summary>
            /// Enum PaymentMethod for value: PaymentMethod
            /// </summary>
            [EnumMember(Value = "PaymentMethod")]
            PaymentMethod = 4,

            /// <summary>
            /// Enum Recurrence for value: Recurrence
            /// </summary>
            [EnumMember(Value = "Recurrence")]
            Recurrence = 5

        }


        /// <summary>
        /// The type: how the Value will be applied to the Targets.
        /// </summary>
        /// <value>The type: how the Value will be applied to the Targets.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseCondition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PurchaseCondition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseCondition" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="consumabilityRules">the rules used to determine whether an entity should be used when validating the conditions of this promotion..</param>
        /// <param name="excludeDiscountedItems">a flag indicating whether discounted items should be excluded when evaluating this condition..</param>
        /// <param name="level">The level of the purchase condition: on which part of the cart the condition will be applied..</param>
        /// <param name="targets">a list of the targets on which the condition will be applied..</param>
        /// <param name="type">The type: how the Value will be applied to the Targets..</param>
        /// <param name="unitOfMeasure">the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the condition..</param>
        /// <param name="value">the value of the condition..</param>
        public PurchaseCondition(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), List<ConsumabilityRule> consumabilityRules = default(List<ConsumabilityRule>), bool excludeDiscountedItems = default(bool), LevelEnum? level = default(LevelEnum?), List<PurchaseConditionTarget> targets = default(List<PurchaseConditionTarget>), TypeEnum? type = default(TypeEnum?), string unitOfMeasure = default(string), double value = default(double))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for PurchaseCondition and cannot be null");
            this.PropertyBag = propertyBag;
            this.ConsumabilityRules = consumabilityRules;
            this.ExcludeDiscountedItems = excludeDiscountedItems;
            this.Level = level;
            this.Targets = targets;
            this.Type = type;
            this.UnitOfMeasure = unitOfMeasure;
            this.Value = value;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// the rules used to determine whether an entity should be used when validating the conditions of this promotion.
        /// </summary>
        /// <value>the rules used to determine whether an entity should be used when validating the conditions of this promotion.</value>
        [DataMember(Name = "consumabilityRules", EmitDefaultValue = false)]
        public List<ConsumabilityRule> ConsumabilityRules { get; set; }

        /// <summary>
        /// a flag indicating whether discounted items should be excluded when evaluating this condition.
        /// </summary>
        /// <value>a flag indicating whether discounted items should be excluded when evaluating this condition.</value>
        [DataMember(Name = "excludeDiscountedItems", EmitDefaultValue = true)]
        public bool ExcludeDiscountedItems { get; set; }

        /// <summary>
        /// a list of the targets on which the condition will be applied.
        /// </summary>
        /// <value>a list of the targets on which the condition will be applied.</value>
        [DataMember(Name = "targets", EmitDefaultValue = false)]
        public List<PurchaseConditionTarget> Targets { get; set; }

        /// <summary>
        /// the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the condition.
        /// </summary>
        /// <value>the UnitOfMeasure (Unit, Kilogram, Liter, etc..) of the condition.</value>
        [DataMember(Name = "unitOfMeasure", EmitDefaultValue = false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// the value of the condition.
        /// </summary>
        /// <value>the value of the condition.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseCondition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  ConsumabilityRules: ").Append(ConsumabilityRules).Append("\n");
            sb.Append("  ExcludeDiscountedItems: ").Append(ExcludeDiscountedItems).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseCondition);
        }

        /// <summary>
        /// Returns true if PurchaseCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseCondition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.ConsumabilityRules == input.ConsumabilityRules ||
                    this.ConsumabilityRules != null &&
                    input.ConsumabilityRules != null &&
                    this.ConsumabilityRules.SequenceEqual(input.ConsumabilityRules)
                ) && 
                (
                    this.ExcludeDiscountedItems == input.ExcludeDiscountedItems ||
                    this.ExcludeDiscountedItems.Equals(input.ExcludeDiscountedItems)
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.Targets == input.Targets ||
                    this.Targets != null &&
                    input.Targets != null &&
                    this.Targets.SequenceEqual(input.Targets)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.ConsumabilityRules != null)
                    hashCode = hashCode * 59 + this.ConsumabilityRules.GetHashCode();
                hashCode = hashCode * 59 + this.ExcludeDiscountedItems.GetHashCode();
                hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Targets != null)
                    hashCode = hashCode * 59 + this.Targets.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
