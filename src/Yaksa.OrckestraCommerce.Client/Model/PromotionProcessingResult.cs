/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PromotionProcessingResult
    /// </summary>
    [DataContract(Name = "PromotionProcessingResult")]
    public partial class PromotionProcessingResult : IEquatable<PromotionProcessingResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionProcessingResult" /> class.
        /// </summary>
        /// <param name="consumedConditionItems">The list of consumed condition items.</param>
        /// <param name="consumedConditionShipments">The list of consumed condition shipment.</param>
        /// <param name="consumedCoupons">The list of consumed coupons.</param>
        /// <param name="consumedRewardItems">The list of consumed reward items.</param>
        /// <param name="consumedRewardOrderCount">The number of consumed reward order.</param>
        /// <param name="consumedRewardShipments">The list of consumed reward shipments.</param>
        /// <param name="isPromotionSatisfied">Whether or not the promotion is satisfied.</param>
        /// <param name="promotion">promotion.</param>
        /// <param name="rewards">The list of rewards.</param>
        public PromotionProcessingResult(List<ConsumedItem> consumedConditionItems = default(List<ConsumedItem>), List<ConsumedShipment> consumedConditionShipments = default(List<ConsumedShipment>), List<Coupon> consumedCoupons = default(List<Coupon>), List<ConsumedItem> consumedRewardItems = default(List<ConsumedItem>), int consumedRewardOrderCount = default(int), List<ConsumedShipment> consumedRewardShipments = default(List<ConsumedShipment>), bool isPromotionSatisfied = default(bool), Promotion promotion = default(Promotion), List<Reward> rewards = default(List<Reward>))
        {
            this.ConsumedConditionItems = consumedConditionItems;
            this.ConsumedConditionShipments = consumedConditionShipments;
            this.ConsumedCoupons = consumedCoupons;
            this.ConsumedRewardItems = consumedRewardItems;
            this.ConsumedRewardOrderCount = consumedRewardOrderCount;
            this.ConsumedRewardShipments = consumedRewardShipments;
            this.IsPromotionSatisfied = isPromotionSatisfied;
            this.Promotion = promotion;
            this.Rewards = rewards;
        }

        /// <summary>
        /// The list of consumed condition items
        /// </summary>
        /// <value>The list of consumed condition items</value>
        [DataMember(Name = "consumedConditionItems", EmitDefaultValue = false)]
        public List<ConsumedItem> ConsumedConditionItems { get; set; }

        /// <summary>
        /// The list of consumed condition shipment
        /// </summary>
        /// <value>The list of consumed condition shipment</value>
        [DataMember(Name = "consumedConditionShipments", EmitDefaultValue = false)]
        public List<ConsumedShipment> ConsumedConditionShipments { get; set; }

        /// <summary>
        /// The list of consumed coupons
        /// </summary>
        /// <value>The list of consumed coupons</value>
        [DataMember(Name = "consumedCoupons", EmitDefaultValue = false)]
        public List<Coupon> ConsumedCoupons { get; set; }

        /// <summary>
        /// The list of consumed reward items
        /// </summary>
        /// <value>The list of consumed reward items</value>
        [DataMember(Name = "consumedRewardItems", EmitDefaultValue = false)]
        public List<ConsumedItem> ConsumedRewardItems { get; set; }

        /// <summary>
        /// The number of consumed reward order
        /// </summary>
        /// <value>The number of consumed reward order</value>
        [DataMember(Name = "consumedRewardOrderCount", EmitDefaultValue = false)]
        public int ConsumedRewardOrderCount { get; set; }

        /// <summary>
        /// The list of consumed reward shipments
        /// </summary>
        /// <value>The list of consumed reward shipments</value>
        [DataMember(Name = "consumedRewardShipments", EmitDefaultValue = false)]
        public List<ConsumedShipment> ConsumedRewardShipments { get; set; }

        /// <summary>
        /// Whether or not the promotion is satisfied
        /// </summary>
        /// <value>Whether or not the promotion is satisfied</value>
        [DataMember(Name = "isPromotionSatisfied", EmitDefaultValue = true)]
        public bool IsPromotionSatisfied { get; set; }

        /// <summary>
        /// Gets or Sets Promotion
        /// </summary>
        [DataMember(Name = "promotion", EmitDefaultValue = false)]
        public Promotion Promotion { get; set; }

        /// <summary>
        /// The list of rewards
        /// </summary>
        /// <value>The list of rewards</value>
        [DataMember(Name = "rewards", EmitDefaultValue = false)]
        public List<Reward> Rewards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromotionProcessingResult {\n");
            sb.Append("  ConsumedConditionItems: ").Append(ConsumedConditionItems).Append("\n");
            sb.Append("  ConsumedConditionShipments: ").Append(ConsumedConditionShipments).Append("\n");
            sb.Append("  ConsumedCoupons: ").Append(ConsumedCoupons).Append("\n");
            sb.Append("  ConsumedRewardItems: ").Append(ConsumedRewardItems).Append("\n");
            sb.Append("  ConsumedRewardOrderCount: ").Append(ConsumedRewardOrderCount).Append("\n");
            sb.Append("  ConsumedRewardShipments: ").Append(ConsumedRewardShipments).Append("\n");
            sb.Append("  IsPromotionSatisfied: ").Append(IsPromotionSatisfied).Append("\n");
            sb.Append("  Promotion: ").Append(Promotion).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromotionProcessingResult);
        }

        /// <summary>
        /// Returns true if PromotionProcessingResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PromotionProcessingResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromotionProcessingResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsumedConditionItems == input.ConsumedConditionItems ||
                    this.ConsumedConditionItems != null &&
                    input.ConsumedConditionItems != null &&
                    this.ConsumedConditionItems.SequenceEqual(input.ConsumedConditionItems)
                ) && 
                (
                    this.ConsumedConditionShipments == input.ConsumedConditionShipments ||
                    this.ConsumedConditionShipments != null &&
                    input.ConsumedConditionShipments != null &&
                    this.ConsumedConditionShipments.SequenceEqual(input.ConsumedConditionShipments)
                ) && 
                (
                    this.ConsumedCoupons == input.ConsumedCoupons ||
                    this.ConsumedCoupons != null &&
                    input.ConsumedCoupons != null &&
                    this.ConsumedCoupons.SequenceEqual(input.ConsumedCoupons)
                ) && 
                (
                    this.ConsumedRewardItems == input.ConsumedRewardItems ||
                    this.ConsumedRewardItems != null &&
                    input.ConsumedRewardItems != null &&
                    this.ConsumedRewardItems.SequenceEqual(input.ConsumedRewardItems)
                ) && 
                (
                    this.ConsumedRewardOrderCount == input.ConsumedRewardOrderCount ||
                    this.ConsumedRewardOrderCount.Equals(input.ConsumedRewardOrderCount)
                ) && 
                (
                    this.ConsumedRewardShipments == input.ConsumedRewardShipments ||
                    this.ConsumedRewardShipments != null &&
                    input.ConsumedRewardShipments != null &&
                    this.ConsumedRewardShipments.SequenceEqual(input.ConsumedRewardShipments)
                ) && 
                (
                    this.IsPromotionSatisfied == input.IsPromotionSatisfied ||
                    this.IsPromotionSatisfied.Equals(input.IsPromotionSatisfied)
                ) && 
                (
                    this.Promotion == input.Promotion ||
                    (this.Promotion != null &&
                    this.Promotion.Equals(input.Promotion))
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    this.Rewards != null &&
                    input.Rewards != null &&
                    this.Rewards.SequenceEqual(input.Rewards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsumedConditionItems != null)
                    hashCode = hashCode * 59 + this.ConsumedConditionItems.GetHashCode();
                if (this.ConsumedConditionShipments != null)
                    hashCode = hashCode * 59 + this.ConsumedConditionShipments.GetHashCode();
                if (this.ConsumedCoupons != null)
                    hashCode = hashCode * 59 + this.ConsumedCoupons.GetHashCode();
                if (this.ConsumedRewardItems != null)
                    hashCode = hashCode * 59 + this.ConsumedRewardItems.GetHashCode();
                hashCode = hashCode * 59 + this.ConsumedRewardOrderCount.GetHashCode();
                if (this.ConsumedRewardShipments != null)
                    hashCode = hashCode * 59 + this.ConsumedRewardShipments.GetHashCode();
                hashCode = hashCode * 59 + this.IsPromotionSatisfied.GetHashCode();
                if (this.Promotion != null)
                    hashCode = hashCode * 59 + this.Promotion.GetHashCode();
                if (this.Rewards != null)
                    hashCode = hashCode * 59 + this.Rewards.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
