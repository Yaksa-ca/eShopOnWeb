/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Integration resources dedicated to data exchanges across system boundaries or other systems.
    /// </summary>
    [DataContract(Name = "ExportProfilesRequest")]
    public partial class ExportProfilesRequest : IEquatable<ExportProfilesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportProfilesRequest" /> class.
        /// </summary>
        /// <param name="correlationId">The correlation id for the durable task..</param>
        /// <param name="excludeDeletedProfiles">Indicates whether to exclude the deleted profiles..</param>
        /// <param name="fileFormat">The file format of the export, JSON or XML. If not set the export will be in JSON. (Optional).</param>
        /// <param name="filePath">The File path in the blob storage. (Optional).</param>
        /// <param name="profilesToExport">Profiles to export, if not set all profiles will be exported. (Optional).</param>
        public ExportProfilesRequest(string correlationId = default(string), bool excludeDeletedProfiles = default(bool), string fileFormat = default(string), string filePath = default(string), List<string> profilesToExport = default(List<string>))
        {
            this.CorrelationId = correlationId;
            this.ExcludeDeletedProfiles = excludeDeletedProfiles;
            this.FileFormat = fileFormat;
            this.FilePath = filePath;
            this.ProfilesToExport = profilesToExport;
        }

        /// <summary>
        /// The correlation id for the durable task.
        /// </summary>
        /// <value>The correlation id for the durable task.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Indicates whether to exclude the deleted profiles.
        /// </summary>
        /// <value>Indicates whether to exclude the deleted profiles.</value>
        [DataMember(Name = "excludeDeletedProfiles", EmitDefaultValue = true)]
        public bool ExcludeDeletedProfiles { get; set; }

        /// <summary>
        /// The file format of the export, JSON or XML. If not set the export will be in JSON. (Optional)
        /// </summary>
        /// <value>The file format of the export, JSON or XML. If not set the export will be in JSON. (Optional)</value>
        [DataMember(Name = "fileFormat", EmitDefaultValue = false)]
        public string FileFormat { get; set; }

        /// <summary>
        /// The File path in the blob storage. (Optional)
        /// </summary>
        /// <value>The File path in the blob storage. (Optional)</value>
        [DataMember(Name = "filePath", EmitDefaultValue = false)]
        public string FilePath { get; set; }

        /// <summary>
        /// Profiles to export, if not set all profiles will be exported. (Optional)
        /// </summary>
        /// <value>Profiles to export, if not set all profiles will be exported. (Optional)</value>
        [DataMember(Name = "profilesToExport", EmitDefaultValue = false)]
        public List<string> ProfilesToExport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportProfilesRequest {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  ExcludeDeletedProfiles: ").Append(ExcludeDeletedProfiles).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  ProfilesToExport: ").Append(ProfilesToExport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportProfilesRequest);
        }

        /// <summary>
        /// Returns true if ExportProfilesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportProfilesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportProfilesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.ExcludeDeletedProfiles == input.ExcludeDeletedProfiles ||
                    this.ExcludeDeletedProfiles.Equals(input.ExcludeDeletedProfiles)
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    (this.FileFormat != null &&
                    this.FileFormat.Equals(input.FileFormat))
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.ProfilesToExport == input.ProfilesToExport ||
                    this.ProfilesToExport != null &&
                    input.ProfilesToExport != null &&
                    this.ProfilesToExport.SequenceEqual(input.ProfilesToExport)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                hashCode = hashCode * 59 + this.ExcludeDeletedProfiles.GetHashCode();
                if (this.FileFormat != null)
                    hashCode = hashCode * 59 + this.FileFormat.GetHashCode();
                if (this.FilePath != null)
                    hashCode = hashCode * 59 + this.FilePath.GetHashCode();
                if (this.ProfilesToExport != null)
                    hashCode = hashCode * 59 + this.ProfilesToExport.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
