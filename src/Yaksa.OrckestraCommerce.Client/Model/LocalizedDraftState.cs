/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// LocalizedDraftState
    /// </summary>
    [DataContract(Name = "LocalizedDraftState")]
    public partial class LocalizedDraftState : IEquatable<LocalizedDraftState>, IValidatableObject
    {
        /// <summary>
        /// Defines Inner
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InnerEnum
        {
            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 1,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 2,

            /// <summary>
            /// Enum PendingApproval for value: PendingApproval
            /// </summary>
            [EnumMember(Value = "PendingApproval")]
            PendingApproval = 3,

            /// <summary>
            /// Enum ReadyToCompose for value: ReadyToCompose
            /// </summary>
            [EnumMember(Value = "ReadyToCompose")]
            ReadyToCompose = 4,

            /// <summary>
            /// Enum Published for value: Published
            /// </summary>
            [EnumMember(Value = "Published")]
            Published = 5

        }



        /// <summary>
        /// IDictionary&lt;String,DraftState&gt;
        /// </summary>
        /// <value>IDictionary&lt;String,DraftState&gt;</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public Dictionary<string, InnerEnum> Values { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalizedDraftState" /> class.
        /// </summary>
        /// <param name="values">IDictionary&lt;String,DraftState&gt;.</param>
        public LocalizedDraftState(Dictionary<string, InnerEnum> values = default(Dictionary<string, InnerEnum>))
        {
            this.Values = values;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalizedDraftState {\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalizedDraftState);
        }

        /// <summary>
        /// Returns true if LocalizedDraftState instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalizedDraftState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalizedDraftState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Values == input.Values ||
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
