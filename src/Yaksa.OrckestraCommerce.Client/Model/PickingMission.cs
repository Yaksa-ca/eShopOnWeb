/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PickingMission
    /// </summary>
    [DataContract(Name = "PickingMission")]
    public partial class PickingMission : IEquatable<PickingMission>, IValidatableObject
    {
        /// <summary>
        /// the current picking mission status.
        /// </summary>
        /// <value>the current picking mission status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,

            /// <summary>
            /// Enum Ready for value: Ready
            /// </summary>
            [EnumMember(Value = "Ready")]
            Ready = 2,

            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 3,

            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 4,

            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 5,

            /// <summary>
            /// Enum CompletedWithExceptions for value: CompletedWithExceptions
            /// </summary>
            [EnumMember(Value = "CompletedWithExceptions")]
            CompletedWithExceptions = 6

        }


        /// <summary>
        /// the current picking mission status.
        /// </summary>
        /// <value>the current picking mission status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PickingMission" /> class.
        /// </summary>
        /// <param name="completedOn">the date the picking has been completed..</param>
        /// <param name="created">the date the picking mission was created..</param>
        /// <param name="createdBy">the identifier of the operator who created the picking mission..</param>
        /// <param name="fulfillmentLocationId">the fulfillment location identifier..</param>
        /// <param name="id">the picking mission identifier..</param>
        /// <param name="lastModified">the date that the last modification was applied to the picking mission..</param>
        /// <param name="lastModifiedBy">the identifier of the operator who last modified the picking mission..</param>
        /// <param name="missionItems">the picking mission items..</param>
        /// <param name="missionNumber">the picking mission number..</param>
        /// <param name="picker">the identifier of the picker who started the picking mission..</param>
        /// <param name="scopeId">the scope identifier..</param>
        /// <param name="startedOn">the date the picking has been started..</param>
        /// <param name="status">the current picking mission status..</param>
        public PickingMission(DateTime completedOn = default(DateTime), DateTime created = default(DateTime), string createdBy = default(string), string fulfillmentLocationId = default(string), string id = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), List<MissionItem> missionItems = default(List<MissionItem>), string missionNumber = default(string), string picker = default(string), string scopeId = default(string), DateTime startedOn = default(DateTime), StatusEnum? status = default(StatusEnum?))
        {
            this.CompletedOn = completedOn;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.Id = id;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.MissionItems = missionItems;
            this.MissionNumber = missionNumber;
            this.Picker = picker;
            this.ScopeId = scopeId;
            this.StartedOn = startedOn;
            this.Status = status;
        }

        /// <summary>
        /// the date the picking has been completed.
        /// </summary>
        /// <value>the date the picking has been completed.</value>
        [DataMember(Name = "completedOn", EmitDefaultValue = false)]
        public DateTime CompletedOn { get; set; }

        /// <summary>
        /// the date the picking mission was created.
        /// </summary>
        /// <value>the date the picking mission was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the identifier of the operator who created the picking mission.
        /// </summary>
        /// <value>the identifier of the operator who created the picking mission.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// the fulfillment location identifier.
        /// </summary>
        /// <value>the fulfillment location identifier.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// the picking mission identifier.
        /// </summary>
        /// <value>the picking mission identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// the date that the last modification was applied to the picking mission.
        /// </summary>
        /// <value>the date that the last modification was applied to the picking mission.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// the identifier of the operator who last modified the picking mission.
        /// </summary>
        /// <value>the identifier of the operator who last modified the picking mission.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// the picking mission items.
        /// </summary>
        /// <value>the picking mission items.</value>
        [DataMember(Name = "missionItems", EmitDefaultValue = false)]
        public List<MissionItem> MissionItems { get; set; }

        /// <summary>
        /// the picking mission number.
        /// </summary>
        /// <value>the picking mission number.</value>
        [DataMember(Name = "missionNumber", EmitDefaultValue = false)]
        public string MissionNumber { get; set; }

        /// <summary>
        /// the identifier of the picker who started the picking mission.
        /// </summary>
        /// <value>the identifier of the picker who started the picking mission.</value>
        [DataMember(Name = "picker", EmitDefaultValue = false)]
        public string Picker { get; set; }

        /// <summary>
        /// the scope identifier.
        /// </summary>
        /// <value>the scope identifier.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// the date the picking has been started.
        /// </summary>
        /// <value>the date the picking has been started.</value>
        [DataMember(Name = "startedOn", EmitDefaultValue = false)]
        public DateTime StartedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PickingMission {\n");
            sb.Append("  CompletedOn: ").Append(CompletedOn).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  MissionItems: ").Append(MissionItems).Append("\n");
            sb.Append("  MissionNumber: ").Append(MissionNumber).Append("\n");
            sb.Append("  Picker: ").Append(Picker).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PickingMission);
        }

        /// <summary>
        /// Returns true if PickingMission instances are equal
        /// </summary>
        /// <param name="input">Instance of PickingMission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PickingMission input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompletedOn == input.CompletedOn ||
                    (this.CompletedOn != null &&
                    this.CompletedOn.Equals(input.CompletedOn))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.MissionItems == input.MissionItems ||
                    this.MissionItems != null &&
                    input.MissionItems != null &&
                    this.MissionItems.SequenceEqual(input.MissionItems)
                ) && 
                (
                    this.MissionNumber == input.MissionNumber ||
                    (this.MissionNumber != null &&
                    this.MissionNumber.Equals(input.MissionNumber))
                ) && 
                (
                    this.Picker == input.Picker ||
                    (this.Picker != null &&
                    this.Picker.Equals(input.Picker))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.StartedOn == input.StartedOn ||
                    (this.StartedOn != null &&
                    this.StartedOn.Equals(input.StartedOn))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompletedOn != null)
                    hashCode = hashCode * 59 + this.CompletedOn.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.MissionItems != null)
                    hashCode = hashCode * 59 + this.MissionItems.GetHashCode();
                if (this.MissionNumber != null)
                    hashCode = hashCode * 59 + this.MissionNumber.GetHashCode();
                if (this.Picker != null)
                    hashCode = hashCode * 59 + this.Picker.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.StartedOn != null)
                    hashCode = hashCode * 59 + this.StartedOn.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
