/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Regroupment of all custom CDMV services, notably for clinics related operations
    /// </summary>
    [DataContract(Name = "ClinicProductInformationImportRequest")]
    public partial class ClinicProductInformationImportRequest : IEquatable<ClinicProductInformationImportRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClinicProductInformationImportRequest" /> class.
        /// </summary>
        /// <param name="path">The path of the file(s) to import..</param>
        /// <param name="containerName">The name of container which import file exists.</param>
        /// <param name="maximumErrors">The maximum number of validation errors that can be encountered. 0 means infinite number..</param>
        /// <param name="taskId">the task id. Use this to query the system for the state of the task..</param>
        /// <param name="fileFormat">The file format of the import, Zip, JSON, XML or Excel..</param>
        /// <param name="allowPricesDeleting">Whether or not the import have to delete prices which are not specified in the import file..</param>
        /// <param name="reIndex">Whether or not the indexes are built after the import. The default value is True (when not set)..</param>
        /// <param name="correlationId">The correlation id for the durable task..</param>
        /// <param name="rebuildSearchIndex">Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set)..</param>
        /// <param name="extendedOptions">extendedOptions.</param>
        public ClinicProductInformationImportRequest(string path = default(string), string containerName = default(string), int maximumErrors = default(int), string taskId = default(string), string fileFormat = default(string), bool allowPricesDeleting = default(bool), bool reIndex = default(bool), string correlationId = default(string), bool rebuildSearchIndex = default(bool), ImportProductExtendedOptions extendedOptions = default(ImportProductExtendedOptions))
        {
            this.Path = path;
            this.ContainerName = containerName;
            this.MaximumErrors = maximumErrors;
            this.TaskId = taskId;
            this.FileFormat = fileFormat;
            this.AllowPricesDeleting = allowPricesDeleting;
            this.ReIndex = reIndex;
            this.CorrelationId = correlationId;
            this.RebuildSearchIndex = rebuildSearchIndex;
            this.ExtendedOptions = extendedOptions;
        }

        /// <summary>
        /// The path of the file(s) to import.
        /// </summary>
        /// <value>The path of the file(s) to import.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// The name of container which import file exists
        /// </summary>
        /// <value>The name of container which import file exists</value>
        [DataMember(Name = "containerName", EmitDefaultValue = false)]
        public string ContainerName { get; set; }

        /// <summary>
        /// The maximum number of validation errors that can be encountered. 0 means infinite number.
        /// </summary>
        /// <value>The maximum number of validation errors that can be encountered. 0 means infinite number.</value>
        [DataMember(Name = "maximumErrors", EmitDefaultValue = false)]
        public int MaximumErrors { get; set; }

        /// <summary>
        /// the task id. Use this to query the system for the state of the task.
        /// </summary>
        /// <value>the task id. Use this to query the system for the state of the task.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// The file format of the import, Zip, JSON, XML or Excel.
        /// </summary>
        /// <value>The file format of the import, Zip, JSON, XML or Excel.</value>
        [DataMember(Name = "fileFormat", EmitDefaultValue = false)]
        public string FileFormat { get; set; }

        /// <summary>
        /// Whether or not the import have to delete prices which are not specified in the import file.
        /// </summary>
        /// <value>Whether or not the import have to delete prices which are not specified in the import file.</value>
        [DataMember(Name = "allowPricesDeleting", EmitDefaultValue = true)]
        public bool AllowPricesDeleting { get; set; }

        /// <summary>
        /// Whether or not the indexes are built after the import. The default value is True (when not set).
        /// </summary>
        /// <value>Whether or not the indexes are built after the import. The default value is True (when not set).</value>
        [DataMember(Name = "reIndex", EmitDefaultValue = true)]
        public bool ReIndex { get; set; }

        /// <summary>
        /// The correlation id for the durable task.
        /// </summary>
        /// <value>The correlation id for the durable task.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set).
        /// </summary>
        /// <value>Indicates whether or not the search indexes are rebuilt after the import. The default value is True (when not set).</value>
        [DataMember(Name = "rebuildSearchIndex", EmitDefaultValue = true)]
        public bool RebuildSearchIndex { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedOptions
        /// </summary>
        [DataMember(Name = "extendedOptions", EmitDefaultValue = false)]
        public ImportProductExtendedOptions ExtendedOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClinicProductInformationImportRequest {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ContainerName: ").Append(ContainerName).Append("\n");
            sb.Append("  MaximumErrors: ").Append(MaximumErrors).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  AllowPricesDeleting: ").Append(AllowPricesDeleting).Append("\n");
            sb.Append("  ReIndex: ").Append(ReIndex).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  RebuildSearchIndex: ").Append(RebuildSearchIndex).Append("\n");
            sb.Append("  ExtendedOptions: ").Append(ExtendedOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClinicProductInformationImportRequest);
        }

        /// <summary>
        /// Returns true if ClinicProductInformationImportRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ClinicProductInformationImportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClinicProductInformationImportRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ContainerName == input.ContainerName ||
                    (this.ContainerName != null &&
                    this.ContainerName.Equals(input.ContainerName))
                ) && 
                (
                    this.MaximumErrors == input.MaximumErrors ||
                    this.MaximumErrors.Equals(input.MaximumErrors)
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    (this.FileFormat != null &&
                    this.FileFormat.Equals(input.FileFormat))
                ) && 
                (
                    this.AllowPricesDeleting == input.AllowPricesDeleting ||
                    this.AllowPricesDeleting.Equals(input.AllowPricesDeleting)
                ) && 
                (
                    this.ReIndex == input.ReIndex ||
                    this.ReIndex.Equals(input.ReIndex)
                ) && 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.RebuildSearchIndex == input.RebuildSearchIndex ||
                    this.RebuildSearchIndex.Equals(input.RebuildSearchIndex)
                ) && 
                (
                    this.ExtendedOptions == input.ExtendedOptions ||
                    (this.ExtendedOptions != null &&
                    this.ExtendedOptions.Equals(input.ExtendedOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ContainerName != null)
                    hashCode = hashCode * 59 + this.ContainerName.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumErrors.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                if (this.FileFormat != null)
                    hashCode = hashCode * 59 + this.FileFormat.GetHashCode();
                hashCode = hashCode * 59 + this.AllowPricesDeleting.GetHashCode();
                hashCode = hashCode * 59 + this.ReIndex.GetHashCode();
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                hashCode = hashCode * 59 + this.RebuildSearchIndex.GetHashCode();
                if (this.ExtendedOptions != null)
                    hashCode = hashCode * 59 + this.ExtendedOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
