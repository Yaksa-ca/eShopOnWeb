/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Query
    /// </summary>
    [DataContract(Name = "Query")]
    public partial class Query : IEquatable<Query>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        /// <param name="distinctResults">Whether the result must be unique.</param>
        /// <param name="filter">filter.</param>
        /// <param name="hierarchyDepth">The maximum hierarchy depth.</param>
        /// <param name="includedHierarchy">the included hierarchy.</param>
        /// <param name="includeTotalCount">Whether the total number of records is calculated.</param>
        /// <param name="maximumItems">Maximum number of returned items.</param>
        /// <param name="sortings">the sorting parameter of the query.</param>
        /// <param name="startingIndex">the starting index of the query.</param>
        public Query(bool distinctResults = default(bool), FilterGroup filter = default(FilterGroup), int hierarchyDepth = default(int), string includedHierarchy = default(string), bool includeTotalCount = default(bool), int maximumItems = default(int), List<QuerySorting> sortings = default(List<QuerySorting>), int startingIndex = default(int))
        {
            this.DistinctResults = distinctResults;
            this.Filter = filter;
            this.HierarchyDepth = hierarchyDepth;
            this.IncludedHierarchy = includedHierarchy;
            this.IncludeTotalCount = includeTotalCount;
            this.MaximumItems = maximumItems;
            this.Sortings = sortings;
            this.StartingIndex = startingIndex;
        }

        /// <summary>
        /// Whether the result must be unique
        /// </summary>
        /// <value>Whether the result must be unique</value>
        [DataMember(Name = "distinctResults", EmitDefaultValue = true)]
        public bool DistinctResults { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public FilterGroup Filter { get; set; }

        /// <summary>
        /// The maximum hierarchy depth
        /// </summary>
        /// <value>The maximum hierarchy depth</value>
        [DataMember(Name = "hierarchyDepth", EmitDefaultValue = false)]
        public int HierarchyDepth { get; set; }

        /// <summary>
        /// the included hierarchy
        /// </summary>
        /// <value>the included hierarchy</value>
        [DataMember(Name = "includedHierarchy", EmitDefaultValue = false)]
        public string IncludedHierarchy { get; set; }

        /// <summary>
        /// Whether the total number of records is calculated
        /// </summary>
        /// <value>Whether the total number of records is calculated</value>
        [DataMember(Name = "includeTotalCount", EmitDefaultValue = true)]
        public bool IncludeTotalCount { get; set; }

        /// <summary>
        /// Maximum number of returned items
        /// </summary>
        /// <value>Maximum number of returned items</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// the sorting parameter of the query
        /// </summary>
        /// <value>the sorting parameter of the query</value>
        [DataMember(Name = "sortings", EmitDefaultValue = false)]
        public List<QuerySorting> Sortings { get; set; }

        /// <summary>
        /// the starting index of the query
        /// </summary>
        /// <value>the starting index of the query</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Query {\n");
            sb.Append("  DistinctResults: ").Append(DistinctResults).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  HierarchyDepth: ").Append(HierarchyDepth).Append("\n");
            sb.Append("  IncludedHierarchy: ").Append(IncludedHierarchy).Append("\n");
            sb.Append("  IncludeTotalCount: ").Append(IncludeTotalCount).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  Sortings: ").Append(Sortings).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Query);
        }

        /// <summary>
        /// Returns true if Query instances are equal
        /// </summary>
        /// <param name="input">Instance of Query to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Query input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DistinctResults == input.DistinctResults ||
                    this.DistinctResults.Equals(input.DistinctResults)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.HierarchyDepth == input.HierarchyDepth ||
                    this.HierarchyDepth.Equals(input.HierarchyDepth)
                ) && 
                (
                    this.IncludedHierarchy == input.IncludedHierarchy ||
                    (this.IncludedHierarchy != null &&
                    this.IncludedHierarchy.Equals(input.IncludedHierarchy))
                ) && 
                (
                    this.IncludeTotalCount == input.IncludeTotalCount ||
                    this.IncludeTotalCount.Equals(input.IncludeTotalCount)
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.Sortings == input.Sortings ||
                    this.Sortings != null &&
                    input.Sortings != null &&
                    this.Sortings.SequenceEqual(input.Sortings)
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DistinctResults.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                hashCode = hashCode * 59 + this.HierarchyDepth.GetHashCode();
                if (this.IncludedHierarchy != null)
                    hashCode = hashCode * 59 + this.IncludedHierarchy.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeTotalCount.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                if (this.Sortings != null)
                    hashCode = hashCode * 59 + this.Sortings.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
