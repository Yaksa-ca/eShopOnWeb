/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Addresses are entities which are used as a billing or shipping address for a cart or an order.
    /// </summary>
    [DataContract(Name = "GetCustomerAddressRequest")]
    public partial class GetCustomerAddressRequest : IEquatable<GetCustomerAddressRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomerAddressRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCustomerAddressRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomerAddressRequest" /> class.
        /// </summary>
        /// <param name="addressId">The unique identifier of the address. (required).</param>
        /// <param name="customerId">The customer identifier..</param>
        public GetCustomerAddressRequest(string addressId = default(string), string customerId = default(string))
        {
            // to ensure "addressId" is required (not null)
            this.AddressId = addressId ?? throw new ArgumentNullException("addressId is a required property for GetCustomerAddressRequest and cannot be null");
            this.CustomerId = customerId;
        }

        /// <summary>
        /// The unique identifier of the address.
        /// </summary>
        /// <value>The unique identifier of the address.</value>
        [DataMember(Name = "addressId", IsRequired = true, EmitDefaultValue = false)]
        public string AddressId { get; set; }

        /// <summary>
        /// The customer identifier.
        /// </summary>
        /// <value>The customer identifier.</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCustomerAddressRequest {\n");
            sb.Append("  AddressId: ").Append(AddressId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCustomerAddressRequest);
        }

        /// <summary>
        /// Returns true if GetCustomerAddressRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCustomerAddressRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCustomerAddressRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressId == input.AddressId ||
                    (this.AddressId != null &&
                    this.AddressId.Equals(input.AddressId))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressId != null)
                    hashCode = hashCode * 59 + this.AddressId.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
