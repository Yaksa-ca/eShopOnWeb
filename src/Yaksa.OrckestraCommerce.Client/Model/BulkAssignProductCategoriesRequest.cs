/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "BulkAssignProductCategoriesRequest")]
    public partial class BulkAssignProductCategoriesRequest : IEquatable<BulkAssignProductCategoriesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkAssignProductCategoriesRequest" /> class.
        /// </summary>
        /// <param name="categoryIdsToAssign">When specified, the products will have those categories assigned..</param>
        /// <param name="correlationId">The correlation id for the durable task..</param>
        /// <param name="filterByPublicationStatus">The publication status to filter the products by. The filtering isn&#39;t applied for explicitly explicitly passed Product Ids..</param>
        /// <param name="includeUncategorized">When set to true, will indicate that all of the uncategorized products should be updated..</param>
        /// <param name="moveProducts">When set to true, the products will be disassociated form the previously assigned categories..</param>
        /// <param name="parentCategoryIds">The id-s of the categories, products of which should be updated..</param>
        /// <param name="productIds">The id values of the products to be updated..</param>
        public BulkAssignProductCategoriesRequest(List<string> categoryIdsToAssign = default(List<string>), string correlationId = default(string), string filterByPublicationStatus = default(string), bool includeUncategorized = default(bool), bool moveProducts = default(bool), List<string> parentCategoryIds = default(List<string>), List<string> productIds = default(List<string>))
        {
            this.CategoryIdsToAssign = categoryIdsToAssign;
            this.CorrelationId = correlationId;
            this.FilterByPublicationStatus = filterByPublicationStatus;
            this.IncludeUncategorized = includeUncategorized;
            this.MoveProducts = moveProducts;
            this.ParentCategoryIds = parentCategoryIds;
            this.ProductIds = productIds;
        }

        /// <summary>
        /// When specified, the products will have those categories assigned.
        /// </summary>
        /// <value>When specified, the products will have those categories assigned.</value>
        [DataMember(Name = "categoryIdsToAssign", EmitDefaultValue = false)]
        public List<string> CategoryIdsToAssign { get; set; }

        /// <summary>
        /// The correlation id for the durable task.
        /// </summary>
        /// <value>The correlation id for the durable task.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// The publication status to filter the products by. The filtering isn&#39;t applied for explicitly explicitly passed Product Ids.
        /// </summary>
        /// <value>The publication status to filter the products by. The filtering isn&#39;t applied for explicitly explicitly passed Product Ids.</value>
        [DataMember(Name = "filterByPublicationStatus", EmitDefaultValue = false)]
        public string FilterByPublicationStatus { get; set; }

        /// <summary>
        /// When set to true, will indicate that all of the uncategorized products should be updated.
        /// </summary>
        /// <value>When set to true, will indicate that all of the uncategorized products should be updated.</value>
        [DataMember(Name = "includeUncategorized", EmitDefaultValue = true)]
        public bool IncludeUncategorized { get; set; }

        /// <summary>
        /// When set to true, the products will be disassociated form the previously assigned categories.
        /// </summary>
        /// <value>When set to true, the products will be disassociated form the previously assigned categories.</value>
        [DataMember(Name = "moveProducts", EmitDefaultValue = true)]
        public bool MoveProducts { get; set; }

        /// <summary>
        /// The id-s of the categories, products of which should be updated.
        /// </summary>
        /// <value>The id-s of the categories, products of which should be updated.</value>
        [DataMember(Name = "parentCategoryIds", EmitDefaultValue = false)]
        public List<string> ParentCategoryIds { get; set; }

        /// <summary>
        /// The id values of the products to be updated.
        /// </summary>
        /// <value>The id values of the products to be updated.</value>
        [DataMember(Name = "productIds", EmitDefaultValue = false)]
        public List<string> ProductIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkAssignProductCategoriesRequest {\n");
            sb.Append("  CategoryIdsToAssign: ").Append(CategoryIdsToAssign).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  FilterByPublicationStatus: ").Append(FilterByPublicationStatus).Append("\n");
            sb.Append("  IncludeUncategorized: ").Append(IncludeUncategorized).Append("\n");
            sb.Append("  MoveProducts: ").Append(MoveProducts).Append("\n");
            sb.Append("  ParentCategoryIds: ").Append(ParentCategoryIds).Append("\n");
            sb.Append("  ProductIds: ").Append(ProductIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkAssignProductCategoriesRequest);
        }

        /// <summary>
        /// Returns true if BulkAssignProductCategoriesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkAssignProductCategoriesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkAssignProductCategoriesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryIdsToAssign == input.CategoryIdsToAssign ||
                    this.CategoryIdsToAssign != null &&
                    input.CategoryIdsToAssign != null &&
                    this.CategoryIdsToAssign.SequenceEqual(input.CategoryIdsToAssign)
                ) && 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.FilterByPublicationStatus == input.FilterByPublicationStatus ||
                    (this.FilterByPublicationStatus != null &&
                    this.FilterByPublicationStatus.Equals(input.FilterByPublicationStatus))
                ) && 
                (
                    this.IncludeUncategorized == input.IncludeUncategorized ||
                    this.IncludeUncategorized.Equals(input.IncludeUncategorized)
                ) && 
                (
                    this.MoveProducts == input.MoveProducts ||
                    this.MoveProducts.Equals(input.MoveProducts)
                ) && 
                (
                    this.ParentCategoryIds == input.ParentCategoryIds ||
                    this.ParentCategoryIds != null &&
                    input.ParentCategoryIds != null &&
                    this.ParentCategoryIds.SequenceEqual(input.ParentCategoryIds)
                ) && 
                (
                    this.ProductIds == input.ProductIds ||
                    this.ProductIds != null &&
                    input.ProductIds != null &&
                    this.ProductIds.SequenceEqual(input.ProductIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryIdsToAssign != null)
                    hashCode = hashCode * 59 + this.CategoryIdsToAssign.GetHashCode();
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.FilterByPublicationStatus != null)
                    hashCode = hashCode * 59 + this.FilterByPublicationStatus.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeUncategorized.GetHashCode();
                hashCode = hashCode * 59 + this.MoveProducts.GetHashCode();
                if (this.ParentCategoryIds != null)
                    hashCode = hashCode * 59 + this.ParentCategoryIds.GetHashCode();
                if (this.ProductIds != null)
                    hashCode = hashCode * 59 + this.ProductIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
