/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// CustomerInfo
    /// </summary>
    [DataContract(Name = "CustomerInfo")]
    public partial class CustomerInfo : IEquatable<CustomerInfo>, IValidatableObject
    {
        /// <summary>
        /// The current status (active/inactive/requires approval) of the customer account.
        /// </summary>
        /// <value>The current status (active/inactive/requires approval) of the customer account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountStatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,

            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 2,

            /// <summary>
            /// Enum RequiresApproval for value: RequiresApproval
            /// </summary>
            [EnumMember(Value = "RequiresApproval")]
            RequiresApproval = 3

        }


        /// <summary>
        /// The current status (active/inactive/requires approval) of the customer account.
        /// </summary>
        /// <value>The current status (active/inactive/requires approval) of the customer account.</value>
        [DataMember(Name = "accountStatus", EmitDefaultValue = false)]
        public AccountStatusEnum? AccountStatus { get; set; }
        /// <summary>
        /// The type of customer (Registered, Guest).
        /// </summary>
        /// <value>The type of customer (Registered, Guest).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerTypeEnum
        {
            /// <summary>
            /// Enum Registered for value: Registered
            /// </summary>
            [EnumMember(Value = "Registered")]
            Registered = 1,

            /// <summary>
            /// Enum Guest for value: Guest
            /// </summary>
            [EnumMember(Value = "Guest")]
            Guest = 2,

            /// <summary>
            /// Enum Unregistered for value: Unregistered
            /// </summary>
            [EnumMember(Value = "Unregistered")]
            Unregistered = 3

        }


        /// <summary>
        /// The type of customer (Registered, Guest).
        /// </summary>
        /// <value>The type of customer (Registered, Guest).</value>
        [DataMember(Name = "customerType", EmitDefaultValue = false)]
        public CustomerTypeEnum? CustomerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerInfo" /> class.
        /// </summary>
        /// <param name="accountStatus">The current status (active/inactive/requires approval) of the customer account..</param>
        /// <param name="addresses">The preferred address. (selected by business rule).</param>
        /// <param name="addressIds">The preferred address&#39;s Id. (selected by business rule).</param>
        /// <param name="created">The date the customer was created..</param>
        /// <param name="customerType">The type of customer (Registered, Guest)..</param>
        /// <param name="email">The email associated to the customer..</param>
        /// <param name="firstName">The first name of the customer..</param>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="isRecurringBuyer">A value indicating whether this customer is a recurring buyer..</param>
        /// <param name="language">The preferred communication language of the customer..</param>
        /// <param name="lastActivityDate">The date where the customer last interacted with the system..</param>
        /// <param name="lastLoginDate">The date where the customer last logged in the e-commerce website..</param>
        /// <param name="lastModified">The date that the last modification was applied to the customer..</param>
        /// <param name="lastName">The last name of the customer..</param>
        /// <param name="lastOrderDate">The date at which the customer last order was created..</param>
        /// <param name="lastOrderItemsCount">The total quantity of items for the last order of the customer..</param>
        /// <param name="lastOrderLineItemsCount">the total quantity of line items for the last order of the customer..</param>
        /// <param name="lastOrderTotal">The total amount of the customer last order..</param>
        /// <param name="lastPasswordChanged">The date where the customer last changed his password..</param>
        /// <param name="phoneExtension">The extension, if any, for the telephone number of the customer..</param>
        /// <param name="phoneNumber">The telephone number of the customer..</param>
        public CustomerInfo(AccountStatusEnum? accountStatus = default(AccountStatusEnum?), List<AddressInfo> addresses = default(List<AddressInfo>), List<string> addressIds = default(List<string>), DateTime created = default(DateTime), CustomerTypeEnum? customerType = default(CustomerTypeEnum?), string email = default(string), string firstName = default(string), string id = default(string), bool isRecurringBuyer = default(bool), string language = default(string), DateTime lastActivityDate = default(DateTime), DateTime lastLoginDate = default(DateTime), DateTime lastModified = default(DateTime), string lastName = default(string), DateTime lastOrderDate = default(DateTime), int lastOrderItemsCount = default(int), int lastOrderLineItemsCount = default(int), double lastOrderTotal = default(double), DateTime lastPasswordChanged = default(DateTime), string phoneExtension = default(string), string phoneNumber = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for CustomerInfo and cannot be null");
            this.AccountStatus = accountStatus;
            this.Addresses = addresses;
            this.AddressIds = addressIds;
            this.Created = created;
            this.CustomerType = customerType;
            this.Email = email;
            this.FirstName = firstName;
            this.IsRecurringBuyer = isRecurringBuyer;
            this.Language = language;
            this.LastActivityDate = lastActivityDate;
            this.LastLoginDate = lastLoginDate;
            this.LastModified = lastModified;
            this.LastName = lastName;
            this.LastOrderDate = lastOrderDate;
            this.LastOrderItemsCount = lastOrderItemsCount;
            this.LastOrderLineItemsCount = lastOrderLineItemsCount;
            this.LastOrderTotal = lastOrderTotal;
            this.LastPasswordChanged = lastPasswordChanged;
            this.PhoneExtension = phoneExtension;
            this.PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// The preferred address. (selected by business rule)
        /// </summary>
        /// <value>The preferred address. (selected by business rule)</value>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<AddressInfo> Addresses { get; set; }

        /// <summary>
        /// The preferred address&#39;s Id. (selected by business rule)
        /// </summary>
        /// <value>The preferred address&#39;s Id. (selected by business rule)</value>
        [DataMember(Name = "addressIds", EmitDefaultValue = false)]
        public List<string> AddressIds { get; set; }

        /// <summary>
        /// The date the customer was created.
        /// </summary>
        /// <value>The date the customer was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The email associated to the customer.
        /// </summary>
        /// <value>The email associated to the customer.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The first name of the customer.
        /// </summary>
        /// <value>The first name of the customer.</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A value indicating whether this customer is a recurring buyer.
        /// </summary>
        /// <value>A value indicating whether this customer is a recurring buyer.</value>
        [DataMember(Name = "isRecurringBuyer", EmitDefaultValue = true)]
        public bool IsRecurringBuyer { get; set; }

        /// <summary>
        /// The preferred communication language of the customer.
        /// </summary>
        /// <value>The preferred communication language of the customer.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The date where the customer last interacted with the system.
        /// </summary>
        /// <value>The date where the customer last interacted with the system.</value>
        [DataMember(Name = "lastActivityDate", EmitDefaultValue = false)]
        public DateTime LastActivityDate { get; set; }

        /// <summary>
        /// The date where the customer last logged in the e-commerce website.
        /// </summary>
        /// <value>The date where the customer last logged in the e-commerce website.</value>
        [DataMember(Name = "lastLoginDate", EmitDefaultValue = false)]
        public DateTime LastLoginDate { get; set; }

        /// <summary>
        /// The date that the last modification was applied to the customer.
        /// </summary>
        /// <value>The date that the last modification was applied to the customer.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The last name of the customer.
        /// </summary>
        /// <value>The last name of the customer.</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The date at which the customer last order was created.
        /// </summary>
        /// <value>The date at which the customer last order was created.</value>
        [DataMember(Name = "lastOrderDate", EmitDefaultValue = false)]
        public DateTime LastOrderDate { get; set; }

        /// <summary>
        /// The total quantity of items for the last order of the customer.
        /// </summary>
        /// <value>The total quantity of items for the last order of the customer.</value>
        [DataMember(Name = "lastOrderItemsCount", EmitDefaultValue = false)]
        public int LastOrderItemsCount { get; set; }

        /// <summary>
        /// the total quantity of line items for the last order of the customer.
        /// </summary>
        /// <value>the total quantity of line items for the last order of the customer.</value>
        [DataMember(Name = "lastOrderLineItemsCount", EmitDefaultValue = false)]
        public int LastOrderLineItemsCount { get; set; }

        /// <summary>
        /// The total amount of the customer last order.
        /// </summary>
        /// <value>The total amount of the customer last order.</value>
        [DataMember(Name = "lastOrderTotal", EmitDefaultValue = false)]
        public double LastOrderTotal { get; set; }

        /// <summary>
        /// The date where the customer last changed his password.
        /// </summary>
        /// <value>The date where the customer last changed his password.</value>
        [DataMember(Name = "lastPasswordChanged", EmitDefaultValue = false)]
        public DateTime LastPasswordChanged { get; set; }

        /// <summary>
        /// The extension, if any, for the telephone number of the customer.
        /// </summary>
        /// <value>The extension, if any, for the telephone number of the customer.</value>
        [DataMember(Name = "phoneExtension", EmitDefaultValue = false)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// The telephone number of the customer.
        /// </summary>
        /// <value>The telephone number of the customer.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerInfo {\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  AddressIds: ").Append(AddressIds).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CustomerType: ").Append(CustomerType).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRecurringBuyer: ").Append(IsRecurringBuyer).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastActivityDate: ").Append(LastActivityDate).Append("\n");
            sb.Append("  LastLoginDate: ").Append(LastLoginDate).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LastOrderDate: ").Append(LastOrderDate).Append("\n");
            sb.Append("  LastOrderItemsCount: ").Append(LastOrderItemsCount).Append("\n");
            sb.Append("  LastOrderLineItemsCount: ").Append(LastOrderLineItemsCount).Append("\n");
            sb.Append("  LastOrderTotal: ").Append(LastOrderTotal).Append("\n");
            sb.Append("  LastPasswordChanged: ").Append(LastPasswordChanged).Append("\n");
            sb.Append("  PhoneExtension: ").Append(PhoneExtension).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerInfo);
        }

        /// <summary>
        /// Returns true if CustomerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountStatus == input.AccountStatus ||
                    this.AccountStatus.Equals(input.AccountStatus)
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.AddressIds == input.AddressIds ||
                    this.AddressIds != null &&
                    input.AddressIds != null &&
                    this.AddressIds.SequenceEqual(input.AddressIds)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CustomerType == input.CustomerType ||
                    this.CustomerType.Equals(input.CustomerType)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsRecurringBuyer == input.IsRecurringBuyer ||
                    this.IsRecurringBuyer.Equals(input.IsRecurringBuyer)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.LastActivityDate == input.LastActivityDate ||
                    (this.LastActivityDate != null &&
                    this.LastActivityDate.Equals(input.LastActivityDate))
                ) && 
                (
                    this.LastLoginDate == input.LastLoginDate ||
                    (this.LastLoginDate != null &&
                    this.LastLoginDate.Equals(input.LastLoginDate))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LastOrderDate == input.LastOrderDate ||
                    (this.LastOrderDate != null &&
                    this.LastOrderDate.Equals(input.LastOrderDate))
                ) && 
                (
                    this.LastOrderItemsCount == input.LastOrderItemsCount ||
                    this.LastOrderItemsCount.Equals(input.LastOrderItemsCount)
                ) && 
                (
                    this.LastOrderLineItemsCount == input.LastOrderLineItemsCount ||
                    this.LastOrderLineItemsCount.Equals(input.LastOrderLineItemsCount)
                ) && 
                (
                    this.LastOrderTotal == input.LastOrderTotal ||
                    this.LastOrderTotal.Equals(input.LastOrderTotal)
                ) && 
                (
                    this.LastPasswordChanged == input.LastPasswordChanged ||
                    (this.LastPasswordChanged != null &&
                    this.LastPasswordChanged.Equals(input.LastPasswordChanged))
                ) && 
                (
                    this.PhoneExtension == input.PhoneExtension ||
                    (this.PhoneExtension != null &&
                    this.PhoneExtension.Equals(input.PhoneExtension))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.AddressIds != null)
                    hashCode = hashCode * 59 + this.AddressIds.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.CustomerType.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsRecurringBuyer.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.LastActivityDate != null)
                    hashCode = hashCode * 59 + this.LastActivityDate.GetHashCode();
                if (this.LastLoginDate != null)
                    hashCode = hashCode * 59 + this.LastLoginDate.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LastOrderDate != null)
                    hashCode = hashCode * 59 + this.LastOrderDate.GetHashCode();
                hashCode = hashCode * 59 + this.LastOrderItemsCount.GetHashCode();
                hashCode = hashCode * 59 + this.LastOrderLineItemsCount.GetHashCode();
                hashCode = hashCode * 59 + this.LastOrderTotal.GetHashCode();
                if (this.LastPasswordChanged != null)
                    hashCode = hashCode * 59 + this.LastPasswordChanged.GetHashCode();
                if (this.PhoneExtension != null)
                    hashCode = hashCode * 59 + this.PhoneExtension.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
