/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Application
    /// </summary>
    [DataContract(Name = "Application")]
    public partial class Application : IEquatable<Application>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Application" /> class.
        /// </summary>
        /// <param name="displayName">displayName.</param>
        /// <param name="iconUri">The icon uri..</param>
        /// <param name="id">The Application identifier..</param>
        /// <param name="isAbsoluteUrl">a value indicating whether or not an application url is absolute.</param>
        /// <param name="isVisible">a value indicating whether or not an application is visible.</param>
        /// <param name="name">The Name..</param>
        /// <param name="url">The url..</param>
        public Application(Dictionary<string, string> displayName = default(Dictionary<string, string>), string iconUri = default(string), int id = default(int), bool isAbsoluteUrl = default(bool), bool isVisible = default(bool), string name = default(string), string url = default(string))
        {
            this.DisplayName = displayName;
            this.IconUri = iconUri;
            this.Id = id;
            this.IsAbsoluteUrl = isAbsoluteUrl;
            this.IsVisible = isVisible;
            this.Name = name;
            this.Url = url;
        }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The icon uri.
        /// </summary>
        /// <value>The icon uri.</value>
        [DataMember(Name = "iconUri", EmitDefaultValue = false)]
        public string IconUri { get; set; }

        /// <summary>
        /// The Application identifier.
        /// </summary>
        /// <value>The Application identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// a value indicating whether or not an application url is absolute
        /// </summary>
        /// <value>a value indicating whether or not an application url is absolute</value>
        [DataMember(Name = "isAbsoluteUrl", EmitDefaultValue = true)]
        public bool IsAbsoluteUrl { get; set; }

        /// <summary>
        /// a value indicating whether or not an application is visible
        /// </summary>
        /// <value>a value indicating whether or not an application is visible</value>
        [DataMember(Name = "isVisible", EmitDefaultValue = true)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// The Name.
        /// </summary>
        /// <value>The Name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The url.
        /// </summary>
        /// <value>The url.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Application {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IconUri: ").Append(IconUri).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAbsoluteUrl: ").Append(IsAbsoluteUrl).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Application);
        }

        /// <summary>
        /// Returns true if Application instances are equal
        /// </summary>
        /// <param name="input">Instance of Application to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Application input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.IconUri == input.IconUri ||
                    (this.IconUri != null &&
                    this.IconUri.Equals(input.IconUri))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.IsAbsoluteUrl == input.IsAbsoluteUrl ||
                    this.IsAbsoluteUrl.Equals(input.IsAbsoluteUrl)
                ) && 
                (
                    this.IsVisible == input.IsVisible ||
                    this.IsVisible.Equals(input.IsVisible)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.IconUri != null)
                    hashCode = hashCode * 59 + this.IconUri.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsAbsoluteUrl.GetHashCode();
                hashCode = hashCode * 59 + this.IsVisible.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
