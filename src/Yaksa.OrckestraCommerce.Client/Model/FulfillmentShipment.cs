/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentShipment
    /// </summary>
    [DataContract(Name = "FulfillmentShipment")]
    public partial class FulfillmentShipment : IEquatable<FulfillmentShipment>, IValidatableObject
    {
        /// <summary>
        /// The execution result of the shipment processing.
        /// </summary>
        /// <value>The execution result of the shipment processing.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecutionResultEnum
        {
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 1,

            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3,

            /// <summary>
            /// Enum Critical for value: Critical
            /// </summary>
            [EnumMember(Value = "Critical")]
            Critical = 4,

            /// <summary>
            /// Enum Failure for value: Failure
            /// </summary>
            [EnumMember(Value = "Failure")]
            Failure = 5

        }


        /// <summary>
        /// The execution result of the shipment processing.
        /// </summary>
        /// <value>The execution result of the shipment processing.</value>
        [DataMember(Name = "executionResult", EmitDefaultValue = false)]
        public ExecutionResultEnum? ExecutionResult { get; set; }
        /// <summary>
        /// The Fulfillment Method Type that will be used to complete the shipment.
        /// </summary>
        /// <value>The Fulfillment Method Type that will be used to complete the shipment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentMethodTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum PickUp for value: PickUp
            /// </summary>
            [EnumMember(Value = "PickUp")]
            PickUp = 2,

            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 3,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 4,

            /// <summary>
            /// Enum ShipToStore for value: ShipToStore
            /// </summary>
            [EnumMember(Value = "ShipToStore")]
            ShipToStore = 5

        }


        /// <summary>
        /// The Fulfillment Method Type that will be used to complete the shipment.
        /// </summary>
        /// <value>The Fulfillment Method Type that will be used to complete the shipment.</value>
        [DataMember(Name = "fulfillmentMethodType", EmitDefaultValue = false)]
        public FulfillmentMethodTypeEnum? FulfillmentMethodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentShipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentShipment" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="aggregatedStatus">The name of the aggregated status when applicable..</param>
        /// <param name="allowedManualTransitions">a list of allowed manual transitions from the shipment current status..</param>
        /// <param name="created">Date the shipment fullfillment was created..</param>
        /// <param name="executionResult">The execution result of the shipment processing..</param>
        /// <param name="expectedDeliveryDate">The expected delivery date..</param>
        /// <param name="fulfillmentExceptions">The fulfillment exceptions..</param>
        /// <param name="fulfillmentLocationId">The fulfillment location id..</param>
        /// <param name="fulfillmentMethodType">The Fulfillment Method Type that will be used to complete the shipment..</param>
        /// <param name="fulfillmentScheduledTimeBeginDate">The begin date and time scheduled for the fulfillment..</param>
        /// <param name="fulfillmentScheduledTimeEndDate">The end date and time scheduled for the fulfillment..</param>
        /// <param name="isProcessing">A value indicating whether the shipment is processing..</param>
        /// <param name="lastModified">Date that the last modification was applied to the shipment fullfillment..</param>
        /// <param name="nbItems">The number of items in the shipment..</param>
        /// <param name="nbUnits">The number of units in the shipment..</param>
        /// <param name="pickUpLocationId">The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise..</param>
        /// <param name="returnTrackingNumber">The shipment return tracking number provided by the shipping provider..</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="shippingProviderId">The fulfillment provider id..</param>
        /// <param name="slAs">The fulfillment SLAs..</param>
        /// <param name="status">The current status of the shipment..</param>
        /// <param name="trackingNumber">The shipment tracking number provided by the shipping provider..</param>
        public FulfillmentShipment(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string aggregatedStatus = default(string), List<string> allowedManualTransitions = default(List<string>), DateTime created = default(DateTime), ExecutionResultEnum? executionResult = default(ExecutionResultEnum?), DateTime expectedDeliveryDate = default(DateTime), List<FulfillmentException> fulfillmentExceptions = default(List<FulfillmentException>), string fulfillmentLocationId = default(string), FulfillmentMethodTypeEnum? fulfillmentMethodType = default(FulfillmentMethodTypeEnum?), DateTime fulfillmentScheduledTimeBeginDate = default(DateTime), DateTime fulfillmentScheduledTimeEndDate = default(DateTime), bool isProcessing = default(bool), DateTime lastModified = default(DateTime), int nbItems = default(int), double nbUnits = default(double), string pickUpLocationId = default(string), string returnTrackingNumber = default(string), Address shippingAddress = default(Address), string shippingProviderId = default(string), List<OrderFulfillmentSLA> slAs = default(List<OrderFulfillmentSLA>), string status = default(string), string trackingNumber = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for FulfillmentShipment and cannot be null");
            this.PropertyBag = propertyBag;
            this.AggregatedStatus = aggregatedStatus;
            this.AllowedManualTransitions = allowedManualTransitions;
            this.Created = created;
            this.ExecutionResult = executionResult;
            this.ExpectedDeliveryDate = expectedDeliveryDate;
            this.FulfillmentExceptions = fulfillmentExceptions;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.FulfillmentMethodType = fulfillmentMethodType;
            this.FulfillmentScheduledTimeBeginDate = fulfillmentScheduledTimeBeginDate;
            this.FulfillmentScheduledTimeEndDate = fulfillmentScheduledTimeEndDate;
            this.IsProcessing = isProcessing;
            this.LastModified = lastModified;
            this.NbItems = nbItems;
            this.NbUnits = nbUnits;
            this.PickUpLocationId = pickUpLocationId;
            this.ReturnTrackingNumber = returnTrackingNumber;
            this.ShippingAddress = shippingAddress;
            this.ShippingProviderId = shippingProviderId;
            this.SlAs = slAs;
            this.Status = status;
            this.TrackingNumber = trackingNumber;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The name of the aggregated status when applicable.
        /// </summary>
        /// <value>The name of the aggregated status when applicable.</value>
        [DataMember(Name = "aggregatedStatus", EmitDefaultValue = false)]
        public string AggregatedStatus { get; set; }

        /// <summary>
        /// a list of allowed manual transitions from the shipment current status.
        /// </summary>
        /// <value>a list of allowed manual transitions from the shipment current status.</value>
        [DataMember(Name = "allowedManualTransitions", EmitDefaultValue = false)]
        public List<string> AllowedManualTransitions { get; set; }

        /// <summary>
        /// Date the shipment fullfillment was created.
        /// </summary>
        /// <value>Date the shipment fullfillment was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The expected delivery date.
        /// </summary>
        /// <value>The expected delivery date.</value>
        [DataMember(Name = "expectedDeliveryDate", EmitDefaultValue = false)]
        public DateTime ExpectedDeliveryDate { get; set; }

        /// <summary>
        /// The fulfillment exceptions.
        /// </summary>
        /// <value>The fulfillment exceptions.</value>
        [DataMember(Name = "fulfillmentExceptions", EmitDefaultValue = false)]
        public List<FulfillmentException> FulfillmentExceptions { get; set; }

        /// <summary>
        /// The fulfillment location id.
        /// </summary>
        /// <value>The fulfillment location id.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// The begin date and time scheduled for the fulfillment.
        /// </summary>
        /// <value>The begin date and time scheduled for the fulfillment.</value>
        [DataMember(Name = "fulfillmentScheduledTimeBeginDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeBeginDate { get; set; }

        /// <summary>
        /// The end date and time scheduled for the fulfillment.
        /// </summary>
        /// <value>The end date and time scheduled for the fulfillment.</value>
        [DataMember(Name = "fulfillmentScheduledTimeEndDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeEndDate { get; set; }

        /// <summary>
        /// A value indicating whether the shipment is processing.
        /// </summary>
        /// <value>A value indicating whether the shipment is processing.</value>
        [DataMember(Name = "isProcessing", EmitDefaultValue = true)]
        public bool IsProcessing { get; set; }

        /// <summary>
        /// Date that the last modification was applied to the shipment fullfillment.
        /// </summary>
        /// <value>Date that the last modification was applied to the shipment fullfillment.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The number of items in the shipment.
        /// </summary>
        /// <value>The number of items in the shipment.</value>
        [DataMember(Name = "nbItems", EmitDefaultValue = false)]
        public int NbItems { get; set; }

        /// <summary>
        /// The number of units in the shipment.
        /// </summary>
        /// <value>The number of units in the shipment.</value>
        [DataMember(Name = "nbUnits", EmitDefaultValue = false)]
        public double NbUnits { get; set; }

        /// <summary>
        /// The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.
        /// </summary>
        /// <value>The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.</value>
        [DataMember(Name = "pickUpLocationId", EmitDefaultValue = false)]
        public string PickUpLocationId { get; set; }

        /// <summary>
        /// The shipment return tracking number provided by the shipping provider.
        /// </summary>
        /// <value>The shipment return tracking number provided by the shipping provider.</value>
        [DataMember(Name = "returnTrackingNumber", EmitDefaultValue = false)]
        public string ReturnTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name = "shippingAddress", EmitDefaultValue = false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// The fulfillment provider id.
        /// </summary>
        /// <value>The fulfillment provider id.</value>
        [DataMember(Name = "shippingProviderId", EmitDefaultValue = false)]
        public string ShippingProviderId { get; set; }

        /// <summary>
        /// The fulfillment SLAs.
        /// </summary>
        /// <value>The fulfillment SLAs.</value>
        [DataMember(Name = "slAs", EmitDefaultValue = false)]
        public List<OrderFulfillmentSLA> SlAs { get; set; }

        /// <summary>
        /// The current status of the shipment.
        /// </summary>
        /// <value>The current status of the shipment.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The shipment tracking number provided by the shipping provider.
        /// </summary>
        /// <value>The shipment tracking number provided by the shipping provider.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentShipment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  AggregatedStatus: ").Append(AggregatedStatus).Append("\n");
            sb.Append("  AllowedManualTransitions: ").Append(AllowedManualTransitions).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ExecutionResult: ").Append(ExecutionResult).Append("\n");
            sb.Append("  ExpectedDeliveryDate: ").Append(ExpectedDeliveryDate).Append("\n");
            sb.Append("  FulfillmentExceptions: ").Append(FulfillmentExceptions).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentMethodType: ").Append(FulfillmentMethodType).Append("\n");
            sb.Append("  FulfillmentScheduledTimeBeginDate: ").Append(FulfillmentScheduledTimeBeginDate).Append("\n");
            sb.Append("  FulfillmentScheduledTimeEndDate: ").Append(FulfillmentScheduledTimeEndDate).Append("\n");
            sb.Append("  IsProcessing: ").Append(IsProcessing).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  NbItems: ").Append(NbItems).Append("\n");
            sb.Append("  NbUnits: ").Append(NbUnits).Append("\n");
            sb.Append("  PickUpLocationId: ").Append(PickUpLocationId).Append("\n");
            sb.Append("  ReturnTrackingNumber: ").Append(ReturnTrackingNumber).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  ShippingProviderId: ").Append(ShippingProviderId).Append("\n");
            sb.Append("  SlAs: ").Append(SlAs).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentShipment);
        }

        /// <summary>
        /// Returns true if FulfillmentShipment instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentShipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentShipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.AggregatedStatus == input.AggregatedStatus ||
                    (this.AggregatedStatus != null &&
                    this.AggregatedStatus.Equals(input.AggregatedStatus))
                ) && 
                (
                    this.AllowedManualTransitions == input.AllowedManualTransitions ||
                    this.AllowedManualTransitions != null &&
                    input.AllowedManualTransitions != null &&
                    this.AllowedManualTransitions.SequenceEqual(input.AllowedManualTransitions)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ExecutionResult == input.ExecutionResult ||
                    this.ExecutionResult.Equals(input.ExecutionResult)
                ) && 
                (
                    this.ExpectedDeliveryDate == input.ExpectedDeliveryDate ||
                    (this.ExpectedDeliveryDate != null &&
                    this.ExpectedDeliveryDate.Equals(input.ExpectedDeliveryDate))
                ) && 
                (
                    this.FulfillmentExceptions == input.FulfillmentExceptions ||
                    this.FulfillmentExceptions != null &&
                    input.FulfillmentExceptions != null &&
                    this.FulfillmentExceptions.SequenceEqual(input.FulfillmentExceptions)
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentMethodType == input.FulfillmentMethodType ||
                    this.FulfillmentMethodType.Equals(input.FulfillmentMethodType)
                ) && 
                (
                    this.FulfillmentScheduledTimeBeginDate == input.FulfillmentScheduledTimeBeginDate ||
                    (this.FulfillmentScheduledTimeBeginDate != null &&
                    this.FulfillmentScheduledTimeBeginDate.Equals(input.FulfillmentScheduledTimeBeginDate))
                ) && 
                (
                    this.FulfillmentScheduledTimeEndDate == input.FulfillmentScheduledTimeEndDate ||
                    (this.FulfillmentScheduledTimeEndDate != null &&
                    this.FulfillmentScheduledTimeEndDate.Equals(input.FulfillmentScheduledTimeEndDate))
                ) && 
                (
                    this.IsProcessing == input.IsProcessing ||
                    this.IsProcessing.Equals(input.IsProcessing)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.NbItems == input.NbItems ||
                    this.NbItems.Equals(input.NbItems)
                ) && 
                (
                    this.NbUnits == input.NbUnits ||
                    this.NbUnits.Equals(input.NbUnits)
                ) && 
                (
                    this.PickUpLocationId == input.PickUpLocationId ||
                    (this.PickUpLocationId != null &&
                    this.PickUpLocationId.Equals(input.PickUpLocationId))
                ) && 
                (
                    this.ReturnTrackingNumber == input.ReturnTrackingNumber ||
                    (this.ReturnTrackingNumber != null &&
                    this.ReturnTrackingNumber.Equals(input.ReturnTrackingNumber))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.ShippingProviderId == input.ShippingProviderId ||
                    (this.ShippingProviderId != null &&
                    this.ShippingProviderId.Equals(input.ShippingProviderId))
                ) && 
                (
                    this.SlAs == input.SlAs ||
                    this.SlAs != null &&
                    input.SlAs != null &&
                    this.SlAs.SequenceEqual(input.SlAs)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.AggregatedStatus != null)
                    hashCode = hashCode * 59 + this.AggregatedStatus.GetHashCode();
                if (this.AllowedManualTransitions != null)
                    hashCode = hashCode * 59 + this.AllowedManualTransitions.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.ExecutionResult.GetHashCode();
                if (this.ExpectedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.ExpectedDeliveryDate.GetHashCode();
                if (this.FulfillmentExceptions != null)
                    hashCode = hashCode * 59 + this.FulfillmentExceptions.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentMethodType.GetHashCode();
                if (this.FulfillmentScheduledTimeBeginDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeBeginDate.GetHashCode();
                if (this.FulfillmentScheduledTimeEndDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeEndDate.GetHashCode();
                hashCode = hashCode * 59 + this.IsProcessing.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                hashCode = hashCode * 59 + this.NbItems.GetHashCode();
                hashCode = hashCode * 59 + this.NbUnits.GetHashCode();
                if (this.PickUpLocationId != null)
                    hashCode = hashCode * 59 + this.PickUpLocationId.GetHashCode();
                if (this.ReturnTrackingNumber != null)
                    hashCode = hashCode * 59 + this.ReturnTrackingNumber.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.ShippingProviderId != null)
                    hashCode = hashCode * 59 + this.ShippingProviderId.GetHashCode();
                if (this.SlAs != null)
                    hashCode = hashCode * 59 + this.SlAs.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
