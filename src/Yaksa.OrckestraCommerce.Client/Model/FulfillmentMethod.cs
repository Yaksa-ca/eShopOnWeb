/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentMethod
    /// </summary>
    [DataContract(Name = "FulfillmentMethod")]
    public partial class FulfillmentMethod : IEquatable<FulfillmentMethod>, IValidatableObject
    {
        /// <summary>
        /// The FulfillmentMethodType to which the method belongs.
        /// </summary>
        /// <value>The FulfillmentMethodType to which the method belongs.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentMethodTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum PickUp for value: PickUp
            /// </summary>
            [EnumMember(Value = "PickUp")]
            PickUp = 2,

            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 3,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 4,

            /// <summary>
            /// Enum ShipToStore for value: ShipToStore
            /// </summary>
            [EnumMember(Value = "ShipToStore")]
            ShipToStore = 5

        }


        /// <summary>
        /// The FulfillmentMethodType to which the method belongs.
        /// </summary>
        /// <value>The FulfillmentMethodType to which the method belongs.</value>
        [DataMember(Name = "fulfillmentMethodType", EmitDefaultValue = false)]
        public FulfillmentMethodTypeEnum? FulfillmentMethodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentMethod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FulfillmentMethod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentMethod" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="carrierName">The carrier name for this shipping method..</param>
        /// <param name="carrierOptionDisplayName">carrierOptionDisplayName.</param>
        /// <param name="carrierServiceLevel">The carrier service level for this shipping method..</param>
        /// <param name="cost">The cost of this shipping for this cart/order..</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="expectedDeliveryDate">The date at which the delivery is expected..</param>
        /// <param name="fulfillmentMethodType">The FulfillmentMethodType to which the method belongs..</param>
        /// <param name="name">The name of the Fulfillment method..</param>
        /// <param name="shipmentId">The unique identifier of the shipment associated to this shipment method..</param>
        /// <param name="shippingProviderId">The shipping provider unique id..</param>
        /// <param name="taxCategory">The tax category to use for tax on shipping. This value value is read from the ShippingProvider..</param>
        public FulfillmentMethod(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string carrierName = default(string), Dictionary<string, string> carrierOptionDisplayName = default(Dictionary<string, string>), string carrierServiceLevel = default(string), double cost = default(double), Dictionary<string, string> displayName = default(Dictionary<string, string>), DateTime expectedDeliveryDate = default(DateTime), FulfillmentMethodTypeEnum? fulfillmentMethodType = default(FulfillmentMethodTypeEnum?), string name = default(string), string shipmentId = default(string), string shippingProviderId = default(string), string taxCategory = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for FulfillmentMethod and cannot be null");
            this.PropertyBag = propertyBag;
            this.CarrierName = carrierName;
            this.CarrierOptionDisplayName = carrierOptionDisplayName;
            this.CarrierServiceLevel = carrierServiceLevel;
            this.Cost = cost;
            this.DisplayName = displayName;
            this.ExpectedDeliveryDate = expectedDeliveryDate;
            this.FulfillmentMethodType = fulfillmentMethodType;
            this.Name = name;
            this.ShipmentId = shipmentId;
            this.ShippingProviderId = shippingProviderId;
            this.TaxCategory = taxCategory;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The carrier name for this shipping method.
        /// </summary>
        /// <value>The carrier name for this shipping method.</value>
        [DataMember(Name = "carrierName", EmitDefaultValue = false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Gets or Sets CarrierOptionDisplayName
        /// </summary>
        [DataMember(Name = "carrierOptionDisplayName", EmitDefaultValue = false)]
        public Dictionary<string, string> CarrierOptionDisplayName { get; set; }

        /// <summary>
        /// The carrier service level for this shipping method.
        /// </summary>
        /// <value>The carrier service level for this shipping method.</value>
        [DataMember(Name = "carrierServiceLevel", EmitDefaultValue = false)]
        public string CarrierServiceLevel { get; set; }

        /// <summary>
        /// The cost of this shipping for this cart/order.
        /// </summary>
        /// <value>The cost of this shipping for this cart/order.</value>
        [DataMember(Name = "cost", EmitDefaultValue = false)]
        public double Cost { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The date at which the delivery is expected.
        /// </summary>
        /// <value>The date at which the delivery is expected.</value>
        [DataMember(Name = "expectedDeliveryDate", EmitDefaultValue = false)]
        public DateTime ExpectedDeliveryDate { get; set; }

        /// <summary>
        /// The name of the Fulfillment method.
        /// </summary>
        /// <value>The name of the Fulfillment method.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The unique identifier of the shipment associated to this shipment method.
        /// </summary>
        /// <value>The unique identifier of the shipment associated to this shipment method.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The shipping provider unique id.
        /// </summary>
        /// <value>The shipping provider unique id.</value>
        [DataMember(Name = "shippingProviderId", EmitDefaultValue = false)]
        public string ShippingProviderId { get; set; }

        /// <summary>
        /// The tax category to use for tax on shipping. This value value is read from the ShippingProvider.
        /// </summary>
        /// <value>The tax category to use for tax on shipping. This value value is read from the ShippingProvider.</value>
        [DataMember(Name = "taxCategory", EmitDefaultValue = false)]
        public string TaxCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentMethod {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  CarrierOptionDisplayName: ").Append(CarrierOptionDisplayName).Append("\n");
            sb.Append("  CarrierServiceLevel: ").Append(CarrierServiceLevel).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ExpectedDeliveryDate: ").Append(ExpectedDeliveryDate).Append("\n");
            sb.Append("  FulfillmentMethodType: ").Append(FulfillmentMethodType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShippingProviderId: ").Append(ShippingProviderId).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentMethod);
        }

        /// <summary>
        /// Returns true if FulfillmentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.CarrierName == input.CarrierName ||
                    (this.CarrierName != null &&
                    this.CarrierName.Equals(input.CarrierName))
                ) && 
                (
                    this.CarrierOptionDisplayName == input.CarrierOptionDisplayName ||
                    this.CarrierOptionDisplayName != null &&
                    input.CarrierOptionDisplayName != null &&
                    this.CarrierOptionDisplayName.SequenceEqual(input.CarrierOptionDisplayName)
                ) && 
                (
                    this.CarrierServiceLevel == input.CarrierServiceLevel ||
                    (this.CarrierServiceLevel != null &&
                    this.CarrierServiceLevel.Equals(input.CarrierServiceLevel))
                ) && 
                (
                    this.Cost == input.Cost ||
                    this.Cost.Equals(input.Cost)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.ExpectedDeliveryDate == input.ExpectedDeliveryDate ||
                    (this.ExpectedDeliveryDate != null &&
                    this.ExpectedDeliveryDate.Equals(input.ExpectedDeliveryDate))
                ) && 
                (
                    this.FulfillmentMethodType == input.FulfillmentMethodType ||
                    this.FulfillmentMethodType.Equals(input.FulfillmentMethodType)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShippingProviderId == input.ShippingProviderId ||
                    (this.ShippingProviderId != null &&
                    this.ShippingProviderId.Equals(input.ShippingProviderId))
                ) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.CarrierName != null)
                    hashCode = hashCode * 59 + this.CarrierName.GetHashCode();
                if (this.CarrierOptionDisplayName != null)
                    hashCode = hashCode * 59 + this.CarrierOptionDisplayName.GetHashCode();
                if (this.CarrierServiceLevel != null)
                    hashCode = hashCode * 59 + this.CarrierServiceLevel.GetHashCode();
                hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ExpectedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.ExpectedDeliveryDate.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentMethodType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShippingProviderId != null)
                    hashCode = hashCode * 59 + this.ShippingProviderId.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
