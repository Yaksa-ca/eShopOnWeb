/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Coupon
    /// </summary>
    [DataContract(Name = "Coupon")]
    public partial class Coupon : IEquatable<Coupon>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets a value to indicate if the coupon is usable and the reason when it is not.
        /// </summary>
        /// <value>Gets or sets a value to indicate if the coupon is usable and the reason when it is not.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CouponStateEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Ok for value: Ok
            /// </summary>
            [EnumMember(Value = "Ok")]
            Ok = 2,

            /// <summary>
            /// Enum NotYetActive for value: NotYetActive
            /// </summary>
            [EnumMember(Value = "NotYetActive")]
            NotYetActive = 3,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 4,

            /// <summary>
            /// Enum GlobalMaximumUsed for value: GlobalMaximumUsed
            /// </summary>
            [EnumMember(Value = "GlobalMaximumUsed")]
            GlobalMaximumUsed = 5,

            /// <summary>
            /// Enum CustomerMaximumUsed for value: CustomerMaximumUsed
            /// </summary>
            [EnumMember(Value = "CustomerMaximumUsed")]
            CustomerMaximumUsed = 6,

            /// <summary>
            /// Enum CampaignNotFound for value: CampaignNotFound
            /// </summary>
            [EnumMember(Value = "CampaignNotFound")]
            CampaignNotFound = 7,

            /// <summary>
            /// Enum CampaignNotLive for value: CampaignNotLive
            /// </summary>
            [EnumMember(Value = "CampaignNotLive")]
            CampaignNotLive = 8,

            /// <summary>
            /// Enum InvalidCoupon for value: InvalidCoupon
            /// </summary>
            [EnumMember(Value = "InvalidCoupon")]
            InvalidCoupon = 9,

            /// <summary>
            /// Enum ValidCouponCannotApply for value: ValidCouponCannotApply
            /// </summary>
            [EnumMember(Value = "ValidCouponCannotApply")]
            ValidCouponCannotApply = 10

        }


        /// <summary>
        /// Gets or sets a value to indicate if the coupon is usable and the reason when it is not.
        /// </summary>
        /// <value>Gets or sets a value to indicate if the coupon is usable and the reason when it is not.</value>
        [DataMember(Name = "couponState", EmitDefaultValue = false)]
        public CouponStateEnum? CouponState { get; set; }
        /// <summary>
        /// The coupon mode.  This mode is used to know if the coupon is unique for this promotion, or part of a set of coupons.
        /// </summary>
        /// <value>The coupon mode.  This mode is used to know if the coupon is unique for this promotion, or part of a set of coupons.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 2,

            /// <summary>
            /// Enum Single for value: Single
            /// </summary>
            [EnumMember(Value = "Single")]
            Single = 3,

            /// <summary>
            /// Enum Multiple for value: Multiple
            /// </summary>
            [EnumMember(Value = "Multiple")]
            Multiple = 4

        }


        /// <summary>
        /// The coupon mode.  This mode is used to know if the coupon is unique for this promotion, or part of a set of coupons.
        /// </summary>
        /// <value>The coupon mode.  This mode is used to know if the coupon is unique for this promotion, or part of a set of coupons.</value>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Coupon" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Coupon() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Coupon" /> class.
        /// </summary>
        /// <param name="couponCode">The coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system..</param>
        /// <param name="couponState">Gets or sets a value to indicate if the coupon is usable and the reason when it is not..</param>
        /// <param name="displayText">The coupon display text..</param>
        /// <param name="hasBeenConsumed">Gets or sets a value indicating whether or not the coupon has been consumed in a previous order submission. This will be used to un-consume a coupon if it is no longer active when submitted. (Cart and draft only).</param>
        /// <param name="id">The unique identifier of the coupon..</param>
        /// <param name="isActive">Gets or sets a value indicating whether or not the coupon is being applied to the current order. (Cart and draft only).</param>
        /// <param name="isDeleted">Gets or sets a value indicating whether or not the coupon has a soft delete. This is used to ensure that coupons that have been previously consumed are not removed before they are de-consumed. (Cart and draft only).</param>
        /// <param name="mode">The coupon mode.  This mode is used to know if the coupon is unique for this promotion, or part of a set of coupons..</param>
        /// <param name="promotionId">The unique identifier of the promotion to which the coupon is associated. (required).</param>
        /// <param name="usedCount">Gets or sets the number of times the promo code was used..</param>
        public Coupon(string couponCode = default(string), CouponStateEnum? couponState = default(CouponStateEnum?), string displayText = default(string), bool hasBeenConsumed = default(bool), string id = default(string), bool isActive = default(bool), bool isDeleted = default(bool), ModeEnum? mode = default(ModeEnum?), string promotionId = default(string), int usedCount = default(int))
        {
            // to ensure "promotionId" is required (not null)
            this.PromotionId = promotionId ?? throw new ArgumentNullException("promotionId is a required property for Coupon and cannot be null");
            this.CouponCode = couponCode;
            this.CouponState = couponState;
            this.DisplayText = displayText;
            this.HasBeenConsumed = hasBeenConsumed;
            this.Id = id;
            this.IsActive = isActive;
            this.IsDeleted = isDeleted;
            this.Mode = mode;
            this.UsedCount = usedCount;
        }

        /// <summary>
        /// The coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.
        /// </summary>
        /// <value>The coupon code. This is the string that is to be entered on the Cart or Order to be able to fetch the coupon and apply the promotion. It is unique in the system.</value>
        [DataMember(Name = "couponCode", EmitDefaultValue = false)]
        public string CouponCode { get; set; }

        /// <summary>
        /// The coupon display text.
        /// </summary>
        /// <value>The coupon display text.</value>
        [DataMember(Name = "displayText", EmitDefaultValue = false)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether or not the coupon has been consumed in a previous order submission. This will be used to un-consume a coupon if it is no longer active when submitted. (Cart and draft only)
        /// </summary>
        /// <value>Gets or sets a value indicating whether or not the coupon has been consumed in a previous order submission. This will be used to un-consume a coupon if it is no longer active when submitted. (Cart and draft only)</value>
        [DataMember(Name = "hasBeenConsumed", EmitDefaultValue = true)]
        public bool HasBeenConsumed { get; set; }

        /// <summary>
        /// The unique identifier of the coupon.
        /// </summary>
        /// <value>The unique identifier of the coupon.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether or not the coupon is being applied to the current order. (Cart and draft only)
        /// </summary>
        /// <value>Gets or sets a value indicating whether or not the coupon is being applied to the current order. (Cart and draft only)</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether or not the coupon has a soft delete. This is used to ensure that coupons that have been previously consumed are not removed before they are de-consumed. (Cart and draft only)
        /// </summary>
        /// <value>Gets or sets a value indicating whether or not the coupon has a soft delete. This is used to ensure that coupons that have been previously consumed are not removed before they are de-consumed. (Cart and draft only)</value>
        [DataMember(Name = "isDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// The unique identifier of the promotion to which the coupon is associated.
        /// </summary>
        /// <value>The unique identifier of the promotion to which the coupon is associated.</value>
        [DataMember(Name = "promotionId", IsRequired = true, EmitDefaultValue = false)]
        public string PromotionId { get; set; }

        /// <summary>
        /// Gets or sets the number of times the promo code was used.
        /// </summary>
        /// <value>Gets or sets the number of times the promo code was used.</value>
        [DataMember(Name = "usedCount", EmitDefaultValue = false)]
        public int UsedCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Coupon {\n");
            sb.Append("  CouponCode: ").Append(CouponCode).Append("\n");
            sb.Append("  CouponState: ").Append(CouponState).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  HasBeenConsumed: ").Append(HasBeenConsumed).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  UsedCount: ").Append(UsedCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Coupon);
        }

        /// <summary>
        /// Returns true if Coupon instances are equal
        /// </summary>
        /// <param name="input">Instance of Coupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Coupon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CouponCode == input.CouponCode ||
                    (this.CouponCode != null &&
                    this.CouponCode.Equals(input.CouponCode))
                ) && 
                (
                    this.CouponState == input.CouponState ||
                    this.CouponState.Equals(input.CouponState)
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.HasBeenConsumed == input.HasBeenConsumed ||
                    this.HasBeenConsumed.Equals(input.HasBeenConsumed)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    this.IsDeleted.Equals(input.IsDeleted)
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.UsedCount == input.UsedCount ||
                    this.UsedCount.Equals(input.UsedCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CouponCode != null)
                    hashCode = hashCode * 59 + this.CouponCode.GetHashCode();
                hashCode = hashCode * 59 + this.CouponState.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                hashCode = hashCode * 59 + this.HasBeenConsumed.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                hashCode = hashCode * 59 + this.UsedCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
