/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// The API used to query the search engine.
    /// </summary>
    [DataContract(Name = "SearchProductByIdsRequest")]
    public partial class SearchProductByIdsRequest : IEquatable<SearchProductByIdsRequest>, IValidatableObject
    {
        /// <summary>
        /// The variant grouping strategy
        /// </summary>
        /// <value>The variant grouping strategy</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VariantGroupingStrategyEnum
        {
            /// <summary>
            /// Enum PerConfiguredSearchOption for value: PerConfiguredSearchOption
            /// </summary>
            [EnumMember(Value = "PerConfiguredSearchOption")]
            PerConfiguredSearchOption = 1,

            /// <summary>
            /// Enum PerProduct for value: PerProduct
            /// </summary>
            [EnumMember(Value = "PerProduct")]
            PerProduct = 2,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3

        }


        /// <summary>
        /// The variant grouping strategy
        /// </summary>
        /// <value>The variant grouping strategy</value>
        [DataMember(Name = "variantGroupingStrategy", EmitDefaultValue = false)]
        public VariantGroupingStrategyEnum? VariantGroupingStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchProductByIdsRequest" /> class.
        /// </summary>
        /// <param name="configurationName">The name of the configuration to use to process this request.</param>
        /// <param name="activeProductOnly">whether to return active products only. True by default..</param>
        /// <param name="ids">the list of products to return..</param>
        /// <param name="properties">the collection of properties, represented as string, to return in the search results..</param>
        /// <param name="variantGroupingStrategy">The variant grouping strategy.</param>
        public SearchProductByIdsRequest(string configurationName = default(string), bool activeProductOnly = default(bool), List<string> ids = default(List<string>), List<string> properties = default(List<string>), VariantGroupingStrategyEnum? variantGroupingStrategy = default(VariantGroupingStrategyEnum?))
        {
            this.ConfigurationName = configurationName;
            this.ActiveProductOnly = activeProductOnly;
            this.Ids = ids;
            this.Properties = properties;
            this.VariantGroupingStrategy = variantGroupingStrategy;
        }

        /// <summary>
        /// The name of the configuration to use to process this request
        /// </summary>
        /// <value>The name of the configuration to use to process this request</value>
        [DataMember(Name = "configurationName", EmitDefaultValue = false)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// whether to return active products only. True by default.
        /// </summary>
        /// <value>whether to return active products only. True by default.</value>
        [DataMember(Name = "activeProductOnly", EmitDefaultValue = true)]
        public bool ActiveProductOnly { get; set; }

        /// <summary>
        /// the list of products to return.
        /// </summary>
        /// <value>the list of products to return.</value>
        [DataMember(Name = "ids", EmitDefaultValue = false)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// the collection of properties, represented as string, to return in the search results.
        /// </summary>
        /// <value>the collection of properties, represented as string, to return in the search results.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<string> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchProductByIdsRequest {\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  ActiveProductOnly: ").Append(ActiveProductOnly).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  VariantGroupingStrategy: ").Append(VariantGroupingStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchProductByIdsRequest);
        }

        /// <summary>
        /// Returns true if SearchProductByIdsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchProductByIdsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchProductByIdsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.ActiveProductOnly == input.ActiveProductOnly ||
                    this.ActiveProductOnly.Equals(input.ActiveProductOnly)
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.VariantGroupingStrategy == input.VariantGroupingStrategy ||
                    this.VariantGroupingStrategy.Equals(input.VariantGroupingStrategy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigurationName != null)
                    hashCode = hashCode * 59 + this.ConfigurationName.GetHashCode();
                hashCode = hashCode * 59 + this.ActiveProductOnly.GetHashCode();
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                hashCode = hashCode * 59 + this.VariantGroupingStrategy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
