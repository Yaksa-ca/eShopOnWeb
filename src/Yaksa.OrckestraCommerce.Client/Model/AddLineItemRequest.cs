/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Carts are entities used for assembling an order before submitting.
    /// </summary>
    [DataContract(Name = "AddLineItemRequest")]
    public partial class AddLineItemRequest : IEquatable<AddLineItemRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddLineItemRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddLineItemRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddLineItemRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The culture name in which language the data will be returned..</param>
        /// <param name="workflowToExecute">The name of the workflow that should be executed..</param>
        /// <param name="giftMessage">if the product is to be gift-wrapped, a message to be written on it..</param>
        /// <param name="giftWrap">whether or not the item will wrapped in a gift presentation..</param>
        /// <param name="id">The unique identifier of the LineItem to create..</param>
        /// <param name="placedPrice">The price of the LineItem, at the moment that the Product is added to the cart..</param>
        /// <param name="productId">The unique identifier of the product. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="quantity">The number of items bought for this Product. (required).</param>
        /// <param name="recurringOrderFrequencyName">the name of the recurring order program frequency..</param>
        /// <param name="recurringOrderProgramName">the name of the recurring order program..</param>
        /// <param name="variantId">The unique identifier of the product variant, if there is one..</param>
        public AddLineItemRequest(string cultureName = default(string), string workflowToExecute = default(string), string giftMessage = default(string), bool giftWrap = default(bool), string id = default(string), double placedPrice = default(double), string productId = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), double quantity = default(double), string recurringOrderFrequencyName = default(string), string recurringOrderProgramName = default(string), string variantId = default(string))
        {
            // to ensure "productId" is required (not null)
            this.ProductId = productId ?? throw new ArgumentNullException("productId is a required property for AddLineItemRequest and cannot be null");
            this.Quantity = quantity;
            this.CultureName = cultureName;
            this.WorkflowToExecute = workflowToExecute;
            this.GiftMessage = giftMessage;
            this.GiftWrap = giftWrap;
            this.Id = id;
            this.PlacedPrice = placedPrice;
            this.PropertyBag = propertyBag;
            this.RecurringOrderFrequencyName = recurringOrderFrequencyName;
            this.RecurringOrderProgramName = recurringOrderProgramName;
            this.VariantId = variantId;
        }

        /// <summary>
        /// The culture name in which language the data will be returned.
        /// </summary>
        /// <value>The culture name in which language the data will be returned.</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The name of the workflow that should be executed.
        /// </summary>
        /// <value>The name of the workflow that should be executed.</value>
        [DataMember(Name = "workflowToExecute", EmitDefaultValue = false)]
        public string WorkflowToExecute { get; set; }

        /// <summary>
        /// if the product is to be gift-wrapped, a message to be written on it.
        /// </summary>
        /// <value>if the product is to be gift-wrapped, a message to be written on it.</value>
        [DataMember(Name = "giftMessage", EmitDefaultValue = false)]
        public string GiftMessage { get; set; }

        /// <summary>
        /// whether or not the item will wrapped in a gift presentation.
        /// </summary>
        /// <value>whether or not the item will wrapped in a gift presentation.</value>
        [DataMember(Name = "giftWrap", EmitDefaultValue = true)]
        public bool GiftWrap { get; set; }

        /// <summary>
        /// The unique identifier of the LineItem to create.
        /// </summary>
        /// <value>The unique identifier of the LineItem to create.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The price of the LineItem, at the moment that the Product is added to the cart.
        /// </summary>
        /// <value>The price of the LineItem, at the moment that the Product is added to the cart.</value>
        [DataMember(Name = "placedPrice", EmitDefaultValue = false)]
        public double PlacedPrice { get; set; }

        /// <summary>
        /// The unique identifier of the product.
        /// </summary>
        /// <value>The unique identifier of the product.</value>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The number of items bought for this Product.
        /// </summary>
        /// <value>The number of items bought for this Product.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// the name of the recurring order program frequency.
        /// </summary>
        /// <value>the name of the recurring order program frequency.</value>
        [DataMember(Name = "recurringOrderFrequencyName", EmitDefaultValue = false)]
        public string RecurringOrderFrequencyName { get; set; }

        /// <summary>
        /// the name of the recurring order program.
        /// </summary>
        /// <value>the name of the recurring order program.</value>
        [DataMember(Name = "recurringOrderProgramName", EmitDefaultValue = false)]
        public string RecurringOrderProgramName { get; set; }

        /// <summary>
        /// The unique identifier of the product variant, if there is one.
        /// </summary>
        /// <value>The unique identifier of the product variant, if there is one.</value>
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddLineItemRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  WorkflowToExecute: ").Append(WorkflowToExecute).Append("\n");
            sb.Append("  GiftMessage: ").Append(GiftMessage).Append("\n");
            sb.Append("  GiftWrap: ").Append(GiftWrap).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlacedPrice: ").Append(PlacedPrice).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RecurringOrderFrequencyName: ").Append(RecurringOrderFrequencyName).Append("\n");
            sb.Append("  RecurringOrderProgramName: ").Append(RecurringOrderProgramName).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddLineItemRequest);
        }

        /// <summary>
        /// Returns true if AddLineItemRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddLineItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddLineItemRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.WorkflowToExecute == input.WorkflowToExecute ||
                    (this.WorkflowToExecute != null &&
                    this.WorkflowToExecute.Equals(input.WorkflowToExecute))
                ) && 
                (
                    this.GiftMessage == input.GiftMessage ||
                    (this.GiftMessage != null &&
                    this.GiftMessage.Equals(input.GiftMessage))
                ) && 
                (
                    this.GiftWrap == input.GiftWrap ||
                    this.GiftWrap.Equals(input.GiftWrap)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PlacedPrice == input.PlacedPrice ||
                    this.PlacedPrice.Equals(input.PlacedPrice)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.RecurringOrderFrequencyName == input.RecurringOrderFrequencyName ||
                    (this.RecurringOrderFrequencyName != null &&
                    this.RecurringOrderFrequencyName.Equals(input.RecurringOrderFrequencyName))
                ) && 
                (
                    this.RecurringOrderProgramName == input.RecurringOrderProgramName ||
                    (this.RecurringOrderProgramName != null &&
                    this.RecurringOrderProgramName.Equals(input.RecurringOrderProgramName))
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.WorkflowToExecute != null)
                    hashCode = hashCode * 59 + this.WorkflowToExecute.GetHashCode();
                if (this.GiftMessage != null)
                    hashCode = hashCode * 59 + this.GiftMessage.GetHashCode();
                hashCode = hashCode * 59 + this.GiftWrap.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.PlacedPrice.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RecurringOrderFrequencyName != null)
                    hashCode = hashCode * 59 + this.RecurringOrderFrequencyName.GetHashCode();
                if (this.RecurringOrderProgramName != null)
                    hashCode = hashCode * 59 + this.RecurringOrderProgramName.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
