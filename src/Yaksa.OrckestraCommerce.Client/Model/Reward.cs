/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Reward
    /// </summary>
    [DataContract(Name = "Reward")]
    public partial class Reward : IEquatable<Reward>, IValidatableObject
    {
        /// <summary>
        /// The level of effectivity of this reward.
        /// </summary>
        /// <value>The level of effectivity of this reward.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            /// <summary>
            /// Enum LineItem for value: LineItem
            /// </summary>
            [EnumMember(Value = "LineItem")]
            LineItem = 1,

            /// <summary>
            /// Enum Shipment for value: Shipment
            /// </summary>
            [EnumMember(Value = "Shipment")]
            Shipment = 2,

            /// <summary>
            /// Enum FulfillmentMethod for value: FulfillmentMethod
            /// </summary>
            [EnumMember(Value = "FulfillmentMethod")]
            FulfillmentMethod = 3

        }


        /// <summary>
        /// The level of effectivity of this reward.
        /// </summary>
        /// <value>The level of effectivity of this reward.</value>
        [DataMember(Name = "level", EmitDefaultValue = false)]
        public LevelEnum? Level { get; set; }
        /// <summary>
        /// The type of reward. (e.g: Discount or External)
        /// </summary>
        /// <value>The type of reward. (e.g: Discount or External)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RewardTypeEnum
        {
            /// <summary>
            /// Enum Discount for value: Discount
            /// </summary>
            [EnumMember(Value = "Discount")]
            Discount = 1,

            /// <summary>
            /// Enum External for value: External
            /// </summary>
            [EnumMember(Value = "External")]
            External = 2,

            /// <summary>
            /// Enum Gift for value: Gift
            /// </summary>
            [EnumMember(Value = "Gift")]
            Gift = 3

        }


        /// <summary>
        /// The type of reward. (e.g: Discount or External)
        /// </summary>
        /// <value>The type of reward. (e.g: Discount or External)</value>
        [DataMember(Name = "rewardType", EmitDefaultValue = false)]
        public RewardTypeEnum? RewardType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reward" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Reward() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Reward" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="amount">The fixed amount for this reward..</param>
        /// <param name="campaignId">The id of the campaign of the promotion giving this reward..</param>
        /// <param name="campaignName">The name of the campaign of the promotion giving this reward..</param>
        /// <param name="description">The description of the promotion..</param>
        /// <param name="level">The level of effectivity of this reward..</param>
        /// <param name="promotionId">The unique identifier of the promotion giving this reward..</param>
        /// <param name="promotionName">The promotion name for this reward..</param>
        /// <param name="promotionVersion">The version number of the promotion..</param>
        /// <param name="relatedObjectId">The relative object Id (LineItem.Id or Shipment.Id) depending of the Reward.Level..</param>
        /// <param name="rewardType">The type of reward. (e.g: Discount or External).</param>
        public Reward(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), double amount = default(double), string campaignId = default(string), string campaignName = default(string), string description = default(string), LevelEnum? level = default(LevelEnum?), string promotionId = default(string), string promotionName = default(string), int promotionVersion = default(int), string relatedObjectId = default(string), RewardTypeEnum? rewardType = default(RewardTypeEnum?))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Reward and cannot be null");
            this.PropertyBag = propertyBag;
            this.Amount = amount;
            this.CampaignId = campaignId;
            this.CampaignName = campaignName;
            this.Description = description;
            this.Level = level;
            this.PromotionId = promotionId;
            this.PromotionName = promotionName;
            this.PromotionVersion = promotionVersion;
            this.RelatedObjectId = relatedObjectId;
            this.RewardType = rewardType;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The fixed amount for this reward.
        /// </summary>
        /// <value>The fixed amount for this reward.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// The id of the campaign of the promotion giving this reward.
        /// </summary>
        /// <value>The id of the campaign of the promotion giving this reward.</value>
        [DataMember(Name = "campaignId", EmitDefaultValue = false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// The name of the campaign of the promotion giving this reward.
        /// </summary>
        /// <value>The name of the campaign of the promotion giving this reward.</value>
        [DataMember(Name = "campaignName", EmitDefaultValue = false)]
        public string CampaignName { get; set; }

        /// <summary>
        /// The description of the promotion.
        /// </summary>
        /// <value>The description of the promotion.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier of the promotion giving this reward.
        /// </summary>
        /// <value>The unique identifier of the promotion giving this reward.</value>
        [DataMember(Name = "promotionId", EmitDefaultValue = false)]
        public string PromotionId { get; set; }

        /// <summary>
        /// The promotion name for this reward.
        /// </summary>
        /// <value>The promotion name for this reward.</value>
        [DataMember(Name = "promotionName", EmitDefaultValue = false)]
        public string PromotionName { get; set; }

        /// <summary>
        /// The version number of the promotion.
        /// </summary>
        /// <value>The version number of the promotion.</value>
        [DataMember(Name = "promotionVersion", EmitDefaultValue = false)]
        public int PromotionVersion { get; set; }

        /// <summary>
        /// The relative object Id (LineItem.Id or Shipment.Id) depending of the Reward.Level.
        /// </summary>
        /// <value>The relative object Id (LineItem.Id or Shipment.Id) depending of the Reward.Level.</value>
        [DataMember(Name = "relatedObjectId", EmitDefaultValue = false)]
        public string RelatedObjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Reward {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  PromotionName: ").Append(PromotionName).Append("\n");
            sb.Append("  PromotionVersion: ").Append(PromotionVersion).Append("\n");
            sb.Append("  RelatedObjectId: ").Append(RelatedObjectId).Append("\n");
            sb.Append("  RewardType: ").Append(RewardType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Reward);
        }

        /// <summary>
        /// Returns true if Reward instances are equal
        /// </summary>
        /// <param name="input">Instance of Reward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Reward input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.CampaignName == input.CampaignName ||
                    (this.CampaignName != null &&
                    this.CampaignName.Equals(input.CampaignName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.PromotionName == input.PromotionName ||
                    (this.PromotionName != null &&
                    this.PromotionName.Equals(input.PromotionName))
                ) && 
                (
                    this.PromotionVersion == input.PromotionVersion ||
                    this.PromotionVersion.Equals(input.PromotionVersion)
                ) && 
                (
                    this.RelatedObjectId == input.RelatedObjectId ||
                    (this.RelatedObjectId != null &&
                    this.RelatedObjectId.Equals(input.RelatedObjectId))
                ) && 
                (
                    this.RewardType == input.RewardType ||
                    this.RewardType.Equals(input.RewardType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                if (this.CampaignName != null)
                    hashCode = hashCode * 59 + this.CampaignName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.PromotionName != null)
                    hashCode = hashCode * 59 + this.PromotionName.GetHashCode();
                hashCode = hashCode * 59 + this.PromotionVersion.GetHashCode();
                if (this.RelatedObjectId != null)
                    hashCode = hashCode * 59 + this.RelatedObjectId.GetHashCode();
                hashCode = hashCode * 59 + this.RewardType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
