/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Shipment
    /// </summary>
    [DataContract(Name = "Shipment")]
    public partial class Shipment : IEquatable<Shipment>, IValidatableObject
    {
        /// <summary>
        /// The fulfillment location type.
        /// </summary>
        /// <value>The fulfillment location type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentLocationTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Store for value: Store
            /// </summary>
            [EnumMember(Value = "Store")]
            Store = 2,

            /// <summary>
            /// Enum Warehouse for value: Warehouse
            /// </summary>
            [EnumMember(Value = "Warehouse")]
            Warehouse = 3

        }


        /// <summary>
        /// The fulfillment location type.
        /// </summary>
        /// <value>The fulfillment location type.</value>
        [DataMember(Name = "fulfillmentLocationType", EmitDefaultValue = false)]
        public FulfillmentLocationTypeEnum? FulfillmentLocationType { get; set; }
        /// <summary>
        /// The fulfillment schedule mode.
        /// </summary>
        /// <value>The fulfillment schedule mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentScheduleModeEnum
        {
            /// <summary>
            /// Enum Asap for value: Asap
            /// </summary>
            [EnumMember(Value = "Asap")]
            Asap = 1,

            /// <summary>
            /// Enum Specified for value: Specified
            /// </summary>
            [EnumMember(Value = "Specified")]
            Specified = 2

        }


        /// <summary>
        /// The fulfillment schedule mode.
        /// </summary>
        /// <value>The fulfillment schedule mode.</value>
        [DataMember(Name = "fulfillmentScheduleMode", EmitDefaultValue = false)]
        public FulfillmentScheduleModeEnum? FulfillmentScheduleMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Shipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="additionalFeeAmount">The amount for all shipment additional fees applied to this shipment. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="additionalFees">The collection of additional fees to apply on this line item..</param>
        /// <param name="address">address.</param>
        /// <param name="adjustmentAmount">The shipment adjustment amount..</param>
        /// <param name="adjustmentNote">The shipment adjustment note..</param>
        /// <param name="amount">The amount to pay for the shipment. The amount is usually set using the shipping method during the workflow execution..</param>
        /// <param name="created">the date when the order as created..</param>
        /// <param name="createdBy">the user id of the user that created the shipment..</param>
        /// <param name="discountAmount">The discount amount to apply on the shipment. The sum of all applicable discounts, usually calculated during the workflow execution..</param>
        /// <param name="expectedDeliveryDate">The expected delivery date..</param>
        /// <param name="fulfillmentLastAssignedDate">The last assigned date for the fulfillment..</param>
        /// <param name="fulfillmentLocationId">The fulfillment location id..</param>
        /// <param name="fulfillmentLocationType">The fulfillment location type..</param>
        /// <param name="fulfillmentMethod">fulfillmentMethod.</param>
        /// <param name="fulfillmentScheduledTimeBeginDate">The begin date and time scheduled for the fulfillment..</param>
        /// <param name="fulfillmentScheduledTimeEndDate">The end date and time scheduled for the fulfillment..</param>
        /// <param name="fulfillmentScheduleMode">The fulfillment schedule mode..</param>
        /// <param name="fulfillmentScheduleReservationDate">the date the fulfillment reservation was done..</param>
        /// <param name="fulfillmentScheduleReservationNumber">the reservation number for the scheduled fulfillment date and time..</param>
        /// <param name="lastModified">the date when the shipment was last modified..</param>
        /// <param name="lastModifiedBy">the user id of the user that last modified the shipment..</param>
        /// <param name="lineItems">The collection of items included in the order. A line item represents a product and its quantity that the customer places in the cart..</param>
        /// <param name="pickUpLocationId">The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise..</param>
        /// <param name="processingDate">the date the shipment is processed..</param>
        /// <param name="returnTrackingNumber">The shipment return tracking number provided by the shipping provider..</param>
        /// <param name="rewards">The collection of rewards to apply on this shipment. The collection is usually filled during the workflow execution..</param>
        /// <param name="status">The shipment status, according to the Shipping Status lookup..</param>
        /// <param name="taxes">The collection of taxes to apply on this shipment line items. The collection is usually filled during the workflow execution..</param>
        /// <param name="taxProviderId">The id of the tax provider that will be used to calculate taxes on this shipment line items. The provider is usually used during the workflow execution, in the CalculateTaxes activity..</param>
        /// <param name="taxTotal">the total of all taxes to apply on the shipment. The sum of all applicable taxes, usually calculated during the workflow execution..</param>
        /// <param name="total">The total amount for the shipment, including discounts..</param>
        /// <param name="trackingNumber">The shipment tracking number provided by the shipping provider..</param>
        public Shipment(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), double additionalFeeAmount = default(double), List<ShipmentAdditionalFee> additionalFees = default(List<ShipmentAdditionalFee>), Address address = default(Address), double adjustmentAmount = default(double), string adjustmentNote = default(string), double amount = default(double), DateTime created = default(DateTime), string createdBy = default(string), double discountAmount = default(double), DateTime expectedDeliveryDate = default(DateTime), DateTime fulfillmentLastAssignedDate = default(DateTime), string fulfillmentLocationId = default(string), FulfillmentLocationTypeEnum? fulfillmentLocationType = default(FulfillmentLocationTypeEnum?), FulfillmentMethod fulfillmentMethod = default(FulfillmentMethod), DateTime fulfillmentScheduledTimeBeginDate = default(DateTime), DateTime fulfillmentScheduledTimeEndDate = default(DateTime), FulfillmentScheduleModeEnum? fulfillmentScheduleMode = default(FulfillmentScheduleModeEnum?), DateTime fulfillmentScheduleReservationDate = default(DateTime), string fulfillmentScheduleReservationNumber = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), List<LineItem> lineItems = default(List<LineItem>), string pickUpLocationId = default(string), DateTime processingDate = default(DateTime), string returnTrackingNumber = default(string), List<Reward> rewards = default(List<Reward>), string status = default(string), List<Tax> taxes = default(List<Tax>), string taxProviderId = default(string), double taxTotal = default(double), double total = default(double), string trackingNumber = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Shipment and cannot be null");
            this.PropertyBag = propertyBag;
            this.AdditionalFeeAmount = additionalFeeAmount;
            this.AdditionalFees = additionalFees;
            this.Address = address;
            this.AdjustmentAmount = adjustmentAmount;
            this.AdjustmentNote = adjustmentNote;
            this.Amount = amount;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.DiscountAmount = discountAmount;
            this.ExpectedDeliveryDate = expectedDeliveryDate;
            this.FulfillmentLastAssignedDate = fulfillmentLastAssignedDate;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.FulfillmentLocationType = fulfillmentLocationType;
            this.FulfillmentMethod = fulfillmentMethod;
            this.FulfillmentScheduledTimeBeginDate = fulfillmentScheduledTimeBeginDate;
            this.FulfillmentScheduledTimeEndDate = fulfillmentScheduledTimeEndDate;
            this.FulfillmentScheduleMode = fulfillmentScheduleMode;
            this.FulfillmentScheduleReservationDate = fulfillmentScheduleReservationDate;
            this.FulfillmentScheduleReservationNumber = fulfillmentScheduleReservationNumber;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.LineItems = lineItems;
            this.PickUpLocationId = pickUpLocationId;
            this.ProcessingDate = processingDate;
            this.ReturnTrackingNumber = returnTrackingNumber;
            this.Rewards = rewards;
            this.Status = status;
            this.Taxes = taxes;
            this.TaxProviderId = taxProviderId;
            this.TaxTotal = taxTotal;
            this.Total = total;
            this.TrackingNumber = trackingNumber;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The amount for all shipment additional fees applied to this shipment. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>The amount for all shipment additional fees applied to this shipment. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "additionalFeeAmount", EmitDefaultValue = false)]
        public double AdditionalFeeAmount { get; set; }

        /// <summary>
        /// The collection of additional fees to apply on this line item.
        /// </summary>
        /// <value>The collection of additional fees to apply on this line item.</value>
        [DataMember(Name = "additionalFees", EmitDefaultValue = false)]
        public List<ShipmentAdditionalFee> AdditionalFees { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// The shipment adjustment amount.
        /// </summary>
        /// <value>The shipment adjustment amount.</value>
        [DataMember(Name = "adjustmentAmount", EmitDefaultValue = false)]
        public double AdjustmentAmount { get; set; }

        /// <summary>
        /// The shipment adjustment note.
        /// </summary>
        /// <value>The shipment adjustment note.</value>
        [DataMember(Name = "adjustmentNote", EmitDefaultValue = false)]
        public string AdjustmentNote { get; set; }

        /// <summary>
        /// The amount to pay for the shipment. The amount is usually set using the shipping method during the workflow execution.
        /// </summary>
        /// <value>The amount to pay for the shipment. The amount is usually set using the shipping method during the workflow execution.</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// the date when the order as created.
        /// </summary>
        /// <value>the date when the order as created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the user id of the user that created the shipment.
        /// </summary>
        /// <value>the user id of the user that created the shipment.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The discount amount to apply on the shipment. The sum of all applicable discounts, usually calculated during the workflow execution.
        /// </summary>
        /// <value>The discount amount to apply on the shipment. The sum of all applicable discounts, usually calculated during the workflow execution.</value>
        [DataMember(Name = "discountAmount", EmitDefaultValue = false)]
        public double DiscountAmount { get; set; }

        /// <summary>
        /// The expected delivery date.
        /// </summary>
        /// <value>The expected delivery date.</value>
        [DataMember(Name = "expectedDeliveryDate", EmitDefaultValue = false)]
        public DateTime ExpectedDeliveryDate { get; set; }

        /// <summary>
        /// The last assigned date for the fulfillment.
        /// </summary>
        /// <value>The last assigned date for the fulfillment.</value>
        [DataMember(Name = "fulfillmentLastAssignedDate", EmitDefaultValue = false)]
        public DateTime FulfillmentLastAssignedDate { get; set; }

        /// <summary>
        /// The fulfillment location id.
        /// </summary>
        /// <value>The fulfillment location id.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// Gets or Sets FulfillmentMethod
        /// </summary>
        [DataMember(Name = "fulfillmentMethod", EmitDefaultValue = false)]
        public FulfillmentMethod FulfillmentMethod { get; set; }

        /// <summary>
        /// The begin date and time scheduled for the fulfillment.
        /// </summary>
        /// <value>The begin date and time scheduled for the fulfillment.</value>
        [DataMember(Name = "fulfillmentScheduledTimeBeginDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeBeginDate { get; set; }

        /// <summary>
        /// The end date and time scheduled for the fulfillment.
        /// </summary>
        /// <value>The end date and time scheduled for the fulfillment.</value>
        [DataMember(Name = "fulfillmentScheduledTimeEndDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeEndDate { get; set; }

        /// <summary>
        /// the date the fulfillment reservation was done.
        /// </summary>
        /// <value>the date the fulfillment reservation was done.</value>
        [DataMember(Name = "fulfillmentScheduleReservationDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduleReservationDate { get; set; }

        /// <summary>
        /// the reservation number for the scheduled fulfillment date and time.
        /// </summary>
        /// <value>the reservation number for the scheduled fulfillment date and time.</value>
        [DataMember(Name = "fulfillmentScheduleReservationNumber", EmitDefaultValue = false)]
        public string FulfillmentScheduleReservationNumber { get; set; }

        /// <summary>
        /// the date when the shipment was last modified.
        /// </summary>
        /// <value>the date when the shipment was last modified.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// the user id of the user that last modified the shipment.
        /// </summary>
        /// <value>the user id of the user that last modified the shipment.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The collection of items included in the order. A line item represents a product and its quantity that the customer places in the cart.
        /// </summary>
        /// <value>The collection of items included in the order. A line item represents a product and its quantity that the customer places in the cart.</value>
        [DataMember(Name = "lineItems", EmitDefaultValue = false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.
        /// </summary>
        /// <value>The pick-up location identifier required when the selected shipping method type is ship to store; any value will be ignored otherwise.</value>
        [DataMember(Name = "pickUpLocationId", EmitDefaultValue = false)]
        public string PickUpLocationId { get; set; }

        /// <summary>
        /// the date the shipment is processed.
        /// </summary>
        /// <value>the date the shipment is processed.</value>
        [DataMember(Name = "processingDate", EmitDefaultValue = false)]
        public DateTime ProcessingDate { get; set; }

        /// <summary>
        /// The shipment return tracking number provided by the shipping provider.
        /// </summary>
        /// <value>The shipment return tracking number provided by the shipping provider.</value>
        [DataMember(Name = "returnTrackingNumber", EmitDefaultValue = false)]
        public string ReturnTrackingNumber { get; set; }

        /// <summary>
        /// The collection of rewards to apply on this shipment. The collection is usually filled during the workflow execution.
        /// </summary>
        /// <value>The collection of rewards to apply on this shipment. The collection is usually filled during the workflow execution.</value>
        [DataMember(Name = "rewards", EmitDefaultValue = false)]
        public List<Reward> Rewards { get; set; }

        /// <summary>
        /// The shipment status, according to the Shipping Status lookup.
        /// </summary>
        /// <value>The shipment status, according to the Shipping Status lookup.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The collection of taxes to apply on this shipment line items. The collection is usually filled during the workflow execution.
        /// </summary>
        /// <value>The collection of taxes to apply on this shipment line items. The collection is usually filled during the workflow execution.</value>
        [DataMember(Name = "taxes", EmitDefaultValue = false)]
        public List<Tax> Taxes { get; set; }

        /// <summary>
        /// The id of the tax provider that will be used to calculate taxes on this shipment line items. The provider is usually used during the workflow execution, in the CalculateTaxes activity.
        /// </summary>
        /// <value>The id of the tax provider that will be used to calculate taxes on this shipment line items. The provider is usually used during the workflow execution, in the CalculateTaxes activity.</value>
        [DataMember(Name = "taxProviderId", EmitDefaultValue = false)]
        public string TaxProviderId { get; set; }

        /// <summary>
        /// the total of all taxes to apply on the shipment. The sum of all applicable taxes, usually calculated during the workflow execution.
        /// </summary>
        /// <value>the total of all taxes to apply on the shipment. The sum of all applicable taxes, usually calculated during the workflow execution.</value>
        [DataMember(Name = "taxTotal", EmitDefaultValue = false)]
        public double TaxTotal { get; set; }

        /// <summary>
        /// The total amount for the shipment, including discounts.
        /// </summary>
        /// <value>The total amount for the shipment, including discounts.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// The shipment tracking number provided by the shipping provider.
        /// </summary>
        /// <value>The shipment tracking number provided by the shipping provider.</value>
        [DataMember(Name = "trackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  AdditionalFeeAmount: ").Append(AdditionalFeeAmount).Append("\n");
            sb.Append("  AdditionalFees: ").Append(AdditionalFees).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AdjustmentAmount: ").Append(AdjustmentAmount).Append("\n");
            sb.Append("  AdjustmentNote: ").Append(AdjustmentNote).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  ExpectedDeliveryDate: ").Append(ExpectedDeliveryDate).Append("\n");
            sb.Append("  FulfillmentLastAssignedDate: ").Append(FulfillmentLastAssignedDate).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentLocationType: ").Append(FulfillmentLocationType).Append("\n");
            sb.Append("  FulfillmentMethod: ").Append(FulfillmentMethod).Append("\n");
            sb.Append("  FulfillmentScheduledTimeBeginDate: ").Append(FulfillmentScheduledTimeBeginDate).Append("\n");
            sb.Append("  FulfillmentScheduledTimeEndDate: ").Append(FulfillmentScheduledTimeEndDate).Append("\n");
            sb.Append("  FulfillmentScheduleMode: ").Append(FulfillmentScheduleMode).Append("\n");
            sb.Append("  FulfillmentScheduleReservationDate: ").Append(FulfillmentScheduleReservationDate).Append("\n");
            sb.Append("  FulfillmentScheduleReservationNumber: ").Append(FulfillmentScheduleReservationNumber).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  PickUpLocationId: ").Append(PickUpLocationId).Append("\n");
            sb.Append("  ProcessingDate: ").Append(ProcessingDate).Append("\n");
            sb.Append("  ReturnTrackingNumber: ").Append(ReturnTrackingNumber).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  TaxProviderId: ").Append(TaxProviderId).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Shipment);
        }

        /// <summary>
        /// Returns true if Shipment instances are equal
        /// </summary>
        /// <param name="input">Instance of Shipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.AdditionalFeeAmount == input.AdditionalFeeAmount ||
                    this.AdditionalFeeAmount.Equals(input.AdditionalFeeAmount)
                ) && 
                (
                    this.AdditionalFees == input.AdditionalFees ||
                    this.AdditionalFees != null &&
                    input.AdditionalFees != null &&
                    this.AdditionalFees.SequenceEqual(input.AdditionalFees)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AdjustmentAmount == input.AdjustmentAmount ||
                    this.AdjustmentAmount.Equals(input.AdjustmentAmount)
                ) && 
                (
                    this.AdjustmentNote == input.AdjustmentNote ||
                    (this.AdjustmentNote != null &&
                    this.AdjustmentNote.Equals(input.AdjustmentNote))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    this.DiscountAmount.Equals(input.DiscountAmount)
                ) && 
                (
                    this.ExpectedDeliveryDate == input.ExpectedDeliveryDate ||
                    (this.ExpectedDeliveryDate != null &&
                    this.ExpectedDeliveryDate.Equals(input.ExpectedDeliveryDate))
                ) && 
                (
                    this.FulfillmentLastAssignedDate == input.FulfillmentLastAssignedDate ||
                    (this.FulfillmentLastAssignedDate != null &&
                    this.FulfillmentLastAssignedDate.Equals(input.FulfillmentLastAssignedDate))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentLocationType == input.FulfillmentLocationType ||
                    this.FulfillmentLocationType.Equals(input.FulfillmentLocationType)
                ) && 
                (
                    this.FulfillmentMethod == input.FulfillmentMethod ||
                    (this.FulfillmentMethod != null &&
                    this.FulfillmentMethod.Equals(input.FulfillmentMethod))
                ) && 
                (
                    this.FulfillmentScheduledTimeBeginDate == input.FulfillmentScheduledTimeBeginDate ||
                    (this.FulfillmentScheduledTimeBeginDate != null &&
                    this.FulfillmentScheduledTimeBeginDate.Equals(input.FulfillmentScheduledTimeBeginDate))
                ) && 
                (
                    this.FulfillmentScheduledTimeEndDate == input.FulfillmentScheduledTimeEndDate ||
                    (this.FulfillmentScheduledTimeEndDate != null &&
                    this.FulfillmentScheduledTimeEndDate.Equals(input.FulfillmentScheduledTimeEndDate))
                ) && 
                (
                    this.FulfillmentScheduleMode == input.FulfillmentScheduleMode ||
                    this.FulfillmentScheduleMode.Equals(input.FulfillmentScheduleMode)
                ) && 
                (
                    this.FulfillmentScheduleReservationDate == input.FulfillmentScheduleReservationDate ||
                    (this.FulfillmentScheduleReservationDate != null &&
                    this.FulfillmentScheduleReservationDate.Equals(input.FulfillmentScheduleReservationDate))
                ) && 
                (
                    this.FulfillmentScheduleReservationNumber == input.FulfillmentScheduleReservationNumber ||
                    (this.FulfillmentScheduleReservationNumber != null &&
                    this.FulfillmentScheduleReservationNumber.Equals(input.FulfillmentScheduleReservationNumber))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.PickUpLocationId == input.PickUpLocationId ||
                    (this.PickUpLocationId != null &&
                    this.PickUpLocationId.Equals(input.PickUpLocationId))
                ) && 
                (
                    this.ProcessingDate == input.ProcessingDate ||
                    (this.ProcessingDate != null &&
                    this.ProcessingDate.Equals(input.ProcessingDate))
                ) && 
                (
                    this.ReturnTrackingNumber == input.ReturnTrackingNumber ||
                    (this.ReturnTrackingNumber != null &&
                    this.ReturnTrackingNumber.Equals(input.ReturnTrackingNumber))
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    this.Rewards != null &&
                    input.Rewards != null &&
                    this.Rewards.SequenceEqual(input.Rewards)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    this.Taxes != null &&
                    input.Taxes != null &&
                    this.Taxes.SequenceEqual(input.Taxes)
                ) && 
                (
                    this.TaxProviderId == input.TaxProviderId ||
                    (this.TaxProviderId != null &&
                    this.TaxProviderId.Equals(input.TaxProviderId))
                ) && 
                (
                    this.TaxTotal == input.TaxTotal ||
                    this.TaxTotal.Equals(input.TaxTotal)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.AdditionalFeeAmount.GetHashCode();
                if (this.AdditionalFees != null)
                    hashCode = hashCode * 59 + this.AdditionalFees.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                hashCode = hashCode * 59 + this.AdjustmentAmount.GetHashCode();
                if (this.AdjustmentNote != null)
                    hashCode = hashCode * 59 + this.AdjustmentNote.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.ExpectedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.ExpectedDeliveryDate.GetHashCode();
                if (this.FulfillmentLastAssignedDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentLastAssignedDate.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentLocationType.GetHashCode();
                if (this.FulfillmentMethod != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethod.GetHashCode();
                if (this.FulfillmentScheduledTimeBeginDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeBeginDate.GetHashCode();
                if (this.FulfillmentScheduledTimeEndDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeEndDate.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentScheduleMode.GetHashCode();
                if (this.FulfillmentScheduleReservationDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduleReservationDate.GetHashCode();
                if (this.FulfillmentScheduleReservationNumber != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduleReservationNumber.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.PickUpLocationId != null)
                    hashCode = hashCode * 59 + this.PickUpLocationId.GetHashCode();
                if (this.ProcessingDate != null)
                    hashCode = hashCode * 59 + this.ProcessingDate.GetHashCode();
                if (this.ReturnTrackingNumber != null)
                    hashCode = hashCode * 59 + this.ReturnTrackingNumber.GetHashCode();
                if (this.Rewards != null)
                    hashCode = hashCode * 59 + this.Rewards.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.TaxProviderId != null)
                    hashCode = hashCode * 59 + this.TaxProviderId.GetHashCode();
                hashCode = hashCode * 59 + this.TaxTotal.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
