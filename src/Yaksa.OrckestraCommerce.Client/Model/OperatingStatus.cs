/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// OperatingStatus
    /// </summary>
    [DataContract(Name = "OperatingStatus")]
    public partial class OperatingStatus : IEquatable<OperatingStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperatingStatus" /> class.
        /// </summary>
        /// <param name="availabilityStatus">availabilityStatus.</param>
        /// <param name="deliveryAvailabilityStatus">deliveryAvailabilityStatus.</param>
        /// <param name="deliveryQuoteTime">deliveryQuoteTime.</param>
        /// <param name="id">The unique identifier for the Store/Warehouse to which this entity is associated..</param>
        /// <param name="pickupAvailabilityStatus">pickupAvailabilityStatus.</param>
        /// <param name="pickupQuoteTime">pickupQuoteTime.</param>
        /// <param name="propertyBag">propertyBag.</param>
        public OperatingStatus(AvailabilityStatus availabilityStatus = default(AvailabilityStatus), AvailabilityStatus deliveryAvailabilityStatus = default(AvailabilityStatus), QuoteTime deliveryQuoteTime = default(QuoteTime), string id = default(string), AvailabilityStatus pickupAvailabilityStatus = default(AvailabilityStatus), QuoteTime pickupQuoteTime = default(QuoteTime), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>))
        {
            this.AvailabilityStatus = availabilityStatus;
            this.DeliveryAvailabilityStatus = deliveryAvailabilityStatus;
            this.DeliveryQuoteTime = deliveryQuoteTime;
            this.Id = id;
            this.PickupAvailabilityStatus = pickupAvailabilityStatus;
            this.PickupQuoteTime = pickupQuoteTime;
            this.PropertyBag = propertyBag;
        }

        /// <summary>
        /// Gets or Sets AvailabilityStatus
        /// </summary>
        [DataMember(Name = "availabilityStatus", EmitDefaultValue = false)]
        public AvailabilityStatus AvailabilityStatus { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryAvailabilityStatus
        /// </summary>
        [DataMember(Name = "deliveryAvailabilityStatus", EmitDefaultValue = false)]
        public AvailabilityStatus DeliveryAvailabilityStatus { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryQuoteTime
        /// </summary>
        [DataMember(Name = "deliveryQuoteTime", EmitDefaultValue = false)]
        public QuoteTime DeliveryQuoteTime { get; set; }

        /// <summary>
        /// The unique identifier for the Store/Warehouse to which this entity is associated.
        /// </summary>
        /// <value>The unique identifier for the Store/Warehouse to which this entity is associated.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PickupAvailabilityStatus
        /// </summary>
        [DataMember(Name = "pickupAvailabilityStatus", EmitDefaultValue = false)]
        public AvailabilityStatus PickupAvailabilityStatus { get; set; }

        /// <summary>
        /// Gets or Sets PickupQuoteTime
        /// </summary>
        [DataMember(Name = "pickupQuoteTime", EmitDefaultValue = false)]
        public QuoteTime PickupQuoteTime { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperatingStatus {\n");
            sb.Append("  AvailabilityStatus: ").Append(AvailabilityStatus).Append("\n");
            sb.Append("  DeliveryAvailabilityStatus: ").Append(DeliveryAvailabilityStatus).Append("\n");
            sb.Append("  DeliveryQuoteTime: ").Append(DeliveryQuoteTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PickupAvailabilityStatus: ").Append(PickupAvailabilityStatus).Append("\n");
            sb.Append("  PickupQuoteTime: ").Append(PickupQuoteTime).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OperatingStatus);
        }

        /// <summary>
        /// Returns true if OperatingStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of OperatingStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperatingStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AvailabilityStatus == input.AvailabilityStatus ||
                    (this.AvailabilityStatus != null &&
                    this.AvailabilityStatus.Equals(input.AvailabilityStatus))
                ) && 
                (
                    this.DeliveryAvailabilityStatus == input.DeliveryAvailabilityStatus ||
                    (this.DeliveryAvailabilityStatus != null &&
                    this.DeliveryAvailabilityStatus.Equals(input.DeliveryAvailabilityStatus))
                ) && 
                (
                    this.DeliveryQuoteTime == input.DeliveryQuoteTime ||
                    (this.DeliveryQuoteTime != null &&
                    this.DeliveryQuoteTime.Equals(input.DeliveryQuoteTime))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PickupAvailabilityStatus == input.PickupAvailabilityStatus ||
                    (this.PickupAvailabilityStatus != null &&
                    this.PickupAvailabilityStatus.Equals(input.PickupAvailabilityStatus))
                ) && 
                (
                    this.PickupQuoteTime == input.PickupQuoteTime ||
                    (this.PickupQuoteTime != null &&
                    this.PickupQuoteTime.Equals(input.PickupQuoteTime))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AvailabilityStatus != null)
                    hashCode = hashCode * 59 + this.AvailabilityStatus.GetHashCode();
                if (this.DeliveryAvailabilityStatus != null)
                    hashCode = hashCode * 59 + this.DeliveryAvailabilityStatus.GetHashCode();
                if (this.DeliveryQuoteTime != null)
                    hashCode = hashCode * 59 + this.DeliveryQuoteTime.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PickupAvailabilityStatus != null)
                    hashCode = hashCode * 59 + this.PickupAvailabilityStatus.GetHashCode();
                if (this.PickupQuoteTime != null)
                    hashCode = hashCode * 59 + this.PickupQuoteTime.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
