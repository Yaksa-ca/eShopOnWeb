/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// AddVariantModification
    /// </summary>
    [DataContract(Name = "AddVariantModification")]
    public partial class AddVariantModification : IEquatable<AddVariantModification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddVariantModification" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="sku">sku.</param>
        /// <param name="taxCategory">taxCategory.</param>
        /// <param name="variantId">variantId.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="scheduledActivation">scheduledActivation.</param>
        /// <param name="scheduledDeactivation">scheduledDeactivation.</param>
        public AddVariantModification(bool active = default(bool), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string sku = default(string), string taxCategory = default(string), string variantId = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), DateTime scheduledActivation = default(DateTime), DateTime scheduledDeactivation = default(DateTime))
        {
            this.Active = active;
            this.PropertyBag = propertyBag;
            this.Sku = sku;
            this.TaxCategory = taxCategory;
            this.VariantId = variantId;
            this.DisplayName = displayName;
            this.ScheduledActivation = scheduledActivation;
            this.ScheduledDeactivation = scheduledDeactivation;
        }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategory
        /// </summary>
        [DataMember(Name = "taxCategory", EmitDefaultValue = false)]
        public string TaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets VariantId
        /// </summary>
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledActivation
        /// </summary>
        [DataMember(Name = "scheduledActivation", EmitDefaultValue = false)]
        public DateTime ScheduledActivation { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledDeactivation
        /// </summary>
        [DataMember(Name = "scheduledDeactivation", EmitDefaultValue = false)]
        public DateTime ScheduledDeactivation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddVariantModification {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ScheduledActivation: ").Append(ScheduledActivation).Append("\n");
            sb.Append("  ScheduledDeactivation: ").Append(ScheduledDeactivation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddVariantModification);
        }

        /// <summary>
        /// Returns true if AddVariantModification instances are equal
        /// </summary>
        /// <param name="input">Instance of AddVariantModification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddVariantModification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.ScheduledActivation == input.ScheduledActivation ||
                    (this.ScheduledActivation != null &&
                    this.ScheduledActivation.Equals(input.ScheduledActivation))
                ) && 
                (
                    this.ScheduledDeactivation == input.ScheduledDeactivation ||
                    (this.ScheduledDeactivation != null &&
                    this.ScheduledDeactivation.Equals(input.ScheduledDeactivation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ScheduledActivation != null)
                    hashCode = hashCode * 59 + this.ScheduledActivation.GetHashCode();
                if (this.ScheduledDeactivation != null)
                    hashCode = hashCode * 59 + this.ScheduledDeactivation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
