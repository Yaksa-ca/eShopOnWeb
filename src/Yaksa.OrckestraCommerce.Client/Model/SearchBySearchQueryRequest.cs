/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// The API used to query the search engine.
    /// </summary>
    [DataContract(Name = "SearchBySearchQueryRequest")]
    public partial class SearchBySearchQueryRequest : IEquatable<SearchBySearchQueryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchBySearchQueryRequest" /> class.
        /// </summary>
        /// <param name="configurationName">The name of the configuration to use to process this request.</param>
        /// <param name="query">query.</param>
        /// <param name="autoCorrect">Whether search term should be automatically corrected.</param>
        /// <param name="facetPredicates">List of FacetPredicates to apply on the search.</param>
        /// <param name="facets">The facets, a list of strings, that will be included in the results.</param>
        /// <param name="includeFacets">Whether facets are returned as part of the search results.</param>
        /// <param name="properties">the collection of properties, represented as string, to return in the search results..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="searchTerms">The search terms for this search query.</param>
        public SearchBySearchQueryRequest(string configurationName = default(string), Query query = default(Query), bool autoCorrect = default(bool), List<FacetPredicate> facetPredicates = default(List<FacetPredicate>), List<string> facets = default(List<string>), bool includeFacets = default(bool), List<string> properties = default(List<string>), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string searchTerms = default(string))
        {
            this.ConfigurationName = configurationName;
            this.Query = query;
            this.AutoCorrect = autoCorrect;
            this.FacetPredicates = facetPredicates;
            this.Facets = facets;
            this.IncludeFacets = includeFacets;
            this.Properties = properties;
            this.PropertyBag = propertyBag;
            this.SearchTerms = searchTerms;
        }

        /// <summary>
        /// The name of the configuration to use to process this request
        /// </summary>
        /// <value>The name of the configuration to use to process this request</value>
        [DataMember(Name = "configurationName", EmitDefaultValue = false)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public Query Query { get; set; }

        /// <summary>
        /// Whether search term should be automatically corrected
        /// </summary>
        /// <value>Whether search term should be automatically corrected</value>
        [DataMember(Name = "autoCorrect", EmitDefaultValue = true)]
        public bool AutoCorrect { get; set; }

        /// <summary>
        /// List of FacetPredicates to apply on the search
        /// </summary>
        /// <value>List of FacetPredicates to apply on the search</value>
        [DataMember(Name = "facetPredicates", EmitDefaultValue = false)]
        public List<FacetPredicate> FacetPredicates { get; set; }

        /// <summary>
        /// The facets, a list of strings, that will be included in the results
        /// </summary>
        /// <value>The facets, a list of strings, that will be included in the results</value>
        [DataMember(Name = "facets", EmitDefaultValue = false)]
        public List<string> Facets { get; set; }

        /// <summary>
        /// Whether facets are returned as part of the search results
        /// </summary>
        /// <value>Whether facets are returned as part of the search results</value>
        [DataMember(Name = "includeFacets", EmitDefaultValue = true)]
        public bool IncludeFacets { get; set; }

        /// <summary>
        /// the collection of properties, represented as string, to return in the search results.
        /// </summary>
        /// <value>the collection of properties, represented as string, to return in the search results.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The search terms for this search query
        /// </summary>
        /// <value>The search terms for this search query</value>
        [DataMember(Name = "searchTerms", EmitDefaultValue = false)]
        public string SearchTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchBySearchQueryRequest {\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  AutoCorrect: ").Append(AutoCorrect).Append("\n");
            sb.Append("  FacetPredicates: ").Append(FacetPredicates).Append("\n");
            sb.Append("  Facets: ").Append(Facets).Append("\n");
            sb.Append("  IncludeFacets: ").Append(IncludeFacets).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchBySearchQueryRequest);
        }

        /// <summary>
        /// Returns true if SearchBySearchQueryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchBySearchQueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchBySearchQueryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.AutoCorrect == input.AutoCorrect ||
                    this.AutoCorrect.Equals(input.AutoCorrect)
                ) && 
                (
                    this.FacetPredicates == input.FacetPredicates ||
                    this.FacetPredicates != null &&
                    input.FacetPredicates != null &&
                    this.FacetPredicates.SequenceEqual(input.FacetPredicates)
                ) && 
                (
                    this.Facets == input.Facets ||
                    this.Facets != null &&
                    input.Facets != null &&
                    this.Facets.SequenceEqual(input.Facets)
                ) && 
                (
                    this.IncludeFacets == input.IncludeFacets ||
                    this.IncludeFacets.Equals(input.IncludeFacets)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.SearchTerms == input.SearchTerms ||
                    (this.SearchTerms != null &&
                    this.SearchTerms.Equals(input.SearchTerms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigurationName != null)
                    hashCode = hashCode * 59 + this.ConfigurationName.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                hashCode = hashCode * 59 + this.AutoCorrect.GetHashCode();
                if (this.FacetPredicates != null)
                    hashCode = hashCode * 59 + this.FacetPredicates.GetHashCode();
                if (this.Facets != null)
                    hashCode = hashCode * 59 + this.Facets.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeFacets.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.SearchTerms != null)
                    hashCode = hashCode * 59 + this.SearchTerms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
