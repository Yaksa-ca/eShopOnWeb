/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// HttpResult
    /// </summary>
    [DataContract(Name = "HttpResult")]
    public partial class HttpResult : IEquatable<HttpResult>, IValidatableObject
    {
        /// <summary>
        /// Defines StatusCode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusCodeEnum
        {
            /// <summary>
            /// Enum Continue for value: Continue
            /// </summary>
            [EnumMember(Value = "Continue")]
            Continue = 1,

            /// <summary>
            /// Enum SwitchingProtocols for value: SwitchingProtocols
            /// </summary>
            [EnumMember(Value = "SwitchingProtocols")]
            SwitchingProtocols = 2,

            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 3,

            /// <summary>
            /// Enum Created for value: Created
            /// </summary>
            [EnumMember(Value = "Created")]
            Created = 4,

            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 5,

            /// <summary>
            /// Enum NonAuthoritativeInformation for value: NonAuthoritativeInformation
            /// </summary>
            [EnumMember(Value = "NonAuthoritativeInformation")]
            NonAuthoritativeInformation = 6,

            /// <summary>
            /// Enum NoContent for value: NoContent
            /// </summary>
            [EnumMember(Value = "NoContent")]
            NoContent = 7,

            /// <summary>
            /// Enum ResetContent for value: ResetContent
            /// </summary>
            [EnumMember(Value = "ResetContent")]
            ResetContent = 8,

            /// <summary>
            /// Enum PartialContent for value: PartialContent
            /// </summary>
            [EnumMember(Value = "PartialContent")]
            PartialContent = 9,

            /// <summary>
            /// Enum MultipleChoices for value: MultipleChoices
            /// </summary>
            [EnumMember(Value = "MultipleChoices")]
            MultipleChoices = 10,

            /// <summary>
            /// Enum Ambiguous for value: Ambiguous
            /// </summary>
            [EnumMember(Value = "Ambiguous")]
            Ambiguous = 11,

            /// <summary>
            /// Enum MovedPermanently for value: MovedPermanently
            /// </summary>
            [EnumMember(Value = "MovedPermanently")]
            MovedPermanently = 12,

            /// <summary>
            /// Enum Moved for value: Moved
            /// </summary>
            [EnumMember(Value = "Moved")]
            Moved = 13,

            /// <summary>
            /// Enum Found for value: Found
            /// </summary>
            [EnumMember(Value = "Found")]
            Found = 14,

            /// <summary>
            /// Enum Redirect for value: Redirect
            /// </summary>
            [EnumMember(Value = "Redirect")]
            Redirect = 15,

            /// <summary>
            /// Enum SeeOther for value: SeeOther
            /// </summary>
            [EnumMember(Value = "SeeOther")]
            SeeOther = 16,

            /// <summary>
            /// Enum RedirectMethod for value: RedirectMethod
            /// </summary>
            [EnumMember(Value = "RedirectMethod")]
            RedirectMethod = 17,

            /// <summary>
            /// Enum NotModified for value: NotModified
            /// </summary>
            [EnumMember(Value = "NotModified")]
            NotModified = 18,

            /// <summary>
            /// Enum UseProxy for value: UseProxy
            /// </summary>
            [EnumMember(Value = "UseProxy")]
            UseProxy = 19,

            /// <summary>
            /// Enum Unused for value: Unused
            /// </summary>
            [EnumMember(Value = "Unused")]
            Unused = 20,

            /// <summary>
            /// Enum TemporaryRedirect for value: TemporaryRedirect
            /// </summary>
            [EnumMember(Value = "TemporaryRedirect")]
            TemporaryRedirect = 21,

            /// <summary>
            /// Enum RedirectKeepVerb for value: RedirectKeepVerb
            /// </summary>
            [EnumMember(Value = "RedirectKeepVerb")]
            RedirectKeepVerb = 22,

            /// <summary>
            /// Enum BadRequest for value: BadRequest
            /// </summary>
            [EnumMember(Value = "BadRequest")]
            BadRequest = 23,

            /// <summary>
            /// Enum Unauthorized for value: Unauthorized
            /// </summary>
            [EnumMember(Value = "Unauthorized")]
            Unauthorized = 24,

            /// <summary>
            /// Enum PaymentRequired for value: PaymentRequired
            /// </summary>
            [EnumMember(Value = "PaymentRequired")]
            PaymentRequired = 25,

            /// <summary>
            /// Enum Forbidden for value: Forbidden
            /// </summary>
            [EnumMember(Value = "Forbidden")]
            Forbidden = 26,

            /// <summary>
            /// Enum NotFound for value: NotFound
            /// </summary>
            [EnumMember(Value = "NotFound")]
            NotFound = 27,

            /// <summary>
            /// Enum MethodNotAllowed for value: MethodNotAllowed
            /// </summary>
            [EnumMember(Value = "MethodNotAllowed")]
            MethodNotAllowed = 28,

            /// <summary>
            /// Enum NotAcceptable for value: NotAcceptable
            /// </summary>
            [EnumMember(Value = "NotAcceptable")]
            NotAcceptable = 29,

            /// <summary>
            /// Enum ProxyAuthenticationRequired for value: ProxyAuthenticationRequired
            /// </summary>
            [EnumMember(Value = "ProxyAuthenticationRequired")]
            ProxyAuthenticationRequired = 30,

            /// <summary>
            /// Enum RequestTimeout for value: RequestTimeout
            /// </summary>
            [EnumMember(Value = "RequestTimeout")]
            RequestTimeout = 31,

            /// <summary>
            /// Enum Conflict for value: Conflict
            /// </summary>
            [EnumMember(Value = "Conflict")]
            Conflict = 32,

            /// <summary>
            /// Enum Gone for value: Gone
            /// </summary>
            [EnumMember(Value = "Gone")]
            Gone = 33,

            /// <summary>
            /// Enum LengthRequired for value: LengthRequired
            /// </summary>
            [EnumMember(Value = "LengthRequired")]
            LengthRequired = 34,

            /// <summary>
            /// Enum PreconditionFailed for value: PreconditionFailed
            /// </summary>
            [EnumMember(Value = "PreconditionFailed")]
            PreconditionFailed = 35,

            /// <summary>
            /// Enum RequestEntityTooLarge for value: RequestEntityTooLarge
            /// </summary>
            [EnumMember(Value = "RequestEntityTooLarge")]
            RequestEntityTooLarge = 36,

            /// <summary>
            /// Enum RequestUriTooLong for value: RequestUriTooLong
            /// </summary>
            [EnumMember(Value = "RequestUriTooLong")]
            RequestUriTooLong = 37,

            /// <summary>
            /// Enum UnsupportedMediaType for value: UnsupportedMediaType
            /// </summary>
            [EnumMember(Value = "UnsupportedMediaType")]
            UnsupportedMediaType = 38,

            /// <summary>
            /// Enum RequestedRangeNotSatisfiable for value: RequestedRangeNotSatisfiable
            /// </summary>
            [EnumMember(Value = "RequestedRangeNotSatisfiable")]
            RequestedRangeNotSatisfiable = 39,

            /// <summary>
            /// Enum ExpectationFailed for value: ExpectationFailed
            /// </summary>
            [EnumMember(Value = "ExpectationFailed")]
            ExpectationFailed = 40,

            /// <summary>
            /// Enum UpgradeRequired for value: UpgradeRequired
            /// </summary>
            [EnumMember(Value = "UpgradeRequired")]
            UpgradeRequired = 41,

            /// <summary>
            /// Enum InternalServerError for value: InternalServerError
            /// </summary>
            [EnumMember(Value = "InternalServerError")]
            InternalServerError = 42,

            /// <summary>
            /// Enum NotImplemented for value: NotImplemented
            /// </summary>
            [EnumMember(Value = "NotImplemented")]
            NotImplemented = 43,

            /// <summary>
            /// Enum BadGateway for value: BadGateway
            /// </summary>
            [EnumMember(Value = "BadGateway")]
            BadGateway = 44,

            /// <summary>
            /// Enum ServiceUnavailable for value: ServiceUnavailable
            /// </summary>
            [EnumMember(Value = "ServiceUnavailable")]
            ServiceUnavailable = 45,

            /// <summary>
            /// Enum GatewayTimeout for value: GatewayTimeout
            /// </summary>
            [EnumMember(Value = "GatewayTimeout")]
            GatewayTimeout = 46,

            /// <summary>
            /// Enum HttpVersionNotSupported for value: HttpVersionNotSupported
            /// </summary>
            [EnumMember(Value = "HttpVersionNotSupported")]
            HttpVersionNotSupported = 47

        }


        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "statusCode", EmitDefaultValue = false)]
        public StatusCodeEnum? StatusCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HttpResult" /> class.
        /// </summary>
        /// <param name="responseText">responseText.</param>
        /// <param name="responseStream">Stream.</param>
        /// <param name="fileInfo">FileInfo.</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="headers">headers.</param>
        /// <param name="cookies">cookies.</param>
        /// <param name="eTag">eTag.</param>
        /// <param name="age">age.</param>
        /// <param name="maxAge">maxAge.</param>
        /// <param name="expires">expires.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="cacheControl">cacheControl.</param>
        /// <param name="resultScope">Func&lt;IDisposable&gt;.</param>
        /// <param name="allowsPartialResponse">allowsPartialResponse.</param>
        /// <param name="location">location.</param>
        /// <param name="options">IDictionary&lt;String,String&gt;.</param>
        /// <param name="status">status.</param>
        /// <param name="statusCode">statusCode.</param>
        /// <param name="statusDescription">statusDescription.</param>
        /// <param name="response">Object.</param>
        /// <param name="responseFilter">IContentTypeWriter.</param>
        /// <param name="requestContext">IRequest.</param>
        /// <param name="view">view.</param>
        /// <param name="template">template.</param>
        /// <param name="paddingLength">paddingLength.</param>
        /// <param name="isPartialRequest">isPartialRequest.</param>
        public HttpResult(string responseText = default(string), Object responseStream = default(Object), Object fileInfo = default(Object), string contentType = default(string), Dictionary<string, string> headers = default(Dictionary<string, string>), List<Object> cookies = default(List<Object>), string eTag = default(string), string age = default(string), string maxAge = default(string), DateTime expires = default(DateTime), DateTime lastModified = default(DateTime), long cacheControl = default(long), Object resultScope = default(Object), bool allowsPartialResponse = default(bool), string location = default(string), Dictionary<string, string> options = default(Dictionary<string, string>), int status = default(int), StatusCodeEnum? statusCode = default(StatusCodeEnum?), string statusDescription = default(string), Object response = default(Object), Object responseFilter = default(Object), Object requestContext = default(Object), string view = default(string), string template = default(string), int paddingLength = default(int), bool isPartialRequest = default(bool))
        {
            this.ResponseText = responseText;
            this.ResponseStream = responseStream;
            this.FileInfo = fileInfo;
            this.ContentType = contentType;
            this.Headers = headers;
            this.Cookies = cookies;
            this.ETag = eTag;
            this.Age = age;
            this.MaxAge = maxAge;
            this.Expires = expires;
            this.LastModified = lastModified;
            this.CacheControl = cacheControl;
            this.ResultScope = resultScope;
            this.AllowsPartialResponse = allowsPartialResponse;
            this.Location = location;
            this.Options = options;
            this.Status = status;
            this.StatusCode = statusCode;
            this.StatusDescription = statusDescription;
            this.Response = response;
            this.ResponseFilter = responseFilter;
            this.RequestContext = requestContext;
            this.View = view;
            this.Template = template;
            this.PaddingLength = paddingLength;
            this.IsPartialRequest = isPartialRequest;
        }

        /// <summary>
        /// Gets or Sets ResponseText
        /// </summary>
        [DataMember(Name = "responseText", EmitDefaultValue = false)]
        public string ResponseText { get; set; }

        /// <summary>
        /// Stream
        /// </summary>
        /// <value>Stream</value>
        [DataMember(Name = "responseStream", EmitDefaultValue = false)]
        public Object ResponseStream { get; set; }

        /// <summary>
        /// FileInfo
        /// </summary>
        /// <value>FileInfo</value>
        [DataMember(Name = "fileInfo", EmitDefaultValue = false)]
        public Object FileInfo { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "contentType", EmitDefaultValue = false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Gets or Sets Cookies
        /// </summary>
        [DataMember(Name = "cookies", EmitDefaultValue = false)]
        public List<Object> Cookies { get; set; }

        /// <summary>
        /// Gets or Sets ETag
        /// </summary>
        [DataMember(Name = "eTag", EmitDefaultValue = false)]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name = "age", EmitDefaultValue = false)]
        public string Age { get; set; }

        /// <summary>
        /// Gets or Sets MaxAge
        /// </summary>
        [DataMember(Name = "maxAge", EmitDefaultValue = false)]
        public string MaxAge { get; set; }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public DateTime Expires { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Gets or Sets CacheControl
        /// </summary>
        [DataMember(Name = "cacheControl", EmitDefaultValue = false)]
        public long CacheControl { get; set; }

        /// <summary>
        /// Func&lt;IDisposable&gt;
        /// </summary>
        /// <value>Func&lt;IDisposable&gt;</value>
        [DataMember(Name = "resultScope", EmitDefaultValue = false)]
        public Object ResultScope { get; set; }

        /// <summary>
        /// Gets or Sets AllowsPartialResponse
        /// </summary>
        [DataMember(Name = "allowsPartialResponse", EmitDefaultValue = true)]
        public bool AllowsPartialResponse { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// IDictionary&lt;String,String&gt;
        /// </summary>
        /// <value>IDictionary&lt;String,String&gt;</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public Dictionary<string, string> Options { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public int Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "statusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Object
        /// </summary>
        /// <value>Object</value>
        [DataMember(Name = "response", EmitDefaultValue = false)]
        public Object Response { get; set; }

        /// <summary>
        /// IContentTypeWriter
        /// </summary>
        /// <value>IContentTypeWriter</value>
        [DataMember(Name = "responseFilter", EmitDefaultValue = false)]
        public Object ResponseFilter { get; set; }

        /// <summary>
        /// IRequest
        /// </summary>
        /// <value>IRequest</value>
        [DataMember(Name = "requestContext", EmitDefaultValue = false)]
        public Object RequestContext { get; set; }

        /// <summary>
        /// Gets or Sets View
        /// </summary>
        [DataMember(Name = "view", EmitDefaultValue = false)]
        public string View { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public string Template { get; set; }

        /// <summary>
        /// Gets or Sets PaddingLength
        /// </summary>
        [DataMember(Name = "paddingLength", EmitDefaultValue = false)]
        public int PaddingLength { get; set; }

        /// <summary>
        /// Gets or Sets IsPartialRequest
        /// </summary>
        [DataMember(Name = "isPartialRequest", EmitDefaultValue = true)]
        public bool IsPartialRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HttpResult {\n");
            sb.Append("  ResponseText: ").Append(ResponseText).Append("\n");
            sb.Append("  ResponseStream: ").Append(ResponseStream).Append("\n");
            sb.Append("  FileInfo: ").Append(FileInfo).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Cookies: ").Append(Cookies).Append("\n");
            sb.Append("  ETag: ").Append(ETag).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  MaxAge: ").Append(MaxAge).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  CacheControl: ").Append(CacheControl).Append("\n");
            sb.Append("  ResultScope: ").Append(ResultScope).Append("\n");
            sb.Append("  AllowsPartialResponse: ").Append(AllowsPartialResponse).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  ResponseFilter: ").Append(ResponseFilter).Append("\n");
            sb.Append("  RequestContext: ").Append(RequestContext).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  PaddingLength: ").Append(PaddingLength).Append("\n");
            sb.Append("  IsPartialRequest: ").Append(IsPartialRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HttpResult);
        }

        /// <summary>
        /// Returns true if HttpResult instances are equal
        /// </summary>
        /// <param name="input">Instance of HttpResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HttpResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseText == input.ResponseText ||
                    (this.ResponseText != null &&
                    this.ResponseText.Equals(input.ResponseText))
                ) && 
                (
                    this.ResponseStream == input.ResponseStream ||
                    (this.ResponseStream != null &&
                    this.ResponseStream.Equals(input.ResponseStream))
                ) && 
                (
                    this.FileInfo == input.FileInfo ||
                    (this.FileInfo != null &&
                    this.FileInfo.Equals(input.FileInfo))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.Cookies == input.Cookies ||
                    this.Cookies != null &&
                    input.Cookies != null &&
                    this.Cookies.SequenceEqual(input.Cookies)
                ) && 
                (
                    this.ETag == input.ETag ||
                    (this.ETag != null &&
                    this.ETag.Equals(input.ETag))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.MaxAge == input.MaxAge ||
                    (this.MaxAge != null &&
                    this.MaxAge.Equals(input.MaxAge))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.CacheControl == input.CacheControl ||
                    this.CacheControl.Equals(input.CacheControl)
                ) && 
                (
                    this.ResultScope == input.ResultScope ||
                    (this.ResultScope != null &&
                    this.ResultScope.Equals(input.ResultScope))
                ) && 
                (
                    this.AllowsPartialResponse == input.AllowsPartialResponse ||
                    this.AllowsPartialResponse.Equals(input.AllowsPartialResponse)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.ResponseFilter == input.ResponseFilter ||
                    (this.ResponseFilter != null &&
                    this.ResponseFilter.Equals(input.ResponseFilter))
                ) && 
                (
                    this.RequestContext == input.RequestContext ||
                    (this.RequestContext != null &&
                    this.RequestContext.Equals(input.RequestContext))
                ) && 
                (
                    this.View == input.View ||
                    (this.View != null &&
                    this.View.Equals(input.View))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.PaddingLength == input.PaddingLength ||
                    this.PaddingLength.Equals(input.PaddingLength)
                ) && 
                (
                    this.IsPartialRequest == input.IsPartialRequest ||
                    this.IsPartialRequest.Equals(input.IsPartialRequest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseText != null)
                    hashCode = hashCode * 59 + this.ResponseText.GetHashCode();
                if (this.ResponseStream != null)
                    hashCode = hashCode * 59 + this.ResponseStream.GetHashCode();
                if (this.FileInfo != null)
                    hashCode = hashCode * 59 + this.FileInfo.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.Cookies != null)
                    hashCode = hashCode * 59 + this.Cookies.GetHashCode();
                if (this.ETag != null)
                    hashCode = hashCode * 59 + this.ETag.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.MaxAge != null)
                    hashCode = hashCode * 59 + this.MaxAge.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                hashCode = hashCode * 59 + this.CacheControl.GetHashCode();
                if (this.ResultScope != null)
                    hashCode = hashCode * 59 + this.ResultScope.GetHashCode();
                hashCode = hashCode * 59 + this.AllowsPartialResponse.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.StatusDescription != null)
                    hashCode = hashCode * 59 + this.StatusDescription.GetHashCode();
                if (this.Response != null)
                    hashCode = hashCode * 59 + this.Response.GetHashCode();
                if (this.ResponseFilter != null)
                    hashCode = hashCode * 59 + this.ResponseFilter.GetHashCode();
                if (this.RequestContext != null)
                    hashCode = hashCode * 59 + this.RequestContext.GetHashCode();
                if (this.View != null)
                    hashCode = hashCode * 59 + this.View.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                hashCode = hashCode * 59 + this.PaddingLength.GetHashCode();
                hashCode = hashCode * 59 + this.IsPartialRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
