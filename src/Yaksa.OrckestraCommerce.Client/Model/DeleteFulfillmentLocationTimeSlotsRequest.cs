/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Fulfillment locations are entities which handles fulfillment for a shipment.
    /// </summary>
    [DataContract(Name = "DeleteFulfillmentLocationTimeSlotsRequest")]
    public partial class DeleteFulfillmentLocationTimeSlotsRequest : IEquatable<DeleteFulfillmentLocationTimeSlotsRequest>, IValidatableObject
    {
        /// <summary>
        /// the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].
        /// </summary>
        /// <value>the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentMethodTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum PickUp for value: PickUp
            /// </summary>
            [EnumMember(Value = "PickUp")]
            PickUp = 2,

            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 3,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 4,

            /// <summary>
            /// Enum ShipToStore for value: ShipToStore
            /// </summary>
            [EnumMember(Value = "ShipToStore")]
            ShipToStore = 5

        }


        /// <summary>
        /// the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].
        /// </summary>
        /// <value>the type of the fulfillment, valid options are [Pickup, Delivery and Shipping].</value>
        [DataMember(Name = "fulfillmentMethodType", IsRequired = true, EmitDefaultValue = false)]
        public FulfillmentMethodTypeEnum FulfillmentMethodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteFulfillmentLocationTimeSlotsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeleteFulfillmentLocationTimeSlotsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteFulfillmentLocationTimeSlotsRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="fulfillmentLocationId">the unique identifier of the Fulfillment location. (required).</param>
        /// <param name="fulfillmentMethodType">the type of the fulfillment, valid options are [Pickup, Delivery and Shipping]. (required).</param>
        public DeleteFulfillmentLocationTimeSlotsRequest(string scopeId = default(string), string fulfillmentLocationId = default(string), FulfillmentMethodTypeEnum fulfillmentMethodType = default(FulfillmentMethodTypeEnum))
        {
            // to ensure "fulfillmentLocationId" is required (not null)
            this.FulfillmentLocationId = fulfillmentLocationId ?? throw new ArgumentNullException("fulfillmentLocationId is a required property for DeleteFulfillmentLocationTimeSlotsRequest and cannot be null");
            this.FulfillmentMethodType = fulfillmentMethodType;
            this.ScopeId = scopeId;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// the unique identifier of the Fulfillment location.
        /// </summary>
        /// <value>the unique identifier of the Fulfillment location.</value>
        [DataMember(Name = "fulfillmentLocationId", IsRequired = true, EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeleteFulfillmentLocationTimeSlotsRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentMethodType: ").Append(FulfillmentMethodType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeleteFulfillmentLocationTimeSlotsRequest);
        }

        /// <summary>
        /// Returns true if DeleteFulfillmentLocationTimeSlotsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeleteFulfillmentLocationTimeSlotsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeleteFulfillmentLocationTimeSlotsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentMethodType == input.FulfillmentMethodType ||
                    this.FulfillmentMethodType.Equals(input.FulfillmentMethodType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentMethodType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
