/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentProvidersMetadata
    /// </summary>
    [DataContract(Name = "FulfillmentProvidersMetadata")]
    public partial class FulfillmentProvidersMetadata : IEquatable<FulfillmentProvidersMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentProvidersMetadata" /> class.
        /// </summary>
        /// <param name="entityDefinitions">the list of entity definitions..</param>
        public FulfillmentProvidersMetadata(List<EntityDefinition> entityDefinitions = default(List<EntityDefinition>))
        {
            this.EntityDefinitions = entityDefinitions;
        }

        /// <summary>
        /// the list of entity definitions.
        /// </summary>
        /// <value>the list of entity definitions.</value>
        [DataMember(Name = "entityDefinitions", EmitDefaultValue = false)]
        public List<EntityDefinition> EntityDefinitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentProvidersMetadata {\n");
            sb.Append("  EntityDefinitions: ").Append(EntityDefinitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentProvidersMetadata);
        }

        /// <summary>
        /// Returns true if FulfillmentProvidersMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentProvidersMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentProvidersMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityDefinitions == input.EntityDefinitions ||
                    this.EntityDefinitions != null &&
                    input.EntityDefinitions != null &&
                    this.EntityDefinitions.SequenceEqual(input.EntityDefinitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityDefinitions != null)
                    hashCode = hashCode * 59 + this.EntityDefinitions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
