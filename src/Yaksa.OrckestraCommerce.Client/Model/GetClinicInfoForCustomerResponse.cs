/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// GetClinicInfoForCustomerResponse
    /// </summary>
    [DataContract(Name = "GetClinicInfoForCustomerResponse")]
    public partial class GetClinicInfoForCustomerResponse : IEquatable<GetClinicInfoForCustomerResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetClinicInfoForCustomerResponse" /> class.
        /// </summary>
        /// <param name="customerId">The customer id.</param>
        /// <param name="clinic">The clinic the customer is associated to. Will be null if the customer is not associated to a clinic..</param>
        /// <param name="isAdmin">Whether the customer is an admin of the clinic he&#39;s associated to..</param>
        public GetClinicInfoForCustomerResponse(string customerId = default(string), string clinic = default(string), bool isAdmin = default(bool))
        {
            this.CustomerId = customerId;
            this.Clinic = clinic;
            this.IsAdmin = isAdmin;
        }

        /// <summary>
        /// The customer id
        /// </summary>
        /// <value>The customer id</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The clinic the customer is associated to. Will be null if the customer is not associated to a clinic.
        /// </summary>
        /// <value>The clinic the customer is associated to. Will be null if the customer is not associated to a clinic.</value>
        [DataMember(Name = "clinic", EmitDefaultValue = false)]
        public string Clinic { get; set; }

        /// <summary>
        /// Whether the customer is an admin of the clinic he&#39;s associated to.
        /// </summary>
        /// <value>Whether the customer is an admin of the clinic he&#39;s associated to.</value>
        [DataMember(Name = "isAdmin", EmitDefaultValue = true)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetClinicInfoForCustomerResponse {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Clinic: ").Append(Clinic).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetClinicInfoForCustomerResponse);
        }

        /// <summary>
        /// Returns true if GetClinicInfoForCustomerResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetClinicInfoForCustomerResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetClinicInfoForCustomerResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.Clinic == input.Clinic ||
                    (this.Clinic != null &&
                    this.Clinic.Equals(input.Clinic))
                ) && 
                (
                    this.IsAdmin == input.IsAdmin ||
                    this.IsAdmin.Equals(input.IsAdmin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.Clinic != null)
                    hashCode = hashCode * 59 + this.Clinic.GetHashCode();
                hashCode = hashCode * 59 + this.IsAdmin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
