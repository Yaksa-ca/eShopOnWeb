/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ShipmentFulfillmentInfo
    /// </summary>
    [DataContract(Name = "ShipmentFulfillmentInfo")]
    public partial class ShipmentFulfillmentInfo : IEquatable<ShipmentFulfillmentInfo>, IValidatableObject
    {
        /// <summary>
        /// The Execution Result
        /// </summary>
        /// <value>The Execution Result</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExecutionResultEnum
        {
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 1,

            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3,

            /// <summary>
            /// Enum Critical for value: Critical
            /// </summary>
            [EnumMember(Value = "Critical")]
            Critical = 4,

            /// <summary>
            /// Enum Failure for value: Failure
            /// </summary>
            [EnumMember(Value = "Failure")]
            Failure = 5

        }


        /// <summary>
        /// The Execution Result
        /// </summary>
        /// <value>The Execution Result</value>
        [DataMember(Name = "executionResult", EmitDefaultValue = false)]
        public ExecutionResultEnum? ExecutionResult { get; set; }
        /// <summary>
        /// The FulFillmentType
        /// </summary>
        /// <value>The FulFillmentType</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulFillmentTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum PickUp for value: PickUp
            /// </summary>
            [EnumMember(Value = "PickUp")]
            PickUp = 2,

            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 3,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 4,

            /// <summary>
            /// Enum ShipToStore for value: ShipToStore
            /// </summary>
            [EnumMember(Value = "ShipToStore")]
            ShipToStore = 5

        }


        /// <summary>
        /// The FulFillmentType
        /// </summary>
        /// <value>The FulFillmentType</value>
        [DataMember(Name = "fulFillmentType", EmitDefaultValue = false)]
        public FulFillmentTypeEnum? FulFillmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentFulfillmentInfo" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="allowedManualTransitions">A list of allowed manual transition.</param>
        /// <param name="billingCurrency">The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;..</param>
        /// <param name="created">Date the ShipmentFulfillmentInfo was created.</param>
        /// <param name="createdBy">Identifier of the operator who created the ShipmentFulfillmentInfo.</param>
        /// <param name="customerEmail">The Customer Email.</param>
        /// <param name="customerName">The CustomerName.</param>
        /// <param name="customerPhone">The Customer Phone.</param>
        /// <param name="executionMessages">The Execution Messages.</param>
        /// <param name="executionResult">The Execution Result.</param>
        /// <param name="fulfillmentLastAssignedDate">The FulfillmentLastAssignedDate.</param>
        /// <param name="fulfillmentLocationId">The FulfillmentLocationId.</param>
        /// <param name="fulfillmentProviderId">The fulfillment provider identifier.</param>
        /// <param name="fulfillmentScheduledTimeBeginDate">The FulfillmentScheduledTimeBeginDate.</param>
        /// <param name="fulfillmentScheduledTimeEndDate">The FulfillmentScheduledTimeEndDate.</param>
        /// <param name="fulFillmentType">The FulFillmentType.</param>
        /// <param name="hasNotes">The value indicating whether or not the shipment has a note..</param>
        /// <param name="id">The Id.</param>
        /// <param name="lastModified">Date that the last modification was applied to the ShipmentFulfillmentInfo.</param>
        /// <param name="lastModifiedBy">Identifier of the operator who last modified the ShipmentFulfillmentInfo.</param>
        /// <param name="nbItems">NbItems.</param>
        /// <param name="nbUnits">NbUnits.</param>
        /// <param name="orderCreatedDate">The order creation date..</param>
        /// <param name="orderId">The OrderId.</param>
        /// <param name="orderNumber">The Order Number.</param>
        /// <param name="orderTotal">The order total amount..</param>
        /// <param name="pickUpLocationId">The PickUpLocationId.</param>
        /// <param name="scopeName">The Scope Name.</param>
        /// <param name="status">The Status.</param>
        /// <param name="total">The total amount for the shipment, including discounts..</param>
        /// <param name="validationResults">The Validation Results.</param>
        public ShipmentFulfillmentInfo(Address address = default(Address), List<string> allowedManualTransitions = default(List<string>), string billingCurrency = default(string), DateTime created = default(DateTime), string createdBy = default(string), string customerEmail = default(string), string customerName = default(string), string customerPhone = default(string), List<ExecutionMessage> executionMessages = default(List<ExecutionMessage>), ExecutionResultEnum? executionResult = default(ExecutionResultEnum?), DateTime fulfillmentLastAssignedDate = default(DateTime), string fulfillmentLocationId = default(string), string fulfillmentProviderId = default(string), DateTime fulfillmentScheduledTimeBeginDate = default(DateTime), DateTime fulfillmentScheduledTimeEndDate = default(DateTime), FulFillmentTypeEnum? fulFillmentType = default(FulFillmentTypeEnum?), bool hasNotes = default(bool), string id = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), int nbItems = default(int), double nbUnits = default(double), DateTime orderCreatedDate = default(DateTime), string orderId = default(string), string orderNumber = default(string), double orderTotal = default(double), string pickUpLocationId = default(string), string scopeName = default(string), string status = default(string), double total = default(double), List<ValidationResult> validationResults = default(List<ValidationResult>))
        {
            this.Address = address;
            this.AllowedManualTransitions = allowedManualTransitions;
            this.BillingCurrency = billingCurrency;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.CustomerEmail = customerEmail;
            this.CustomerName = customerName;
            this.CustomerPhone = customerPhone;
            this.ExecutionMessages = executionMessages;
            this.ExecutionResult = executionResult;
            this.FulfillmentLastAssignedDate = fulfillmentLastAssignedDate;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.FulfillmentProviderId = fulfillmentProviderId;
            this.FulfillmentScheduledTimeBeginDate = fulfillmentScheduledTimeBeginDate;
            this.FulfillmentScheduledTimeEndDate = fulfillmentScheduledTimeEndDate;
            this.FulFillmentType = fulFillmentType;
            this.HasNotes = hasNotes;
            this.Id = id;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.NbItems = nbItems;
            this.NbUnits = nbUnits;
            this.OrderCreatedDate = orderCreatedDate;
            this.OrderId = orderId;
            this.OrderNumber = orderNumber;
            this.OrderTotal = orderTotal;
            this.PickUpLocationId = pickUpLocationId;
            this.ScopeName = scopeName;
            this.Status = status;
            this.Total = total;
            this.ValidationResults = validationResults;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// A list of allowed manual transition
        /// </summary>
        /// <value>A list of allowed manual transition</value>
        [DataMember(Name = "allowedManualTransitions", EmitDefaultValue = false)]
        public List<string> AllowedManualTransitions { get; set; }

        /// <summary>
        /// The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;.
        /// </summary>
        /// <value>The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;.</value>
        [DataMember(Name = "billingCurrency", EmitDefaultValue = false)]
        public string BillingCurrency { get; set; }

        /// <summary>
        /// Date the ShipmentFulfillmentInfo was created
        /// </summary>
        /// <value>Date the ShipmentFulfillmentInfo was created</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Identifier of the operator who created the ShipmentFulfillmentInfo
        /// </summary>
        /// <value>Identifier of the operator who created the ShipmentFulfillmentInfo</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The Customer Email
        /// </summary>
        /// <value>The Customer Email</value>
        [DataMember(Name = "customerEmail", EmitDefaultValue = false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// The CustomerName
        /// </summary>
        /// <value>The CustomerName</value>
        [DataMember(Name = "customerName", EmitDefaultValue = false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// The Customer Phone
        /// </summary>
        /// <value>The Customer Phone</value>
        [DataMember(Name = "customerPhone", EmitDefaultValue = false)]
        public string CustomerPhone { get; set; }

        /// <summary>
        /// The Execution Messages
        /// </summary>
        /// <value>The Execution Messages</value>
        [DataMember(Name = "executionMessages", EmitDefaultValue = false)]
        public List<ExecutionMessage> ExecutionMessages { get; set; }

        /// <summary>
        /// The FulfillmentLastAssignedDate
        /// </summary>
        /// <value>The FulfillmentLastAssignedDate</value>
        [DataMember(Name = "fulfillmentLastAssignedDate", EmitDefaultValue = false)]
        public DateTime FulfillmentLastAssignedDate { get; set; }

        /// <summary>
        /// The FulfillmentLocationId
        /// </summary>
        /// <value>The FulfillmentLocationId</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// The fulfillment provider identifier
        /// </summary>
        /// <value>The fulfillment provider identifier</value>
        [DataMember(Name = "fulfillmentProviderId", EmitDefaultValue = false)]
        public string FulfillmentProviderId { get; set; }

        /// <summary>
        /// The FulfillmentScheduledTimeBeginDate
        /// </summary>
        /// <value>The FulfillmentScheduledTimeBeginDate</value>
        [DataMember(Name = "fulfillmentScheduledTimeBeginDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeBeginDate { get; set; }

        /// <summary>
        /// The FulfillmentScheduledTimeEndDate
        /// </summary>
        /// <value>The FulfillmentScheduledTimeEndDate</value>
        [DataMember(Name = "fulfillmentScheduledTimeEndDate", EmitDefaultValue = false)]
        public DateTime FulfillmentScheduledTimeEndDate { get; set; }

        /// <summary>
        /// The value indicating whether or not the shipment has a note.
        /// </summary>
        /// <value>The value indicating whether or not the shipment has a note.</value>
        [DataMember(Name = "hasNotes", EmitDefaultValue = true)]
        public bool HasNotes { get; set; }

        /// <summary>
        /// The Id
        /// </summary>
        /// <value>The Id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Date that the last modification was applied to the ShipmentFulfillmentInfo
        /// </summary>
        /// <value>Date that the last modification was applied to the ShipmentFulfillmentInfo</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Identifier of the operator who last modified the ShipmentFulfillmentInfo
        /// </summary>
        /// <value>Identifier of the operator who last modified the ShipmentFulfillmentInfo</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// NbItems
        /// </summary>
        /// <value>NbItems</value>
        [DataMember(Name = "nbItems", EmitDefaultValue = false)]
        public int NbItems { get; set; }

        /// <summary>
        /// NbUnits
        /// </summary>
        /// <value>NbUnits</value>
        [DataMember(Name = "nbUnits", EmitDefaultValue = false)]
        public double NbUnits { get; set; }

        /// <summary>
        /// The order creation date.
        /// </summary>
        /// <value>The order creation date.</value>
        [DataMember(Name = "orderCreatedDate", EmitDefaultValue = false)]
        public DateTime OrderCreatedDate { get; set; }

        /// <summary>
        /// The OrderId
        /// </summary>
        /// <value>The OrderId</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The Order Number
        /// </summary>
        /// <value>The Order Number</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The order total amount.
        /// </summary>
        /// <value>The order total amount.</value>
        [DataMember(Name = "orderTotal", EmitDefaultValue = false)]
        public double OrderTotal { get; set; }

        /// <summary>
        /// The PickUpLocationId
        /// </summary>
        /// <value>The PickUpLocationId</value>
        [DataMember(Name = "pickUpLocationId", EmitDefaultValue = false)]
        public string PickUpLocationId { get; set; }

        /// <summary>
        /// The Scope Name
        /// </summary>
        /// <value>The Scope Name</value>
        [DataMember(Name = "scopeName", EmitDefaultValue = false)]
        public string ScopeName { get; set; }

        /// <summary>
        /// The Status
        /// </summary>
        /// <value>The Status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The total amount for the shipment, including discounts.
        /// </summary>
        /// <value>The total amount for the shipment, including discounts.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// The Validation Results
        /// </summary>
        /// <value>The Validation Results</value>
        [DataMember(Name = "validationResults", EmitDefaultValue = false)]
        public List<ValidationResult> ValidationResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentFulfillmentInfo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AllowedManualTransitions: ").Append(AllowedManualTransitions).Append("\n");
            sb.Append("  BillingCurrency: ").Append(BillingCurrency).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  CustomerPhone: ").Append(CustomerPhone).Append("\n");
            sb.Append("  ExecutionMessages: ").Append(ExecutionMessages).Append("\n");
            sb.Append("  ExecutionResult: ").Append(ExecutionResult).Append("\n");
            sb.Append("  FulfillmentLastAssignedDate: ").Append(FulfillmentLastAssignedDate).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  FulfillmentProviderId: ").Append(FulfillmentProviderId).Append("\n");
            sb.Append("  FulfillmentScheduledTimeBeginDate: ").Append(FulfillmentScheduledTimeBeginDate).Append("\n");
            sb.Append("  FulfillmentScheduledTimeEndDate: ").Append(FulfillmentScheduledTimeEndDate).Append("\n");
            sb.Append("  FulFillmentType: ").Append(FulFillmentType).Append("\n");
            sb.Append("  HasNotes: ").Append(HasNotes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  NbItems: ").Append(NbItems).Append("\n");
            sb.Append("  NbUnits: ").Append(NbUnits).Append("\n");
            sb.Append("  OrderCreatedDate: ").Append(OrderCreatedDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  PickUpLocationId: ").Append(PickUpLocationId).Append("\n");
            sb.Append("  ScopeName: ").Append(ScopeName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  ValidationResults: ").Append(ValidationResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentFulfillmentInfo);
        }

        /// <summary>
        /// Returns true if ShipmentFulfillmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentFulfillmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentFulfillmentInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AllowedManualTransitions == input.AllowedManualTransitions ||
                    this.AllowedManualTransitions != null &&
                    input.AllowedManualTransitions != null &&
                    this.AllowedManualTransitions.SequenceEqual(input.AllowedManualTransitions)
                ) && 
                (
                    this.BillingCurrency == input.BillingCurrency ||
                    (this.BillingCurrency != null &&
                    this.BillingCurrency.Equals(input.BillingCurrency))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CustomerEmail == input.CustomerEmail ||
                    (this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(input.CustomerEmail))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.CustomerPhone == input.CustomerPhone ||
                    (this.CustomerPhone != null &&
                    this.CustomerPhone.Equals(input.CustomerPhone))
                ) && 
                (
                    this.ExecutionMessages == input.ExecutionMessages ||
                    this.ExecutionMessages != null &&
                    input.ExecutionMessages != null &&
                    this.ExecutionMessages.SequenceEqual(input.ExecutionMessages)
                ) && 
                (
                    this.ExecutionResult == input.ExecutionResult ||
                    this.ExecutionResult.Equals(input.ExecutionResult)
                ) && 
                (
                    this.FulfillmentLastAssignedDate == input.FulfillmentLastAssignedDate ||
                    (this.FulfillmentLastAssignedDate != null &&
                    this.FulfillmentLastAssignedDate.Equals(input.FulfillmentLastAssignedDate))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.FulfillmentProviderId == input.FulfillmentProviderId ||
                    (this.FulfillmentProviderId != null &&
                    this.FulfillmentProviderId.Equals(input.FulfillmentProviderId))
                ) && 
                (
                    this.FulfillmentScheduledTimeBeginDate == input.FulfillmentScheduledTimeBeginDate ||
                    (this.FulfillmentScheduledTimeBeginDate != null &&
                    this.FulfillmentScheduledTimeBeginDate.Equals(input.FulfillmentScheduledTimeBeginDate))
                ) && 
                (
                    this.FulfillmentScheduledTimeEndDate == input.FulfillmentScheduledTimeEndDate ||
                    (this.FulfillmentScheduledTimeEndDate != null &&
                    this.FulfillmentScheduledTimeEndDate.Equals(input.FulfillmentScheduledTimeEndDate))
                ) && 
                (
                    this.FulFillmentType == input.FulFillmentType ||
                    this.FulFillmentType.Equals(input.FulFillmentType)
                ) && 
                (
                    this.HasNotes == input.HasNotes ||
                    this.HasNotes.Equals(input.HasNotes)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.NbItems == input.NbItems ||
                    this.NbItems.Equals(input.NbItems)
                ) && 
                (
                    this.NbUnits == input.NbUnits ||
                    this.NbUnits.Equals(input.NbUnits)
                ) && 
                (
                    this.OrderCreatedDate == input.OrderCreatedDate ||
                    (this.OrderCreatedDate != null &&
                    this.OrderCreatedDate.Equals(input.OrderCreatedDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.OrderTotal == input.OrderTotal ||
                    this.OrderTotal.Equals(input.OrderTotal)
                ) && 
                (
                    this.PickUpLocationId == input.PickUpLocationId ||
                    (this.PickUpLocationId != null &&
                    this.PickUpLocationId.Equals(input.PickUpLocationId))
                ) && 
                (
                    this.ScopeName == input.ScopeName ||
                    (this.ScopeName != null &&
                    this.ScopeName.Equals(input.ScopeName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.ValidationResults == input.ValidationResults ||
                    this.ValidationResults != null &&
                    input.ValidationResults != null &&
                    this.ValidationResults.SequenceEqual(input.ValidationResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AllowedManualTransitions != null)
                    hashCode = hashCode * 59 + this.AllowedManualTransitions.GetHashCode();
                if (this.BillingCurrency != null)
                    hashCode = hashCode * 59 + this.BillingCurrency.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CustomerEmail != null)
                    hashCode = hashCode * 59 + this.CustomerEmail.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.CustomerPhone != null)
                    hashCode = hashCode * 59 + this.CustomerPhone.GetHashCode();
                if (this.ExecutionMessages != null)
                    hashCode = hashCode * 59 + this.ExecutionMessages.GetHashCode();
                hashCode = hashCode * 59 + this.ExecutionResult.GetHashCode();
                if (this.FulfillmentLastAssignedDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentLastAssignedDate.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.FulfillmentProviderId != null)
                    hashCode = hashCode * 59 + this.FulfillmentProviderId.GetHashCode();
                if (this.FulfillmentScheduledTimeBeginDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeBeginDate.GetHashCode();
                if (this.FulfillmentScheduledTimeEndDate != null)
                    hashCode = hashCode * 59 + this.FulfillmentScheduledTimeEndDate.GetHashCode();
                hashCode = hashCode * 59 + this.FulFillmentType.GetHashCode();
                hashCode = hashCode * 59 + this.HasNotes.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                hashCode = hashCode * 59 + this.NbItems.GetHashCode();
                hashCode = hashCode * 59 + this.NbUnits.GetHashCode();
                if (this.OrderCreatedDate != null)
                    hashCode = hashCode * 59 + this.OrderCreatedDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                hashCode = hashCode * 59 + this.OrderTotal.GetHashCode();
                if (this.PickUpLocationId != null)
                    hashCode = hashCode * 59 + this.PickUpLocationId.GetHashCode();
                if (this.ScopeName != null)
                    hashCode = hashCode * 59 + this.ScopeName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.ValidationResults != null)
                    hashCode = hashCode * 59 + this.ValidationResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
