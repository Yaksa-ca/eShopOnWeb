/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// UserPermissions
    /// </summary>
    [DataContract(Name = "UserPermissions")]
    public partial class UserPermissions : IEquatable<UserPermissions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPermissions" /> class.
        /// </summary>
        /// <param name="name">the name..</param>
        /// <param name="primarySId">the user primary Sid..</param>
        /// <param name="rolesClaimsValues">the roles claims..</param>
        /// <param name="siDs">the SIDs..</param>
        /// <param name="upn">the user principal name..</param>
        public UserPermissions(string name = default(string), string primarySId = default(string), List<string> rolesClaimsValues = default(List<string>), List<string> siDs = default(List<string>), string upn = default(string))
        {
            this.Name = name;
            this.PrimarySId = primarySId;
            this.RolesClaimsValues = rolesClaimsValues;
            this.SiDs = siDs;
            this.Upn = upn;
        }

        /// <summary>
        /// the name.
        /// </summary>
        /// <value>the name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the user primary Sid.
        /// </summary>
        /// <value>the user primary Sid.</value>
        [DataMember(Name = "primarySId", EmitDefaultValue = false)]
        public string PrimarySId { get; set; }

        /// <summary>
        /// the roles claims.
        /// </summary>
        /// <value>the roles claims.</value>
        [DataMember(Name = "rolesClaimsValues", EmitDefaultValue = false)]
        public List<string> RolesClaimsValues { get; set; }

        /// <summary>
        /// the SIDs.
        /// </summary>
        /// <value>the SIDs.</value>
        [DataMember(Name = "siDs", EmitDefaultValue = false)]
        public List<string> SiDs { get; set; }

        /// <summary>
        /// the user principal name.
        /// </summary>
        /// <value>the user principal name.</value>
        [DataMember(Name = "upn", EmitDefaultValue = false)]
        public string Upn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPermissions {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrimarySId: ").Append(PrimarySId).Append("\n");
            sb.Append("  RolesClaimsValues: ").Append(RolesClaimsValues).Append("\n");
            sb.Append("  SiDs: ").Append(SiDs).Append("\n");
            sb.Append("  Upn: ").Append(Upn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPermissions);
        }

        /// <summary>
        /// Returns true if UserPermissions instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPermissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPermissions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PrimarySId == input.PrimarySId ||
                    (this.PrimarySId != null &&
                    this.PrimarySId.Equals(input.PrimarySId))
                ) && 
                (
                    this.RolesClaimsValues == input.RolesClaimsValues ||
                    this.RolesClaimsValues != null &&
                    input.RolesClaimsValues != null &&
                    this.RolesClaimsValues.SequenceEqual(input.RolesClaimsValues)
                ) && 
                (
                    this.SiDs == input.SiDs ||
                    this.SiDs != null &&
                    input.SiDs != null &&
                    this.SiDs.SequenceEqual(input.SiDs)
                ) && 
                (
                    this.Upn == input.Upn ||
                    (this.Upn != null &&
                    this.Upn.Equals(input.Upn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PrimarySId != null)
                    hashCode = hashCode * 59 + this.PrimarySId.GetHashCode();
                if (this.RolesClaimsValues != null)
                    hashCode = hashCode * 59 + this.RolesClaimsValues.GetHashCode();
                if (this.SiDs != null)
                    hashCode = hashCode * 59 + this.SiDs.GetHashCode();
                if (this.Upn != null)
                    hashCode = hashCode * 59 + this.Upn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
