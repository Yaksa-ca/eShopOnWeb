/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "CreateFulfillmentCompetitionRequest")]
    public partial class CreateFulfillmentCompetitionRequest : IEquatable<CreateFulfillmentCompetitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentCompetitionRequest" /> class.
        /// </summary>
        /// <param name="fulfillmentLocationIds">the list of the fulfillment locations who are participating in the newly created competition..</param>
        /// <param name="id">The fulfillment competition&#39;s identifier which can be specified when creating the competition. Otherwise it is generated automatically..</param>
        /// <param name="orderId">The identifier of the order whose shipment&#39;s fulfillment is subject of the competition..</param>
        /// <param name="shipmentId">The identifier of the shipment whose fulfillment is subject of the competition..</param>
        public CreateFulfillmentCompetitionRequest(List<string> fulfillmentLocationIds = default(List<string>), string id = default(string), string orderId = default(string), string shipmentId = default(string))
        {
            this.FulfillmentLocationIds = fulfillmentLocationIds;
            this.Id = id;
            this.OrderId = orderId;
            this.ShipmentId = shipmentId;
        }

        /// <summary>
        /// the list of the fulfillment locations who are participating in the newly created competition.
        /// </summary>
        /// <value>the list of the fulfillment locations who are participating in the newly created competition.</value>
        [DataMember(Name = "fulfillmentLocationIds", EmitDefaultValue = false)]
        public List<string> FulfillmentLocationIds { get; set; }

        /// <summary>
        /// The fulfillment competition&#39;s identifier which can be specified when creating the competition. Otherwise it is generated automatically.
        /// </summary>
        /// <value>The fulfillment competition&#39;s identifier which can be specified when creating the competition. Otherwise it is generated automatically.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The identifier of the order whose shipment&#39;s fulfillment is subject of the competition.
        /// </summary>
        /// <value>The identifier of the order whose shipment&#39;s fulfillment is subject of the competition.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The identifier of the shipment whose fulfillment is subject of the competition.
        /// </summary>
        /// <value>The identifier of the shipment whose fulfillment is subject of the competition.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFulfillmentCompetitionRequest {\n");
            sb.Append("  FulfillmentLocationIds: ").Append(FulfillmentLocationIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFulfillmentCompetitionRequest);
        }

        /// <summary>
        /// Returns true if CreateFulfillmentCompetitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFulfillmentCompetitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFulfillmentCompetitionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FulfillmentLocationIds == input.FulfillmentLocationIds ||
                    this.FulfillmentLocationIds != null &&
                    input.FulfillmentLocationIds != null &&
                    this.FulfillmentLocationIds.SequenceEqual(input.FulfillmentLocationIds)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FulfillmentLocationIds != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationIds.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
