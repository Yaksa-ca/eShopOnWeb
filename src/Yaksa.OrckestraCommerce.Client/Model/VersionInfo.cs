/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// VersionInfo
    /// </summary>
    [DataContract(Name = "VersionInfo")]
    public partial class VersionInfo : IEquatable<VersionInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionInfo" /> class.
        /// </summary>
        /// <param name="versionOCC">The version of the Orckestra Commerce Cloud platform.</param>
        /// <param name="defaultHelpUrl">The default Help Url for the Orckestra Commerce Cloud platform.</param>
        /// <param name="moduleHelpUrls">The list of Help URLs for Orckestra Commerce Cloud platform modules.</param>
        public VersionInfo(string versionOCC = default(string), string defaultHelpUrl = default(string), List<ModuleHelpUrl> moduleHelpUrls = default(List<ModuleHelpUrl>))
        {
            this.VersionOCC = versionOCC;
            this.DefaultHelpUrl = defaultHelpUrl;
            this.ModuleHelpUrls = moduleHelpUrls;
        }

        /// <summary>
        /// The version of the Orckestra Commerce Cloud platform
        /// </summary>
        /// <value>The version of the Orckestra Commerce Cloud platform</value>
        [DataMember(Name = "versionOCC", EmitDefaultValue = false)]
        public string VersionOCC { get; set; }

        /// <summary>
        /// The default Help Url for the Orckestra Commerce Cloud platform
        /// </summary>
        /// <value>The default Help Url for the Orckestra Commerce Cloud platform</value>
        [DataMember(Name = "defaultHelpUrl", EmitDefaultValue = false)]
        public string DefaultHelpUrl { get; set; }

        /// <summary>
        /// The list of Help URLs for Orckestra Commerce Cloud platform modules
        /// </summary>
        /// <value>The list of Help URLs for Orckestra Commerce Cloud platform modules</value>
        [DataMember(Name = "moduleHelpUrls", EmitDefaultValue = false)]
        public List<ModuleHelpUrl> ModuleHelpUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionInfo {\n");
            sb.Append("  VersionOCC: ").Append(VersionOCC).Append("\n");
            sb.Append("  DefaultHelpUrl: ").Append(DefaultHelpUrl).Append("\n");
            sb.Append("  ModuleHelpUrls: ").Append(ModuleHelpUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionInfo);
        }

        /// <summary>
        /// Returns true if VersionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VersionOCC == input.VersionOCC ||
                    (this.VersionOCC != null &&
                    this.VersionOCC.Equals(input.VersionOCC))
                ) && 
                (
                    this.DefaultHelpUrl == input.DefaultHelpUrl ||
                    (this.DefaultHelpUrl != null &&
                    this.DefaultHelpUrl.Equals(input.DefaultHelpUrl))
                ) && 
                (
                    this.ModuleHelpUrls == input.ModuleHelpUrls ||
                    this.ModuleHelpUrls != null &&
                    input.ModuleHelpUrls != null &&
                    this.ModuleHelpUrls.SequenceEqual(input.ModuleHelpUrls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionOCC != null)
                    hashCode = hashCode * 59 + this.VersionOCC.GetHashCode();
                if (this.DefaultHelpUrl != null)
                    hashCode = hashCode * 59 + this.DefaultHelpUrl.GetHashCode();
                if (this.ModuleHelpUrls != null)
                    hashCode = hashCode * 59 + this.ModuleHelpUrls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
