/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PromotionDatetimeFilter
    /// </summary>
    [DataContract(Name = "PromotionDatetimeFilter")]
    public partial class PromotionDatetimeFilter : IEquatable<PromotionDatetimeFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionDatetimeFilter" /> class.
        /// </summary>
        /// <param name="daysOfWeek">the days of the week when the promotion is valid..</param>
        /// <param name="endTime">the end time of the day when the promotion is valid..</param>
        /// <param name="startTime">the start time of the day when the promotion is valid..</param>
        public PromotionDatetimeFilter(int daysOfWeek = default(int), DateTime endTime = default(DateTime), DateTime startTime = default(DateTime))
        {
            this.DaysOfWeek = daysOfWeek;
            this.EndTime = endTime;
            this.StartTime = startTime;
        }

        /// <summary>
        /// the days of the week when the promotion is valid.
        /// </summary>
        /// <value>the days of the week when the promotion is valid.</value>
        [DataMember(Name = "daysOfWeek", EmitDefaultValue = false)]
        public int DaysOfWeek { get; set; }

        /// <summary>
        /// the end time of the day when the promotion is valid.
        /// </summary>
        /// <value>the end time of the day when the promotion is valid.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// the start time of the day when the promotion is valid.
        /// </summary>
        /// <value>the start time of the day when the promotion is valid.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromotionDatetimeFilter {\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromotionDatetimeFilter);
        }

        /// <summary>
        /// Returns true if PromotionDatetimeFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of PromotionDatetimeFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromotionDatetimeFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DaysOfWeek == input.DaysOfWeek ||
                    this.DaysOfWeek.Equals(input.DaysOfWeek)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DaysOfWeek.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
