/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "ShipmentSplitRequest")]
    public partial class ShipmentSplitRequest : IEquatable<ShipmentSplitRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentSplitRequest" /> class.
        /// </summary>
        /// <param name="copyFulfillmentLocationId">A value indicating whether the fulfillment location id should be copied from the original shipment..</param>
        /// <param name="extraParams">extraParams.</param>
        /// <param name="shipmentSplitItems">The list of shipment split items..</param>
        public ShipmentSplitRequest(bool copyFulfillmentLocationId = default(bool), Dictionary<string, Object> extraParams = default(Dictionary<string, Object>), List<ShipmentSplitItem> shipmentSplitItems = default(List<ShipmentSplitItem>))
        {
            this.CopyFulfillmentLocationId = copyFulfillmentLocationId;
            this.ExtraParams = extraParams;
            this.ShipmentSplitItems = shipmentSplitItems;
        }

        /// <summary>
        /// A value indicating whether the fulfillment location id should be copied from the original shipment.
        /// </summary>
        /// <value>A value indicating whether the fulfillment location id should be copied from the original shipment.</value>
        [DataMember(Name = "copyFulfillmentLocationId", EmitDefaultValue = true)]
        public bool CopyFulfillmentLocationId { get; set; }

        /// <summary>
        /// Gets or Sets ExtraParams
        /// </summary>
        [DataMember(Name = "extraParams", EmitDefaultValue = false)]
        public Dictionary<string, Object> ExtraParams { get; set; }

        /// <summary>
        /// The list of shipment split items.
        /// </summary>
        /// <value>The list of shipment split items.</value>
        [DataMember(Name = "shipmentSplitItems", EmitDefaultValue = false)]
        public List<ShipmentSplitItem> ShipmentSplitItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentSplitRequest {\n");
            sb.Append("  CopyFulfillmentLocationId: ").Append(CopyFulfillmentLocationId).Append("\n");
            sb.Append("  ExtraParams: ").Append(ExtraParams).Append("\n");
            sb.Append("  ShipmentSplitItems: ").Append(ShipmentSplitItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentSplitRequest);
        }

        /// <summary>
        /// Returns true if ShipmentSplitRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentSplitRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentSplitRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CopyFulfillmentLocationId == input.CopyFulfillmentLocationId ||
                    this.CopyFulfillmentLocationId.Equals(input.CopyFulfillmentLocationId)
                ) && 
                (
                    this.ExtraParams == input.ExtraParams ||
                    this.ExtraParams != null &&
                    input.ExtraParams != null &&
                    this.ExtraParams.SequenceEqual(input.ExtraParams)
                ) && 
                (
                    this.ShipmentSplitItems == input.ShipmentSplitItems ||
                    this.ShipmentSplitItems != null &&
                    input.ShipmentSplitItems != null &&
                    this.ShipmentSplitItems.SequenceEqual(input.ShipmentSplitItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CopyFulfillmentLocationId.GetHashCode();
                if (this.ExtraParams != null)
                    hashCode = hashCode * 59 + this.ExtraParams.GetHashCode();
                if (this.ShipmentSplitItems != null)
                    hashCode = hashCode * 59 + this.ShipmentSplitItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
