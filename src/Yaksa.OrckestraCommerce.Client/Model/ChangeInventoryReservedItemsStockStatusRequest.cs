/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Inventory items are a combination of InventoryQuantity and InventorySchedules.
    /// </summary>
    [DataContract(Name = "ChangeInventoryReservedItemsStockStatusRequest")]
    public partial class ChangeInventoryReservedItemsStockStatusRequest : IEquatable<ChangeInventoryReservedItemsStockStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// The new stock status reservation identifiers
        /// </summary>
        /// <value>The new stock status reservation identifiers</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StockStatusEnum
        {
            /// <summary>
            /// Enum InStock for value: InStock
            /// </summary>
            [EnumMember(Value = "InStock")]
            InStock = 1,

            /// <summary>
            /// Enum PreOrder for value: PreOrder
            /// </summary>
            [EnumMember(Value = "PreOrder")]
            PreOrder = 2,

            /// <summary>
            /// Enum BackOrder for value: BackOrder
            /// </summary>
            [EnumMember(Value = "BackOrder")]
            BackOrder = 3

        }


        /// <summary>
        /// The new stock status reservation identifiers
        /// </summary>
        /// <value>The new stock status reservation identifiers</value>
        [DataMember(Name = "stockStatus", EmitDefaultValue = false)]
        public StockStatusEnum? StockStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeInventoryReservedItemsStockStatusRequest" /> class.
        /// </summary>
        /// <param name="reservationIds">The inventory reservation identifiers.</param>
        /// <param name="stockStatus">The new stock status reservation identifiers.</param>
        public ChangeInventoryReservedItemsStockStatusRequest(List<string> reservationIds = default(List<string>), StockStatusEnum? stockStatus = default(StockStatusEnum?))
        {
            this.ReservationIds = reservationIds;
            this.StockStatus = stockStatus;
        }

        /// <summary>
        /// The inventory reservation identifiers
        /// </summary>
        /// <value>The inventory reservation identifiers</value>
        [DataMember(Name = "reservationIds", EmitDefaultValue = false)]
        public List<string> ReservationIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeInventoryReservedItemsStockStatusRequest {\n");
            sb.Append("  ReservationIds: ").Append(ReservationIds).Append("\n");
            sb.Append("  StockStatus: ").Append(StockStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeInventoryReservedItemsStockStatusRequest);
        }

        /// <summary>
        /// Returns true if ChangeInventoryReservedItemsStockStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeInventoryReservedItemsStockStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeInventoryReservedItemsStockStatusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReservationIds == input.ReservationIds ||
                    this.ReservationIds != null &&
                    input.ReservationIds != null &&
                    this.ReservationIds.SequenceEqual(input.ReservationIds)
                ) && 
                (
                    this.StockStatus == input.StockStatus ||
                    this.StockStatus.Equals(input.StockStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReservationIds != null)
                    hashCode = hashCode * 59 + this.ReservationIds.GetHashCode();
                hashCode = hashCode * 59 + this.StockStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
