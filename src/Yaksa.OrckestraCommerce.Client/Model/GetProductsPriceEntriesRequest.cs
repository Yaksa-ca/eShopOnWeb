/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "GetProductsPriceEntriesRequest")]
    public partial class GetProductsPriceEntriesRequest : IEquatable<GetProductsPriceEntriesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsPriceEntriesRequest" /> class.
        /// </summary>
        /// <param name="effectiveDate">The date which the price is effective..</param>
        /// <param name="includeVariant">Whether or not to include the variant prices of the product.</param>
        /// <param name="productIds">the business ids for the products to retrieve.</param>
        public GetProductsPriceEntriesRequest(DateTime effectiveDate = default(DateTime), bool includeVariant = default(bool), List<string> productIds = default(List<string>))
        {
            this.EffectiveDate = effectiveDate;
            this.IncludeVariant = includeVariant;
            this.ProductIds = productIds;
        }

        /// <summary>
        /// The date which the price is effective.
        /// </summary>
        /// <value>The date which the price is effective.</value>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = false)]
        public DateTime EffectiveDate { get; set; }

        /// <summary>
        /// Whether or not to include the variant prices of the product
        /// </summary>
        /// <value>Whether or not to include the variant prices of the product</value>
        [DataMember(Name = "includeVariant", EmitDefaultValue = true)]
        public bool IncludeVariant { get; set; }

        /// <summary>
        /// the business ids for the products to retrieve
        /// </summary>
        /// <value>the business ids for the products to retrieve</value>
        [DataMember(Name = "productIds", EmitDefaultValue = false)]
        public List<string> ProductIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProductsPriceEntriesRequest {\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  IncludeVariant: ").Append(IncludeVariant).Append("\n");
            sb.Append("  ProductIds: ").Append(ProductIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProductsPriceEntriesRequest);
        }

        /// <summary>
        /// Returns true if GetProductsPriceEntriesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProductsPriceEntriesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProductsPriceEntriesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.IncludeVariant == input.IncludeVariant ||
                    this.IncludeVariant.Equals(input.IncludeVariant)
                ) && 
                (
                    this.ProductIds == input.ProductIds ||
                    this.ProductIds != null &&
                    input.ProductIds != null &&
                    this.ProductIds.SequenceEqual(input.ProductIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeVariant.GetHashCode();
                if (this.ProductIds != null)
                    hashCode = hashCode * 59 + this.ProductIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
