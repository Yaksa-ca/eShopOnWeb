/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Scopes are entities that allow you to organize and search data and settings for a given market.
    /// </summary>
    [DataContract(Name = "UpdateScopeRequest")]
    public partial class UpdateScopeRequest : IEquatable<UpdateScopeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateScopeRequest" /> class.
        /// </summary>
        /// <param name="currencyIso">The currency iso code of the scope..</param>
        /// <param name="description">description.</param>
        /// <param name="endDate"> The end date of the scope..</param>
        /// <param name="isActive">The value indicating whether or not the scope is active..</param>
        /// <param name="name">name.</param>
        /// <param name="parentScopeId">The parent scope id..</param>
        /// <param name="startDate">The start date of the scope..</param>
        public UpdateScopeRequest(string currencyIso = default(string), Dictionary<string, string> description = default(Dictionary<string, string>), DateTime endDate = default(DateTime), bool isActive = default(bool), Dictionary<string, string> name = default(Dictionary<string, string>), string parentScopeId = default(string), DateTime startDate = default(DateTime))
        {
            this.CurrencyIso = currencyIso;
            this.Description = description;
            this.EndDate = endDate;
            this.IsActive = isActive;
            this.Name = name;
            this.ParentScopeId = parentScopeId;
            this.StartDate = startDate;
        }

        /// <summary>
        /// The currency iso code of the scope.
        /// </summary>
        /// <value>The currency iso code of the scope.</value>
        [DataMember(Name = "currencyIso", EmitDefaultValue = false)]
        public string CurrencyIso { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        ///  The end date of the scope.
        /// </summary>
        /// <value> The end date of the scope.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The value indicating whether or not the scope is active.
        /// </summary>
        /// <value>The value indicating whether or not the scope is active.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public Dictionary<string, string> Name { get; set; }

        /// <summary>
        /// The parent scope id.
        /// </summary>
        /// <value>The parent scope id.</value>
        [DataMember(Name = "parentScopeId", EmitDefaultValue = false)]
        public string ParentScopeId { get; set; }

        /// <summary>
        /// The start date of the scope.
        /// </summary>
        /// <value>The start date of the scope.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateScopeRequest {\n");
            sb.Append("  CurrencyIso: ").Append(CurrencyIso).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentScopeId: ").Append(ParentScopeId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateScopeRequest);
        }

        /// <summary>
        /// Returns true if UpdateScopeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateScopeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateScopeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyIso == input.CurrencyIso ||
                    (this.CurrencyIso != null &&
                    this.CurrencyIso.Equals(input.CurrencyIso))
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name != null &&
                    input.Name != null &&
                    this.Name.SequenceEqual(input.Name)
                ) && 
                (
                    this.ParentScopeId == input.ParentScopeId ||
                    (this.ParentScopeId != null &&
                    this.ParentScopeId.Equals(input.ParentScopeId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyIso != null)
                    hashCode = hashCode * 59 + this.CurrencyIso.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentScopeId != null)
                    hashCode = hashCode * 59 + this.ParentScopeId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
