/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Inventory items are a combination of InventoryQuantity and InventorySchedules.
    /// </summary>
    [DataContract(Name = "ReserveInventoryItemsRequest")]
    public partial class ReserveInventoryItemsRequest : IEquatable<ReserveInventoryItemsRequest>, IValidatableObject
    {
        /// <summary>
        /// The owner type
        /// </summary>
        /// <value>The owner type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OwnerTypeEnum
        {
            /// <summary>
            /// Enum Order for value: Order
            /// </summary>
            [EnumMember(Value = "Order")]
            Order = 1,

            /// <summary>
            /// Enum Cart for value: Cart
            /// </summary>
            [EnumMember(Value = "Cart")]
            Cart = 2,

            /// <summary>
            /// Enum OrderDraft for value: OrderDraft
            /// </summary>
            [EnumMember(Value = "OrderDraft")]
            OrderDraft = 3

        }


        /// <summary>
        /// The owner type
        /// </summary>
        /// <value>The owner type</value>
        [DataMember(Name = "ownerType", EmitDefaultValue = false)]
        public OwnerTypeEnum? OwnerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReserveInventoryItemsRequest" /> class.
        /// </summary>
        /// <param name="allowPartialAvailabilityReservation">The value that allows or not a partial availability reservation.</param>
        /// <param name="effectiveDate">The effective date of the reservation.</param>
        /// <param name="inventoryItemReservationRequests">The inventory item reservation requests.</param>
        /// <param name="inventoryLocationId">The inventory location identifier.</param>
        /// <param name="ownerType">The owner type.</param>
        public ReserveInventoryItemsRequest(bool allowPartialAvailabilityReservation = default(bool), DateTime effectiveDate = default(DateTime), List<InventoryItemReservationRequest> inventoryItemReservationRequests = default(List<InventoryItemReservationRequest>), string inventoryLocationId = default(string), OwnerTypeEnum? ownerType = default(OwnerTypeEnum?))
        {
            this.AllowPartialAvailabilityReservation = allowPartialAvailabilityReservation;
            this.EffectiveDate = effectiveDate;
            this.InventoryItemReservationRequests = inventoryItemReservationRequests;
            this.InventoryLocationId = inventoryLocationId;
            this.OwnerType = ownerType;
        }

        /// <summary>
        /// The value that allows or not a partial availability reservation
        /// </summary>
        /// <value>The value that allows or not a partial availability reservation</value>
        [DataMember(Name = "allowPartialAvailabilityReservation", EmitDefaultValue = true)]
        public bool AllowPartialAvailabilityReservation { get; set; }

        /// <summary>
        /// The effective date of the reservation
        /// </summary>
        /// <value>The effective date of the reservation</value>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = false)]
        public DateTime EffectiveDate { get; set; }

        /// <summary>
        /// The inventory item reservation requests
        /// </summary>
        /// <value>The inventory item reservation requests</value>
        [DataMember(Name = "inventoryItemReservationRequests", EmitDefaultValue = false)]
        public List<InventoryItemReservationRequest> InventoryItemReservationRequests { get; set; }

        /// <summary>
        /// The inventory location identifier
        /// </summary>
        /// <value>The inventory location identifier</value>
        [DataMember(Name = "inventoryLocationId", EmitDefaultValue = false)]
        public string InventoryLocationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReserveInventoryItemsRequest {\n");
            sb.Append("  AllowPartialAvailabilityReservation: ").Append(AllowPartialAvailabilityReservation).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  InventoryItemReservationRequests: ").Append(InventoryItemReservationRequests).Append("\n");
            sb.Append("  InventoryLocationId: ").Append(InventoryLocationId).Append("\n");
            sb.Append("  OwnerType: ").Append(OwnerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReserveInventoryItemsRequest);
        }

        /// <summary>
        /// Returns true if ReserveInventoryItemsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReserveInventoryItemsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReserveInventoryItemsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowPartialAvailabilityReservation == input.AllowPartialAvailabilityReservation ||
                    this.AllowPartialAvailabilityReservation.Equals(input.AllowPartialAvailabilityReservation)
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.InventoryItemReservationRequests == input.InventoryItemReservationRequests ||
                    this.InventoryItemReservationRequests != null &&
                    input.InventoryItemReservationRequests != null &&
                    this.InventoryItemReservationRequests.SequenceEqual(input.InventoryItemReservationRequests)
                ) && 
                (
                    this.InventoryLocationId == input.InventoryLocationId ||
                    (this.InventoryLocationId != null &&
                    this.InventoryLocationId.Equals(input.InventoryLocationId))
                ) && 
                (
                    this.OwnerType == input.OwnerType ||
                    this.OwnerType.Equals(input.OwnerType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowPartialAvailabilityReservation.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.InventoryItemReservationRequests != null)
                    hashCode = hashCode * 59 + this.InventoryItemReservationRequests.GetHashCode();
                if (this.InventoryLocationId != null)
                    hashCode = hashCode * 59 + this.InventoryLocationId.GetHashCode();
                hashCode = hashCode * 59 + this.OwnerType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
