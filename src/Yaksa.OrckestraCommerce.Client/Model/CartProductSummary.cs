/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// CartProductSummary
    /// </summary>
    [DataContract(Name = "CartProductSummary")]
    public partial class CartProductSummary : IEquatable<CartProductSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartProductSummary" /> class.
        /// </summary>
        /// <param name="allowSelectionWithoutScan">a value indicating whether the item allows selection without scan.</param>
        /// <param name="brand">the Brand of the product..</param>
        /// <param name="displayName">the display name of the product..</param>
        /// <param name="isProductWithoutPrice">True if the product has no price..</param>
        /// <param name="itemFormat">the ItemFormat of the product..</param>
        /// <param name="primaryParentCategoryId">the PrimaryParentCategoryId of the product..</param>
        /// <param name="productWeight">The weight of the product..</param>
        /// <param name="productWeightUOM">The weight UOM of the product..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="unitOfMeasure">the UnitOfMeasure of the product..</param>
        public CartProductSummary(bool allowSelectionWithoutScan = default(bool), string brand = default(string), string displayName = default(string), bool isProductWithoutPrice = default(bool), double itemFormat = default(double), string primaryParentCategoryId = default(string), double productWeight = default(double), string productWeightUOM = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string unitOfMeasure = default(string))
        {
            this.AllowSelectionWithoutScan = allowSelectionWithoutScan;
            this.Brand = brand;
            this.DisplayName = displayName;
            this.IsProductWithoutPrice = isProductWithoutPrice;
            this.ItemFormat = itemFormat;
            this.PrimaryParentCategoryId = primaryParentCategoryId;
            this.ProductWeight = productWeight;
            this.ProductWeightUOM = productWeightUOM;
            this.PropertyBag = propertyBag;
            this.UnitOfMeasure = unitOfMeasure;
        }

        /// <summary>
        /// a value indicating whether the item allows selection without scan
        /// </summary>
        /// <value>a value indicating whether the item allows selection without scan</value>
        [DataMember(Name = "allowSelectionWithoutScan", EmitDefaultValue = true)]
        public bool AllowSelectionWithoutScan { get; set; }

        /// <summary>
        /// the Brand of the product.
        /// </summary>
        /// <value>the Brand of the product.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// the display name of the product.
        /// </summary>
        /// <value>the display name of the product.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// True if the product has no price.
        /// </summary>
        /// <value>True if the product has no price.</value>
        [DataMember(Name = "isProductWithoutPrice", EmitDefaultValue = true)]
        public bool IsProductWithoutPrice { get; set; }

        /// <summary>
        /// the ItemFormat of the product.
        /// </summary>
        /// <value>the ItemFormat of the product.</value>
        [DataMember(Name = "itemFormat", EmitDefaultValue = false)]
        public double ItemFormat { get; set; }

        /// <summary>
        /// the PrimaryParentCategoryId of the product.
        /// </summary>
        /// <value>the PrimaryParentCategoryId of the product.</value>
        [DataMember(Name = "primaryParentCategoryId", EmitDefaultValue = false)]
        public string PrimaryParentCategoryId { get; set; }

        /// <summary>
        /// The weight of the product.
        /// </summary>
        /// <value>The weight of the product.</value>
        [DataMember(Name = "productWeight", EmitDefaultValue = false)]
        public double ProductWeight { get; set; }

        /// <summary>
        /// The weight UOM of the product.
        /// </summary>
        /// <value>The weight UOM of the product.</value>
        [DataMember(Name = "productWeightUOM", EmitDefaultValue = false)]
        public string ProductWeightUOM { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// the UnitOfMeasure of the product.
        /// </summary>
        /// <value>the UnitOfMeasure of the product.</value>
        [DataMember(Name = "unitOfMeasure", EmitDefaultValue = false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartProductSummary {\n");
            sb.Append("  AllowSelectionWithoutScan: ").Append(AllowSelectionWithoutScan).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IsProductWithoutPrice: ").Append(IsProductWithoutPrice).Append("\n");
            sb.Append("  ItemFormat: ").Append(ItemFormat).Append("\n");
            sb.Append("  PrimaryParentCategoryId: ").Append(PrimaryParentCategoryId).Append("\n");
            sb.Append("  ProductWeight: ").Append(ProductWeight).Append("\n");
            sb.Append("  ProductWeightUOM: ").Append(ProductWeightUOM).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartProductSummary);
        }

        /// <summary>
        /// Returns true if CartProductSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of CartProductSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartProductSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowSelectionWithoutScan == input.AllowSelectionWithoutScan ||
                    this.AllowSelectionWithoutScan.Equals(input.AllowSelectionWithoutScan)
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.IsProductWithoutPrice == input.IsProductWithoutPrice ||
                    this.IsProductWithoutPrice.Equals(input.IsProductWithoutPrice)
                ) && 
                (
                    this.ItemFormat == input.ItemFormat ||
                    this.ItemFormat.Equals(input.ItemFormat)
                ) && 
                (
                    this.PrimaryParentCategoryId == input.PrimaryParentCategoryId ||
                    (this.PrimaryParentCategoryId != null &&
                    this.PrimaryParentCategoryId.Equals(input.PrimaryParentCategoryId))
                ) && 
                (
                    this.ProductWeight == input.ProductWeight ||
                    this.ProductWeight.Equals(input.ProductWeight)
                ) && 
                (
                    this.ProductWeightUOM == input.ProductWeightUOM ||
                    (this.ProductWeightUOM != null &&
                    this.ProductWeightUOM.Equals(input.ProductWeightUOM))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowSelectionWithoutScan.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IsProductWithoutPrice.GetHashCode();
                hashCode = hashCode * 59 + this.ItemFormat.GetHashCode();
                if (this.PrimaryParentCategoryId != null)
                    hashCode = hashCode * 59 + this.PrimaryParentCategoryId.GetHashCode();
                hashCode = hashCode * 59 + this.ProductWeight.GetHashCode();
                if (this.ProductWeightUOM != null)
                    hashCode = hashCode * 59 + this.ProductWeightUOM.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
