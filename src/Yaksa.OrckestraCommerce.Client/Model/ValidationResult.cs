/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ValidationResult
    /// </summary>
    [DataContract(Name = "ValidationResult")]
    public partial class ValidationResult : IEquatable<ValidationResult>, IValidatableObject
    {
        /// <summary>
        /// The minimum severity to consider as error
        /// </summary>
        /// <value>The minimum severity to consider as error</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorMinimumSeverityEnum
        {
            /// <summary>
            /// Enum Information for value: Information
            /// </summary>
            [EnumMember(Value = "Information")]
            Information = 1,

            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3,

            /// <summary>
            /// Enum Critical for value: Critical
            /// </summary>
            [EnumMember(Value = "Critical")]
            Critical = 4

        }


        /// <summary>
        /// The minimum severity to consider as error
        /// </summary>
        /// <value>The minimum severity to consider as error</value>
        [DataMember(Name = "errorMinimumSeverity", EmitDefaultValue = false)]
        public ErrorMinimumSeverityEnum? ErrorMinimumSeverity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationResult" /> class.
        /// </summary>
        /// <param name="category">A category that applies to the validation results.</param>
        /// <param name="errorMinimumSeverity">The minimum severity to consider as error.</param>
        /// <param name="errors">If applicable, a list of all validation failures associated with the result.</param>
        /// <param name="isValid">Returns true if all errors are lesser than ErrorMinimumSeverity.</param>
        public ValidationResult(string category = default(string), ErrorMinimumSeverityEnum? errorMinimumSeverity = default(ErrorMinimumSeverityEnum?), List<ValidationFailure> errors = default(List<ValidationFailure>), bool isValid = default(bool))
        {
            this.Category = category;
            this.ErrorMinimumSeverity = errorMinimumSeverity;
            this.Errors = errors;
            this.IsValid = isValid;
        }

        /// <summary>
        /// A category that applies to the validation results
        /// </summary>
        /// <value>A category that applies to the validation results</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// If applicable, a list of all validation failures associated with the result
        /// </summary>
        /// <value>If applicable, a list of all validation failures associated with the result</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<ValidationFailure> Errors { get; set; }

        /// <summary>
        /// Returns true if all errors are lesser than ErrorMinimumSeverity
        /// </summary>
        /// <value>Returns true if all errors are lesser than ErrorMinimumSeverity</value>
        [DataMember(Name = "isValid", EmitDefaultValue = true)]
        public bool IsValid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidationResult {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ErrorMinimumSeverity: ").Append(ErrorMinimumSeverity).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidationResult);
        }

        /// <summary>
        /// Returns true if ValidationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.ErrorMinimumSeverity == input.ErrorMinimumSeverity ||
                    this.ErrorMinimumSeverity.Equals(input.ErrorMinimumSeverity)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    this.IsValid.Equals(input.IsValid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                hashCode = hashCode * 59 + this.ErrorMinimumSeverity.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                hashCode = hashCode * 59 + this.IsValid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
