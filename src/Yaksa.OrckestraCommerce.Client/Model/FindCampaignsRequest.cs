/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Campaigns are entities used to organize marketing promotions.
    /// </summary>
    [DataContract(Name = "FindCampaignsRequest")]
    public partial class FindCampaignsRequest : IEquatable<FindCampaignsRequest>, IValidatableObject
    {
        /// <summary>
        /// The status of the campaign(s) to search for.
        /// </summary>
        /// <value>The status of the campaign(s) to search for.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CampaignStatusEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Draft for value: Draft
            /// </summary>
            [EnumMember(Value = "Draft")]
            Draft = 2,

            /// <summary>
            /// Enum PendingApproval for value: PendingApproval
            /// </summary>
            [EnumMember(Value = "PendingApproval")]
            PendingApproval = 3,

            /// <summary>
            /// Enum Ready for value: Ready
            /// </summary>
            [EnumMember(Value = "Ready")]
            Ready = 4,

            /// <summary>
            /// Enum Live for value: Live
            /// </summary>
            [EnumMember(Value = "Live")]
            Live = 5,

            /// <summary>
            /// Enum Paused for value: Paused
            /// </summary>
            [EnumMember(Value = "Paused")]
            Paused = 6,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 7,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 8,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 9

        }


        /// <summary>
        /// The status of the campaign(s) to search for.
        /// </summary>
        /// <value>The status of the campaign(s) to search for.</value>
        [DataMember(Name = "campaignStatus", EmitDefaultValue = false)]
        public CampaignStatusEnum? CampaignStatus { get; set; }
        /// <summary>
        /// The campaign search mode.
        /// </summary>
        /// <value>The campaign search mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchModeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Current for value: Current
            /// </summary>
            [EnumMember(Value = "Current")]
            Current = 2,

            /// <summary>
            /// Enum Future for value: Future
            /// </summary>
            [EnumMember(Value = "Future")]
            Future = 3,

            /// <summary>
            /// Enum Archive for value: Archive
            /// </summary>
            [EnumMember(Value = "Archive")]
            Archive = 4

        }


        /// <summary>
        /// The campaign search mode.
        /// </summary>
        /// <value>The campaign search mode.</value>
        [DataMember(Name = "searchMode", EmitDefaultValue = false)]
        public SearchModeEnum? SearchMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindCampaignsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FindCampaignsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindCampaignsRequest" /> class.
        /// </summary>
        /// <param name="configurationName">The name of the configuration to use to process this request.</param>
        /// <param name="cultureName">The culture (language) to use to process the request (en-US) (required).</param>
        /// <param name="query">query.</param>
        /// <param name="campaignStatus">The status of the campaign(s) to search for..</param>
        /// <param name="campaignType">The type of the campaign..</param>
        /// <param name="effectiveDateTime">The date time at which the campaign must be effective..</param>
        /// <param name="endDateRange">endDateRange.</param>
        /// <param name="searchMode">The campaign search mode..</param>
        /// <param name="searchTerm">The search term used by the query. The search term will search on the campaign name..</param>
        /// <param name="startDateRange">startDateRange.</param>
        public FindCampaignsRequest(string configurationName = default(string), string cultureName = default(string), Query query = default(Query), CampaignStatusEnum? campaignStatus = default(CampaignStatusEnum?), string campaignType = default(string), DateTime effectiveDateTime = default(DateTime), RangeDateTime endDateRange = default(RangeDateTime), SearchModeEnum? searchMode = default(SearchModeEnum?), string searchTerm = default(string), RangeDateTime startDateRange = default(RangeDateTime))
        {
            // to ensure "cultureName" is required (not null)
            this.CultureName = cultureName ?? throw new ArgumentNullException("cultureName is a required property for FindCampaignsRequest and cannot be null");
            this.ConfigurationName = configurationName;
            this.Query = query;
            this.CampaignStatus = campaignStatus;
            this.CampaignType = campaignType;
            this.EffectiveDateTime = effectiveDateTime;
            this.EndDateRange = endDateRange;
            this.SearchMode = searchMode;
            this.SearchTerm = searchTerm;
            this.StartDateRange = startDateRange;
        }

        /// <summary>
        /// The name of the configuration to use to process this request
        /// </summary>
        /// <value>The name of the configuration to use to process this request</value>
        [DataMember(Name = "configurationName", EmitDefaultValue = false)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// The culture (language) to use to process the request (en-US)
        /// </summary>
        /// <value>The culture (language) to use to process the request (en-US)</value>
        [DataMember(Name = "cultureName", IsRequired = true, EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public Query Query { get; set; }

        /// <summary>
        /// The type of the campaign.
        /// </summary>
        /// <value>The type of the campaign.</value>
        [DataMember(Name = "campaignType", EmitDefaultValue = false)]
        public string CampaignType { get; set; }

        /// <summary>
        /// The date time at which the campaign must be effective.
        /// </summary>
        /// <value>The date time at which the campaign must be effective.</value>
        [DataMember(Name = "effectiveDateTime", EmitDefaultValue = false)]
        public DateTime EffectiveDateTime { get; set; }

        /// <summary>
        /// Gets or Sets EndDateRange
        /// </summary>
        [DataMember(Name = "endDateRange", EmitDefaultValue = false)]
        public RangeDateTime EndDateRange { get; set; }

        /// <summary>
        /// The search term used by the query. The search term will search on the campaign name.
        /// </summary>
        /// <value>The search term used by the query. The search term will search on the campaign name.</value>
        [DataMember(Name = "searchTerm", EmitDefaultValue = false)]
        public string SearchTerm { get; set; }

        /// <summary>
        /// Gets or Sets StartDateRange
        /// </summary>
        [DataMember(Name = "startDateRange", EmitDefaultValue = false)]
        public RangeDateTime StartDateRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindCampaignsRequest {\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  CampaignStatus: ").Append(CampaignStatus).Append("\n");
            sb.Append("  CampaignType: ").Append(CampaignType).Append("\n");
            sb.Append("  EffectiveDateTime: ").Append(EffectiveDateTime).Append("\n");
            sb.Append("  EndDateRange: ").Append(EndDateRange).Append("\n");
            sb.Append("  SearchMode: ").Append(SearchMode).Append("\n");
            sb.Append("  SearchTerm: ").Append(SearchTerm).Append("\n");
            sb.Append("  StartDateRange: ").Append(StartDateRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindCampaignsRequest);
        }

        /// <summary>
        /// Returns true if FindCampaignsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindCampaignsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindCampaignsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.CampaignStatus == input.CampaignStatus ||
                    this.CampaignStatus.Equals(input.CampaignStatus)
                ) && 
                (
                    this.CampaignType == input.CampaignType ||
                    (this.CampaignType != null &&
                    this.CampaignType.Equals(input.CampaignType))
                ) && 
                (
                    this.EffectiveDateTime == input.EffectiveDateTime ||
                    (this.EffectiveDateTime != null &&
                    this.EffectiveDateTime.Equals(input.EffectiveDateTime))
                ) && 
                (
                    this.EndDateRange == input.EndDateRange ||
                    (this.EndDateRange != null &&
                    this.EndDateRange.Equals(input.EndDateRange))
                ) && 
                (
                    this.SearchMode == input.SearchMode ||
                    this.SearchMode.Equals(input.SearchMode)
                ) && 
                (
                    this.SearchTerm == input.SearchTerm ||
                    (this.SearchTerm != null &&
                    this.SearchTerm.Equals(input.SearchTerm))
                ) && 
                (
                    this.StartDateRange == input.StartDateRange ||
                    (this.StartDateRange != null &&
                    this.StartDateRange.Equals(input.StartDateRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigurationName != null)
                    hashCode = hashCode * 59 + this.ConfigurationName.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                hashCode = hashCode * 59 + this.CampaignStatus.GetHashCode();
                if (this.CampaignType != null)
                    hashCode = hashCode * 59 + this.CampaignType.GetHashCode();
                if (this.EffectiveDateTime != null)
                    hashCode = hashCode * 59 + this.EffectiveDateTime.GetHashCode();
                if (this.EndDateRange != null)
                    hashCode = hashCode * 59 + this.EndDateRange.GetHashCode();
                hashCode = hashCode * 59 + this.SearchMode.GetHashCode();
                if (this.SearchTerm != null)
                    hashCode = hashCode * 59 + this.SearchTerm.GetHashCode();
                if (this.StartDateRange != null)
                    hashCode = hashCode * 59 + this.StartDateRange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
