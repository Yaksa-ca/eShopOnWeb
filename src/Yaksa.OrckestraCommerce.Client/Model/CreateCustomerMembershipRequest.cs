/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Membership represents a set of Authorization rules applied to a Customer.
    /// </summary>
    [DataContract(Name = "CreateCustomerMembershipRequest")]
    public partial class CreateCustomerMembershipRequest : IEquatable<CreateCustomerMembershipRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomerMembershipRequest" /> class.
        /// </summary>
        /// <param name="email">The Email of the customer.</param>
        /// <param name="firstName">The FirstName of the customer.</param>
        /// <param name="id">The unique id of the Customer.</param>
        /// <param name="language">Gets or sets the preferred communication language of the customer..</param>
        /// <param name="lastName">The LastName of the customer.</param>
        /// <param name="password">The Password of the customer.</param>
        /// <param name="passwordAnswer">The &#39;Answer&#39; for the password &#39;question and andswer&#39;.</param>
        /// <param name="passwordQuestion">The &#39;Question&#39; for the password &#39;question and andswer&#39;.</param>
        /// <param name="username">The UserName of the customer.</param>
        public CreateCustomerMembershipRequest(string email = default(string), string firstName = default(string), string id = default(string), string language = default(string), string lastName = default(string), string password = default(string), string passwordAnswer = default(string), string passwordQuestion = default(string), string username = default(string))
        {
            this.Email = email;
            this.FirstName = firstName;
            this.Id = id;
            this.Language = language;
            this.LastName = lastName;
            this.Password = password;
            this.PasswordAnswer = passwordAnswer;
            this.PasswordQuestion = passwordQuestion;
            this.Username = username;
        }

        /// <summary>
        /// The Email of the customer
        /// </summary>
        /// <value>The Email of the customer</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The FirstName of the customer
        /// </summary>
        /// <value>The FirstName of the customer</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The unique id of the Customer
        /// </summary>
        /// <value>The unique id of the Customer</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the preferred communication language of the customer.
        /// </summary>
        /// <value>Gets or sets the preferred communication language of the customer.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The LastName of the customer
        /// </summary>
        /// <value>The LastName of the customer</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The Password of the customer
        /// </summary>
        /// <value>The Password of the customer</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// The &#39;Answer&#39; for the password &#39;question and andswer&#39;
        /// </summary>
        /// <value>The &#39;Answer&#39; for the password &#39;question and andswer&#39;</value>
        [DataMember(Name = "passwordAnswer", EmitDefaultValue = false)]
        public string PasswordAnswer { get; set; }

        /// <summary>
        /// The &#39;Question&#39; for the password &#39;question and andswer&#39;
        /// </summary>
        /// <value>The &#39;Question&#39; for the password &#39;question and andswer&#39;</value>
        [DataMember(Name = "passwordQuestion", EmitDefaultValue = false)]
        public string PasswordQuestion { get; set; }

        /// <summary>
        /// The UserName of the customer
        /// </summary>
        /// <value>The UserName of the customer</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCustomerMembershipRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PasswordAnswer: ").Append(PasswordAnswer).Append("\n");
            sb.Append("  PasswordQuestion: ").Append(PasswordQuestion).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCustomerMembershipRequest);
        }

        /// <summary>
        /// Returns true if CreateCustomerMembershipRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCustomerMembershipRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCustomerMembershipRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.PasswordAnswer == input.PasswordAnswer ||
                    (this.PasswordAnswer != null &&
                    this.PasswordAnswer.Equals(input.PasswordAnswer))
                ) && 
                (
                    this.PasswordQuestion == input.PasswordQuestion ||
                    (this.PasswordQuestion != null &&
                    this.PasswordQuestion.Equals(input.PasswordQuestion))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.PasswordAnswer != null)
                    hashCode = hashCode * 59 + this.PasswordAnswer.GetHashCode();
                if (this.PasswordQuestion != null)
                    hashCode = hashCode * 59 + this.PasswordQuestion.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
