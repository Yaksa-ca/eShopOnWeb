/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Processed orders.
    /// </summary>
    [DataContract(Name = "ReleaseOrderLockForShipmentRequest")]
    public partial class ReleaseOrderLockForShipmentRequest : IEquatable<ReleaseOrderLockForShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseOrderLockForShipmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReleaseOrderLockForShipmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReleaseOrderLockForShipmentRequest" /> class.
        /// </summary>
        /// <param name="shipmentId">The shipment requesting a lock on the order. (required).</param>
        /// <param name="timeout">The timeout(in seconds) after which the lock will expire. Optional..</param>
        public ReleaseOrderLockForShipmentRequest(string shipmentId = default(string), double timeout = default(double))
        {
            // to ensure "shipmentId" is required (not null)
            this.ShipmentId = shipmentId ?? throw new ArgumentNullException("shipmentId is a required property for ReleaseOrderLockForShipmentRequest and cannot be null");
            this.Timeout = timeout;
        }

        /// <summary>
        /// The shipment requesting a lock on the order.
        /// </summary>
        /// <value>The shipment requesting a lock on the order.</value>
        [DataMember(Name = "shipmentId", IsRequired = true, EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// The timeout(in seconds) after which the lock will expire. Optional.
        /// </summary>
        /// <value>The timeout(in seconds) after which the lock will expire. Optional.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public double Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReleaseOrderLockForShipmentRequest {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReleaseOrderLockForShipmentRequest);
        }

        /// <summary>
        /// Returns true if ReleaseOrderLockForShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReleaseOrderLockForShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReleaseOrderLockForShipmentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
