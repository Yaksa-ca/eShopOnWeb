/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Catalogs are entities which represents markets and buyable Products organized in Categories.
    /// </summary>
    [DataContract(Name = "UpdateCatalogRequest")]
    public partial class UpdateCatalogRequest : IEquatable<UpdateCatalogRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCatalogRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateCatalogRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCatalogRequest" /> class.
        /// </summary>
        /// <param name="defaultLanguage">The catalog default language. (required).</param>
        /// <param name="description">The catalog description..</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="endDate">The catalog ending date..</param>
        /// <param name="isActive">Whether the catalog is active..</param>
        /// <param name="keepModifications">A value indicating whether product modifications will remain intact when OverrideParent is set to false..</param>
        /// <param name="languages">The collection of languages (cultures) supported by this catalog..</param>
        /// <param name="overrideParent">A value indicating whether the products has overridden values in the current Sales scope..</param>
        /// <param name="startDate">The catalog starting date..</param>
        public UpdateCatalogRequest(string defaultLanguage = default(string), string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), DateTime endDate = default(DateTime), bool isActive = default(bool), bool keepModifications = default(bool), List<string> languages = default(List<string>), bool overrideParent = default(bool), DateTime startDate = default(DateTime))
        {
            // to ensure "defaultLanguage" is required (not null)
            this.DefaultLanguage = defaultLanguage ?? throw new ArgumentNullException("defaultLanguage is a required property for UpdateCatalogRequest and cannot be null");
            this.Description = description;
            this.DisplayName = displayName;
            this.EndDate = endDate;
            this.IsActive = isActive;
            this.KeepModifications = keepModifications;
            this.Languages = languages;
            this.OverrideParent = overrideParent;
            this.StartDate = startDate;
        }

        /// <summary>
        /// The catalog default language.
        /// </summary>
        /// <value>The catalog default language.</value>
        [DataMember(Name = "defaultLanguage", IsRequired = true, EmitDefaultValue = false)]
        public string DefaultLanguage { get; set; }

        /// <summary>
        /// The catalog description.
        /// </summary>
        /// <value>The catalog description.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The catalog ending date.
        /// </summary>
        /// <value>The catalog ending date.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Whether the catalog is active.
        /// </summary>
        /// <value>Whether the catalog is active.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// A value indicating whether product modifications will remain intact when OverrideParent is set to false.
        /// </summary>
        /// <value>A value indicating whether product modifications will remain intact when OverrideParent is set to false.</value>
        [DataMember(Name = "keepModifications", EmitDefaultValue = true)]
        public bool KeepModifications { get; set; }

        /// <summary>
        /// The collection of languages (cultures) supported by this catalog.
        /// </summary>
        /// <value>The collection of languages (cultures) supported by this catalog.</value>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<string> Languages { get; set; }

        /// <summary>
        /// A value indicating whether the products has overridden values in the current Sales scope.
        /// </summary>
        /// <value>A value indicating whether the products has overridden values in the current Sales scope.</value>
        [DataMember(Name = "overrideParent", EmitDefaultValue = true)]
        public bool OverrideParent { get; set; }

        /// <summary>
        /// The catalog starting date.
        /// </summary>
        /// <value>The catalog starting date.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCatalogRequest {\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  KeepModifications: ").Append(KeepModifications).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  OverrideParent: ").Append(OverrideParent).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCatalogRequest);
        }

        /// <summary>
        /// Returns true if UpdateCatalogRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCatalogRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCatalogRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultLanguage == input.DefaultLanguage ||
                    (this.DefaultLanguage != null &&
                    this.DefaultLanguage.Equals(input.DefaultLanguage))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.KeepModifications == input.KeepModifications ||
                    this.KeepModifications.Equals(input.KeepModifications)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.OverrideParent == input.OverrideParent ||
                    this.OverrideParent.Equals(input.OverrideParent)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultLanguage.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                hashCode = hashCode * 59 + this.KeepModifications.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                hashCode = hashCode * 59 + this.OverrideParent.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
