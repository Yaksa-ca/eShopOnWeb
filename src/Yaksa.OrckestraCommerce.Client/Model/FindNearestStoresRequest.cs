/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Stores are entities which represents physical stores or an online/web stores.
    /// </summary>
    [DataContract(Name = "FindNearestStoresRequest")]
    public partial class FindNearestStoresRequest : IEquatable<FindNearestStoresRequest>, IValidatableObject
    {
        /// <summary>
        /// The fulfillment method type used to filter the stores.
        /// </summary>
        /// <value>The fulfillment method type used to filter the stores.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentMethodTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum PickUp for value: PickUp
            /// </summary>
            [EnumMember(Value = "PickUp")]
            PickUp = 2,

            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 3,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 4,

            /// <summary>
            /// Enum ShipToStore for value: ShipToStore
            /// </summary>
            [EnumMember(Value = "ShipToStore")]
            ShipToStore = 5

        }


        /// <summary>
        /// The fulfillment method type used to filter the stores.
        /// </summary>
        /// <value>The fulfillment method type used to filter the stores.</value>
        [DataMember(Name = "fulfillmentMethodType", EmitDefaultValue = false)]
        public FulfillmentMethodTypeEnum? FulfillmentMethodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindNearestStoresRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="fulfillmentMethodType">The fulfillment method type used to filter the stores..</param>
        /// <param name="maximumItemsCount">The maximum number of stores.</param>
        /// <param name="searchTerms">The search terms..</param>
        /// <param name="startingIndex">The starting index used to find the stores.</param>
        public FindNearestStoresRequest(string scopeId = default(string), FulfillmentMethodTypeEnum? fulfillmentMethodType = default(FulfillmentMethodTypeEnum?), int maximumItemsCount = default(int), string searchTerms = default(string), int startingIndex = default(int))
        {
            this.ScopeId = scopeId;
            this.FulfillmentMethodType = fulfillmentMethodType;
            this.MaximumItemsCount = maximumItemsCount;
            this.SearchTerms = searchTerms;
            this.StartingIndex = startingIndex;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The maximum number of stores
        /// </summary>
        /// <value>The maximum number of stores</value>
        [DataMember(Name = "maximumItemsCount", EmitDefaultValue = false)]
        public int MaximumItemsCount { get; set; }

        /// <summary>
        /// The search terms.
        /// </summary>
        /// <value>The search terms.</value>
        [DataMember(Name = "searchTerms", EmitDefaultValue = false)]
        public string SearchTerms { get; set; }

        /// <summary>
        /// The starting index used to find the stores
        /// </summary>
        /// <value>The starting index used to find the stores</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindNearestStoresRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  FulfillmentMethodType: ").Append(FulfillmentMethodType).Append("\n");
            sb.Append("  MaximumItemsCount: ").Append(MaximumItemsCount).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindNearestStoresRequest);
        }

        /// <summary>
        /// Returns true if FindNearestStoresRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindNearestStoresRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindNearestStoresRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.FulfillmentMethodType == input.FulfillmentMethodType ||
                    this.FulfillmentMethodType.Equals(input.FulfillmentMethodType)
                ) && 
                (
                    this.MaximumItemsCount == input.MaximumItemsCount ||
                    this.MaximumItemsCount.Equals(input.MaximumItemsCount)
                ) && 
                (
                    this.SearchTerms == input.SearchTerms ||
                    (this.SearchTerms != null &&
                    this.SearchTerms.Equals(input.SearchTerms))
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                hashCode = hashCode * 59 + this.FulfillmentMethodType.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItemsCount.GetHashCode();
                if (this.SearchTerms != null)
                    hashCode = hashCode * 59 + this.SearchTerms.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
