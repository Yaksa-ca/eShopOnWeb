/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// CategoryTreeNode
    /// </summary>
    [DataContract(Name = "CategoryTreeNode")]
    public partial class CategoryTreeNode : IEquatable<CategoryTreeNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryTreeNode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CategoryTreeNode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryTreeNode" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="childNodes">The child nodes as a list. This collection can be empty even if HasChildNodes is true. This means that the collection was not fetched from the service.</param>
        /// <param name="displayName">The display name.</param>
        /// <param name="hasChildNodes">A value indicating whether this node has child nodes.</param>
        /// <param name="path">path.</param>
        /// <param name="productCount">The product count. The number of products directly under this category.</param>
        /// <param name="sequenceNumber">The number used for ordering the CategoryTreeNode in a list. An integer that allows the ordering of the category  tree nodes when they are presented in a list.No restriction is given for the number (e.g. it allows two category tree nodes to have the same value for this property)..</param>
        public CategoryTreeNode(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), List<CategoryTreeNode> childNodes = default(List<CategoryTreeNode>), string displayName = default(string), bool hasChildNodes = default(bool), CategoryTreePath path = default(CategoryTreePath), long productCount = default(long), int sequenceNumber = default(int))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for CategoryTreeNode and cannot be null");
            this.PropertyBag = propertyBag;
            this.ChildNodes = childNodes;
            this.DisplayName = displayName;
            this.HasChildNodes = hasChildNodes;
            this.Path = path;
            this.ProductCount = productCount;
            this.SequenceNumber = sequenceNumber;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The child nodes as a list. This collection can be empty even if HasChildNodes is true. This means that the collection was not fetched from the service
        /// </summary>
        /// <value>The child nodes as a list. This collection can be empty even if HasChildNodes is true. This means that the collection was not fetched from the service</value>
        [DataMember(Name = "childNodes", EmitDefaultValue = false)]
        public List<CategoryTreeNode> ChildNodes { get; set; }

        /// <summary>
        /// The display name
        /// </summary>
        /// <value>The display name</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A value indicating whether this node has child nodes
        /// </summary>
        /// <value>A value indicating whether this node has child nodes</value>
        [DataMember(Name = "hasChildNodes", EmitDefaultValue = true)]
        public bool HasChildNodes { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public CategoryTreePath Path { get; set; }

        /// <summary>
        /// The product count. The number of products directly under this category
        /// </summary>
        /// <value>The product count. The number of products directly under this category</value>
        [DataMember(Name = "productCount", EmitDefaultValue = false)]
        public long ProductCount { get; set; }

        /// <summary>
        /// The number used for ordering the CategoryTreeNode in a list. An integer that allows the ordering of the category  tree nodes when they are presented in a list.No restriction is given for the number (e.g. it allows two category tree nodes to have the same value for this property).
        /// </summary>
        /// <value>The number used for ordering the CategoryTreeNode in a list. An integer that allows the ordering of the category  tree nodes when they are presented in a list.No restriction is given for the number (e.g. it allows two category tree nodes to have the same value for this property).</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryTreeNode {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  ChildNodes: ").Append(ChildNodes).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  HasChildNodes: ").Append(HasChildNodes).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ProductCount: ").Append(ProductCount).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CategoryTreeNode);
        }

        /// <summary>
        /// Returns true if CategoryTreeNode instances are equal
        /// </summary>
        /// <param name="input">Instance of CategoryTreeNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CategoryTreeNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.ChildNodes == input.ChildNodes ||
                    this.ChildNodes != null &&
                    input.ChildNodes != null &&
                    this.ChildNodes.SequenceEqual(input.ChildNodes)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.HasChildNodes == input.HasChildNodes ||
                    this.HasChildNodes.Equals(input.HasChildNodes)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ProductCount == input.ProductCount ||
                    this.ProductCount.Equals(input.ProductCount)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.ChildNodes != null)
                    hashCode = hashCode * 59 + this.ChildNodes.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.HasChildNodes.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                hashCode = hashCode * 59 + this.ProductCount.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
