/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// MissionItem
    /// </summary>
    [DataContract(Name = "MissionItem")]
    public partial class MissionItem : IEquatable<MissionItem>, IValidatableObject
    {
        /// <summary>
        /// the mission item picking condition.
        /// </summary>
        /// <value>the mission item picking condition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PickingConditionEnum
        {
            /// <summary>
            /// Enum AllToBePicked for value: AllToBePicked
            /// </summary>
            [EnumMember(Value = "AllToBePicked")]
            AllToBePicked = 1,

            /// <summary>
            /// Enum AllowPartiallyPicked for value: AllowPartiallyPicked
            /// </summary>
            [EnumMember(Value = "AllowPartiallyPicked")]
            AllowPartiallyPicked = 2,

            /// <summary>
            /// Enum AllowAllOrNothingToBePicked for value: AllowAllOrNothingToBePicked
            /// </summary>
            [EnumMember(Value = "AllowAllOrNothingToBePicked")]
            AllowAllOrNothingToBePicked = 3

        }


        /// <summary>
        /// the mission item picking condition.
        /// </summary>
        /// <value>the mission item picking condition.</value>
        [DataMember(Name = "pickingCondition", EmitDefaultValue = false)]
        public PickingConditionEnum? PickingCondition { get; set; }
        /// <summary>
        /// the mission item status
        /// </summary>
        /// <value>the mission item status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum NonePicked for value: NonePicked
            /// </summary>
            [EnumMember(Value = "NonePicked")]
            NonePicked = 1,

            /// <summary>
            /// Enum AllPicked for value: AllPicked
            /// </summary>
            [EnumMember(Value = "AllPicked")]
            AllPicked = 2,

            /// <summary>
            /// Enum PartiallyPicked for value: PartiallyPicked
            /// </summary>
            [EnumMember(Value = "PartiallyPicked")]
            PartiallyPicked = 3

        }


        /// <summary>
        /// the mission item status
        /// </summary>
        /// <value>the mission item status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MissionItem" /> class.
        /// </summary>
        /// <param name="catalogId">the catalog identifier..</param>
        /// <param name="id">the picking mission item identifier..</param>
        /// <param name="lineItemId">the line item identifier..</param>
        /// <param name="orderId">the order identifier..</param>
        /// <param name="pickedQuantity">the picked quantity..</param>
        /// <param name="pickingCondition">the mission item picking condition..</param>
        /// <param name="productId">the product identifier..</param>
        /// <param name="requestedQuantity">the requested quantity..</param>
        /// <param name="shipmentId">the shipment identifier..</param>
        /// <param name="sku">the sku..</param>
        /// <param name="status">the mission item status.</param>
        /// <param name="variantId">the variant identifier..</param>
        public MissionItem(string catalogId = default(string), string id = default(string), string lineItemId = default(string), string orderId = default(string), double pickedQuantity = default(double), PickingConditionEnum? pickingCondition = default(PickingConditionEnum?), string productId = default(string), double requestedQuantity = default(double), string shipmentId = default(string), string sku = default(string), StatusEnum? status = default(StatusEnum?), string variantId = default(string))
        {
            this.CatalogId = catalogId;
            this.Id = id;
            this.LineItemId = lineItemId;
            this.OrderId = orderId;
            this.PickedQuantity = pickedQuantity;
            this.PickingCondition = pickingCondition;
            this.ProductId = productId;
            this.RequestedQuantity = requestedQuantity;
            this.ShipmentId = shipmentId;
            this.Sku = sku;
            this.Status = status;
            this.VariantId = variantId;
        }

        /// <summary>
        /// the catalog identifier.
        /// </summary>
        /// <value>the catalog identifier.</value>
        [DataMember(Name = "catalogId", EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// the picking mission item identifier.
        /// </summary>
        /// <value>the picking mission item identifier.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// the line item identifier.
        /// </summary>
        /// <value>the line item identifier.</value>
        [DataMember(Name = "lineItemId", EmitDefaultValue = false)]
        public string LineItemId { get; set; }

        /// <summary>
        /// the order identifier.
        /// </summary>
        /// <value>the order identifier.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// the picked quantity.
        /// </summary>
        /// <value>the picked quantity.</value>
        [DataMember(Name = "pickedQuantity", EmitDefaultValue = false)]
        public double PickedQuantity { get; set; }

        /// <summary>
        /// the product identifier.
        /// </summary>
        /// <value>the product identifier.</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// the requested quantity.
        /// </summary>
        /// <value>the requested quantity.</value>
        [DataMember(Name = "requestedQuantity", EmitDefaultValue = false)]
        public double RequestedQuantity { get; set; }

        /// <summary>
        /// the shipment identifier.
        /// </summary>
        /// <value>the shipment identifier.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// the sku.
        /// </summary>
        /// <value>the sku.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// the variant identifier.
        /// </summary>
        /// <value>the variant identifier.</value>
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MissionItem {\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PickedQuantity: ").Append(PickedQuantity).Append("\n");
            sb.Append("  PickingCondition: ").Append(PickingCondition).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  RequestedQuantity: ").Append(RequestedQuantity).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MissionItem);
        }

        /// <summary>
        /// Returns true if MissionItem instances are equal
        /// </summary>
        /// <param name="input">Instance of MissionItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MissionItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LineItemId == input.LineItemId ||
                    (this.LineItemId != null &&
                    this.LineItemId.Equals(input.LineItemId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PickedQuantity == input.PickedQuantity ||
                    this.PickedQuantity.Equals(input.PickedQuantity)
                ) && 
                (
                    this.PickingCondition == input.PickingCondition ||
                    this.PickingCondition.Equals(input.PickingCondition)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.RequestedQuantity == input.RequestedQuantity ||
                    this.RequestedQuantity.Equals(input.RequestedQuantity)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CatalogId != null)
                    hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LineItemId != null)
                    hashCode = hashCode * 59 + this.LineItemId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                hashCode = hashCode * 59 + this.PickedQuantity.GetHashCode();
                hashCode = hashCode * 59 + this.PickingCondition.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                hashCode = hashCode * 59 + this.RequestedQuantity.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
