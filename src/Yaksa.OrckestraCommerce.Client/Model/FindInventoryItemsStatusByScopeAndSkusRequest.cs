/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Inventory items are a combination of InventoryQuantity and InventorySchedules.
    /// </summary>
    [DataContract(Name = "FindInventoryItemsStatusByScopeAndSkusRequest")]
    public partial class FindInventoryItemsStatusByScopeAndSkusRequest : IEquatable<FindInventoryItemsStatusByScopeAndSkusRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindInventoryItemsStatusByScopeAndSkusRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FindInventoryItemsStatusByScopeAndSkusRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindInventoryItemsStatusByScopeAndSkusRequest" /> class.
        /// </summary>
        /// <param name="date">The date for which to retrieve InventoryItemStatus (required).</param>
        /// <param name="includeChildScopes">Includes the availabilities for the child scopes..</param>
        /// <param name="skus">Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus.</param>
        public FindInventoryItemsStatusByScopeAndSkusRequest(DateTime date = default(DateTime), bool includeChildScopes = default(bool), List<string> skus = default(List<string>))
        {
            this.Date = date;
            this.IncludeChildScopes = includeChildScopes;
            this.Skus = skus;
        }

        /// <summary>
        /// The date for which to retrieve InventoryItemStatus
        /// </summary>
        /// <value>The date for which to retrieve InventoryItemStatus</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Includes the availabilities for the child scopes.
        /// </summary>
        /// <value>Includes the availabilities for the child scopes.</value>
        [DataMember(Name = "includeChildScopes", EmitDefaultValue = true)]
        public bool IncludeChildScopes { get; set; }

        /// <summary>
        /// Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus
        /// </summary>
        /// <value>Sku which will be associated to the InventoryLocationId to retrieve InventoryItemStatus</value>
        [DataMember(Name = "skus", EmitDefaultValue = false)]
        public List<string> Skus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindInventoryItemsStatusByScopeAndSkusRequest {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  IncludeChildScopes: ").Append(IncludeChildScopes).Append("\n");
            sb.Append("  Skus: ").Append(Skus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindInventoryItemsStatusByScopeAndSkusRequest);
        }

        /// <summary>
        /// Returns true if FindInventoryItemsStatusByScopeAndSkusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindInventoryItemsStatusByScopeAndSkusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindInventoryItemsStatusByScopeAndSkusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.IncludeChildScopes == input.IncludeChildScopes ||
                    this.IncludeChildScopes.Equals(input.IncludeChildScopes)
                ) && 
                (
                    this.Skus == input.Skus ||
                    this.Skus != null &&
                    input.Skus != null &&
                    this.Skus.SequenceEqual(input.Skus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeChildScopes.GetHashCode();
                if (this.Skus != null)
                    hashCode = hashCode * 59 + this.Skus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
