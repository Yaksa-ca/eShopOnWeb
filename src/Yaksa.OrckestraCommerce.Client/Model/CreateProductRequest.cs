/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "CreateProductRequest")]
    public partial class CreateProductRequest : IEquatable<CreateProductRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProductRequest" /> class.
        /// </summary>
        /// <param name="active">A value indicating whether the Product is active or not..</param>
        /// <param name="brand">The brand of the product..</param>
        /// <param name="definitionName">The name (business key) of the definition to use for the product..</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="includeInSearch">Indicates whether or not the product should be included in the front-end search result..</param>
        /// <param name="itemFormat">The item format of the product..</param>
        /// <param name="listPrice">The default price for the product..</param>
        /// <param name="newProductDate">The date until which the product is flagged as a new product introduction..</param>
        /// <param name="parentCategory">The category to use as parent for the product..</param>
        /// <param name="productId">The ID (business key) to use for the product to create..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="publicationStatus">The publication status of the added product..</param>
        /// <param name="sellingMethod">The selling method of the product..</param>
        /// <param name="sku">The stock keeping unit code (SKU) of the product..</param>
        /// <param name="taxCategory">The tax category of the product..</param>
        /// <param name="unitOfMeasure">The unit of measure of the product..</param>
        /// <param name="weight">The weight of the product..</param>
        /// <param name="weightUOM">The unit of measure of the weight of the product..</param>
        public CreateProductRequest(bool active = default(bool), string brand = default(string), string definitionName = default(string), Dictionary<string, string> description = default(Dictionary<string, string>), Dictionary<string, string> displayName = default(Dictionary<string, string>), bool includeInSearch = default(bool), double itemFormat = default(double), double listPrice = default(double), DateTime newProductDate = default(DateTime), string parentCategory = default(string), string productId = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string publicationStatus = default(string), string sellingMethod = default(string), string sku = default(string), string taxCategory = default(string), string unitOfMeasure = default(string), double weight = default(double), string weightUOM = default(string))
        {
            this.Active = active;
            this.Brand = brand;
            this.DefinitionName = definitionName;
            this.Description = description;
            this.DisplayName = displayName;
            this.IncludeInSearch = includeInSearch;
            this.ItemFormat = itemFormat;
            this.ListPrice = listPrice;
            this.NewProductDate = newProductDate;
            this.ParentCategory = parentCategory;
            this.ProductId = productId;
            this.PropertyBag = propertyBag;
            this.PublicationStatus = publicationStatus;
            this.SellingMethod = sellingMethod;
            this.Sku = sku;
            this.TaxCategory = taxCategory;
            this.UnitOfMeasure = unitOfMeasure;
            this.Weight = weight;
            this.WeightUOM = weightUOM;
        }

        /// <summary>
        /// A value indicating whether the Product is active or not.
        /// </summary>
        /// <value>A value indicating whether the Product is active or not.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// The brand of the product.
        /// </summary>
        /// <value>The brand of the product.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// The name (business key) of the definition to use for the product.
        /// </summary>
        /// <value>The name (business key) of the definition to use for the product.</value>
        [DataMember(Name = "definitionName", EmitDefaultValue = false)]
        public string DefinitionName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Indicates whether or not the product should be included in the front-end search result.
        /// </summary>
        /// <value>Indicates whether or not the product should be included in the front-end search result.</value>
        [DataMember(Name = "includeInSearch", EmitDefaultValue = true)]
        public bool IncludeInSearch { get; set; }

        /// <summary>
        /// The item format of the product.
        /// </summary>
        /// <value>The item format of the product.</value>
        [DataMember(Name = "itemFormat", EmitDefaultValue = false)]
        public double ItemFormat { get; set; }

        /// <summary>
        /// The default price for the product.
        /// </summary>
        /// <value>The default price for the product.</value>
        [DataMember(Name = "listPrice", EmitDefaultValue = false)]
        public double ListPrice { get; set; }

        /// <summary>
        /// The date until which the product is flagged as a new product introduction.
        /// </summary>
        /// <value>The date until which the product is flagged as a new product introduction.</value>
        [DataMember(Name = "newProductDate", EmitDefaultValue = false)]
        public DateTime NewProductDate { get; set; }

        /// <summary>
        /// The category to use as parent for the product.
        /// </summary>
        /// <value>The category to use as parent for the product.</value>
        [DataMember(Name = "parentCategory", EmitDefaultValue = false)]
        public string ParentCategory { get; set; }

        /// <summary>
        /// The ID (business key) to use for the product to create.
        /// </summary>
        /// <value>The ID (business key) to use for the product to create.</value>
        [DataMember(Name = "productId", EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The publication status of the added product.
        /// </summary>
        /// <value>The publication status of the added product.</value>
        [DataMember(Name = "publicationStatus", EmitDefaultValue = false)]
        public string PublicationStatus { get; set; }

        /// <summary>
        /// The selling method of the product.
        /// </summary>
        /// <value>The selling method of the product.</value>
        [DataMember(Name = "sellingMethod", EmitDefaultValue = false)]
        public string SellingMethod { get; set; }

        /// <summary>
        /// The stock keeping unit code (SKU) of the product.
        /// </summary>
        /// <value>The stock keeping unit code (SKU) of the product.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// The tax category of the product.
        /// </summary>
        /// <value>The tax category of the product.</value>
        [DataMember(Name = "taxCategory", EmitDefaultValue = false)]
        public string TaxCategory { get; set; }

        /// <summary>
        /// The unit of measure of the product.
        /// </summary>
        /// <value>The unit of measure of the product.</value>
        [DataMember(Name = "unitOfMeasure", EmitDefaultValue = false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The weight of the product.
        /// </summary>
        /// <value>The weight of the product.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public double Weight { get; set; }

        /// <summary>
        /// The unit of measure of the weight of the product.
        /// </summary>
        /// <value>The unit of measure of the weight of the product.</value>
        [DataMember(Name = "weightUOM", EmitDefaultValue = false)]
        public string WeightUOM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateProductRequest {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  DefinitionName: ").Append(DefinitionName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IncludeInSearch: ").Append(IncludeInSearch).Append("\n");
            sb.Append("  ItemFormat: ").Append(ItemFormat).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  NewProductDate: ").Append(NewProductDate).Append("\n");
            sb.Append("  ParentCategory: ").Append(ParentCategory).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  PublicationStatus: ").Append(PublicationStatus).Append("\n");
            sb.Append("  SellingMethod: ").Append(SellingMethod).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightUOM: ").Append(WeightUOM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateProductRequest);
        }

        /// <summary>
        /// Returns true if CreateProductRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateProductRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateProductRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.DefinitionName == input.DefinitionName ||
                    (this.DefinitionName != null &&
                    this.DefinitionName.Equals(input.DefinitionName))
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.IncludeInSearch == input.IncludeInSearch ||
                    this.IncludeInSearch.Equals(input.IncludeInSearch)
                ) && 
                (
                    this.ItemFormat == input.ItemFormat ||
                    this.ItemFormat.Equals(input.ItemFormat)
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    this.ListPrice.Equals(input.ListPrice)
                ) && 
                (
                    this.NewProductDate == input.NewProductDate ||
                    (this.NewProductDate != null &&
                    this.NewProductDate.Equals(input.NewProductDate))
                ) && 
                (
                    this.ParentCategory == input.ParentCategory ||
                    (this.ParentCategory != null &&
                    this.ParentCategory.Equals(input.ParentCategory))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.PublicationStatus == input.PublicationStatus ||
                    (this.PublicationStatus != null &&
                    this.PublicationStatus.Equals(input.PublicationStatus))
                ) && 
                (
                    this.SellingMethod == input.SellingMethod ||
                    (this.SellingMethod != null &&
                    this.SellingMethod.Equals(input.SellingMethod))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.WeightUOM == input.WeightUOM ||
                    (this.WeightUOM != null &&
                    this.WeightUOM.Equals(input.WeightUOM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.DefinitionName != null)
                    hashCode = hashCode * 59 + this.DefinitionName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInSearch.GetHashCode();
                hashCode = hashCode * 59 + this.ItemFormat.GetHashCode();
                hashCode = hashCode * 59 + this.ListPrice.GetHashCode();
                if (this.NewProductDate != null)
                    hashCode = hashCode * 59 + this.NewProductDate.GetHashCode();
                if (this.ParentCategory != null)
                    hashCode = hashCode * 59 + this.ParentCategory.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.PublicationStatus != null)
                    hashCode = hashCode * 59 + this.PublicationStatus.GetHashCode();
                if (this.SellingMethod != null)
                    hashCode = hashCode * 59 + this.SellingMethod.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightUOM != null)
                    hashCode = hashCode * 59 + this.WeightUOM.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
