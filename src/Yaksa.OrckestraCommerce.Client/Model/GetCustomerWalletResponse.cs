/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// GetCustomerWalletResponse
    /// </summary>
    [DataContract(Name = "GetCustomerWalletResponse")]
    public partial class GetCustomerWalletResponse : IEquatable<GetCustomerWalletResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomerWalletResponse" /> class.
        /// </summary>
        /// <param name="scope">The scope of the wallet.</param>
        /// <param name="customerId">The Id of the customer this wallet belongs to.</param>
        /// <param name="creditCards">The list of credit cards in the customer wallet.</param>
        /// <param name="hasDefaultAddress">Gets or sets a value indicating if the customer account has a default address.</param>
        public GetCustomerWalletResponse(string scope = default(string), string customerId = default(string), List<CreditCard> creditCards = default(List<CreditCard>), bool hasDefaultAddress = default(bool))
        {
            this.Scope = scope;
            this.CustomerId = customerId;
            this.CreditCards = creditCards;
            this.HasDefaultAddress = hasDefaultAddress;
        }

        /// <summary>
        /// The scope of the wallet
        /// </summary>
        /// <value>The scope of the wallet</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// The Id of the customer this wallet belongs to
        /// </summary>
        /// <value>The Id of the customer this wallet belongs to</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The list of credit cards in the customer wallet
        /// </summary>
        /// <value>The list of credit cards in the customer wallet</value>
        [DataMember(Name = "creditCards", EmitDefaultValue = false)]
        public List<CreditCard> CreditCards { get; set; }

        /// <summary>
        /// Gets or sets a value indicating if the customer account has a default address
        /// </summary>
        /// <value>Gets or sets a value indicating if the customer account has a default address</value>
        [DataMember(Name = "hasDefaultAddress", EmitDefaultValue = true)]
        public bool HasDefaultAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCustomerWalletResponse {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CreditCards: ").Append(CreditCards).Append("\n");
            sb.Append("  HasDefaultAddress: ").Append(HasDefaultAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCustomerWalletResponse);
        }

        /// <summary>
        /// Returns true if GetCustomerWalletResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCustomerWalletResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCustomerWalletResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.CreditCards == input.CreditCards ||
                    this.CreditCards != null &&
                    input.CreditCards != null &&
                    this.CreditCards.SequenceEqual(input.CreditCards)
                ) && 
                (
                    this.HasDefaultAddress == input.HasDefaultAddress ||
                    this.HasDefaultAddress.Equals(input.HasDefaultAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.CreditCards != null)
                    hashCode = hashCode * 59 + this.CreditCards.GetHashCode();
                hashCode = hashCode * 59 + this.HasDefaultAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
