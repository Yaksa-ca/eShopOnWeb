/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// VariantPriceExportInfo
    /// </summary>
    [DataContract(Name = "VariantPriceExportInfo")]
    public partial class VariantPriceExportInfo : IEquatable<VariantPriceExportInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariantPriceExportInfo" /> class.
        /// </summary>
        /// <param name="ps">The prices for each price list..</param>
        /// <param name="vid">The unique identifier of the variant of the main product..</param>
        public VariantPriceExportInfo(List<PriceExportInfo> ps = default(List<PriceExportInfo>), string vid = default(string))
        {
            this.Ps = ps;
            this.Vid = vid;
        }

        /// <summary>
        /// The prices for each price list.
        /// </summary>
        /// <value>The prices for each price list.</value>
        [DataMember(Name = "ps", EmitDefaultValue = false)]
        public List<PriceExportInfo> Ps { get; set; }

        /// <summary>
        /// The unique identifier of the variant of the main product.
        /// </summary>
        /// <value>The unique identifier of the variant of the main product.</value>
        [DataMember(Name = "vid", EmitDefaultValue = false)]
        public string Vid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariantPriceExportInfo {\n");
            sb.Append("  Ps: ").Append(Ps).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariantPriceExportInfo);
        }

        /// <summary>
        /// Returns true if VariantPriceExportInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VariantPriceExportInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariantPriceExportInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ps == input.Ps ||
                    this.Ps != null &&
                    input.Ps != null &&
                    this.Ps.SequenceEqual(input.Ps)
                ) && 
                (
                    this.Vid == input.Vid ||
                    (this.Vid != null &&
                    this.Vid.Equals(input.Vid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ps != null)
                    hashCode = hashCode * 59 + this.Ps.GetHashCode();
                if (this.Vid != null)
                    hashCode = hashCode * 59 + this.Vid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
