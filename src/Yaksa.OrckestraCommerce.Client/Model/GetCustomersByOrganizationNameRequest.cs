/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Operations related to organizations such as create an organization, get an organization, updating an organization, ...
    /// </summary>
    [DataContract(Name = "GetCustomersByOrganizationNameRequest")]
    public partial class GetCustomersByOrganizationNameRequest : IEquatable<GetCustomersByOrganizationNameRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomersByOrganizationNameRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="includeAddresses">Specifies whether or not to fully load the collection of addresses linked to the customer..</param>
        /// <param name="maximumItems">The maximum items returned by the search query..</param>
        /// <param name="name">The organization name of the Customer to search for..</param>
        /// <param name="startingIndex">The starting index..</param>
        public GetCustomersByOrganizationNameRequest(string scopeId = default(string), bool includeAddresses = default(bool), int maximumItems = default(int), string name = default(string), int startingIndex = default(int))
        {
            this.ScopeId = scopeId;
            this.IncludeAddresses = includeAddresses;
            this.MaximumItems = maximumItems;
            this.Name = name;
            this.StartingIndex = startingIndex;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Specifies whether or not to fully load the collection of addresses linked to the customer.
        /// </summary>
        /// <value>Specifies whether or not to fully load the collection of addresses linked to the customer.</value>
        [DataMember(Name = "includeAddresses", EmitDefaultValue = true)]
        public bool IncludeAddresses { get; set; }

        /// <summary>
        /// The maximum items returned by the search query.
        /// </summary>
        /// <value>The maximum items returned by the search query.</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// The organization name of the Customer to search for.
        /// </summary>
        /// <value>The organization name of the Customer to search for.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The starting index.
        /// </summary>
        /// <value>The starting index.</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCustomersByOrganizationNameRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  IncludeAddresses: ").Append(IncludeAddresses).Append("\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCustomersByOrganizationNameRequest);
        }

        /// <summary>
        /// Returns true if GetCustomersByOrganizationNameRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCustomersByOrganizationNameRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCustomersByOrganizationNameRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.IncludeAddresses == input.IncludeAddresses ||
                    this.IncludeAddresses.Equals(input.IncludeAddresses)
                ) && 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeAddresses.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
