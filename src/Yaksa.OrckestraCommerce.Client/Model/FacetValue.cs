/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FacetValue
    /// </summary>
    [DataContract(Name = "FacetValue")]
    public partial class FacetValue : IEquatable<FacetValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FacetValue" /> class.
        /// </summary>
        /// <param name="count">the number of documents matching this range facet value..</param>
        /// <param name="displayName">the facet display name..</param>
        /// <param name="maximumValue">the maximum value of the range facet value..</param>
        /// <param name="minimumValue">the minimum of the range facet value..</param>
        /// <param name="value">the facet value..</param>
        public FacetValue(int count = default(int), string displayName = default(string), string maximumValue = default(string), string minimumValue = default(string), string value = default(string))
        {
            this.Count = count;
            this.DisplayName = displayName;
            this.MaximumValue = maximumValue;
            this.MinimumValue = minimumValue;
            this.Value = value;
        }

        /// <summary>
        /// the number of documents matching this range facet value.
        /// </summary>
        /// <value>the number of documents matching this range facet value.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// the facet display name.
        /// </summary>
        /// <value>the facet display name.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// the maximum value of the range facet value.
        /// </summary>
        /// <value>the maximum value of the range facet value.</value>
        [DataMember(Name = "maximumValue", EmitDefaultValue = false)]
        public string MaximumValue { get; set; }

        /// <summary>
        /// the minimum of the range facet value.
        /// </summary>
        /// <value>the minimum of the range facet value.</value>
        [DataMember(Name = "minimumValue", EmitDefaultValue = false)]
        public string MinimumValue { get; set; }

        /// <summary>
        /// the facet value.
        /// </summary>
        /// <value>the facet value.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FacetValue {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  MaximumValue: ").Append(MaximumValue).Append("\n");
            sb.Append("  MinimumValue: ").Append(MinimumValue).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FacetValue);
        }

        /// <summary>
        /// Returns true if FacetValue instances are equal
        /// </summary>
        /// <param name="input">Instance of FacetValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FacetValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.MaximumValue == input.MaximumValue ||
                    (this.MaximumValue != null &&
                    this.MaximumValue.Equals(input.MaximumValue))
                ) && 
                (
                    this.MinimumValue == input.MinimumValue ||
                    (this.MinimumValue != null &&
                    this.MinimumValue.Equals(input.MinimumValue))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.MaximumValue != null)
                    hashCode = hashCode * 59 + this.MaximumValue.GetHashCode();
                if (this.MinimumValue != null)
                    hashCode = hashCode * 59 + this.MinimumValue.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
