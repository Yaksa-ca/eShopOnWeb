/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "CreateFulfillmentCarrierManifestRequest")]
    public partial class CreateFulfillmentCarrierManifestRequest : IEquatable<CreateFulfillmentCarrierManifestRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFulfillmentCarrierManifestRequest" /> class.
        /// </summary>
        /// <param name="carrierAccountId">The optional carrier account id used for the package..</param>
        /// <param name="carrierAccountName">The optional carrier account name used for the package..</param>
        /// <param name="carrierName">The optional carrier name used for the package..</param>
        /// <param name="carrierServiceLevel">The optional carrier sevice level used for the package..</param>
        /// <param name="cultureName">The name of the culture (language) to use to render any messages..</param>
        /// <param name="fulfillmentLocationId">The fulfillment location identifier..</param>
        /// <param name="packageIds">The package&#39;s ids to create a manifest for. An empty list will do all unmanifested packages for this carrier..</param>
        public CreateFulfillmentCarrierManifestRequest(string carrierAccountId = default(string), string carrierAccountName = default(string), string carrierName = default(string), string carrierServiceLevel = default(string), string cultureName = default(string), string fulfillmentLocationId = default(string), List<string> packageIds = default(List<string>))
        {
            this.CarrierAccountId = carrierAccountId;
            this.CarrierAccountName = carrierAccountName;
            this.CarrierName = carrierName;
            this.CarrierServiceLevel = carrierServiceLevel;
            this.CultureName = cultureName;
            this.FulfillmentLocationId = fulfillmentLocationId;
            this.PackageIds = packageIds;
        }

        /// <summary>
        /// The optional carrier account id used for the package.
        /// </summary>
        /// <value>The optional carrier account id used for the package.</value>
        [DataMember(Name = "carrierAccountId", EmitDefaultValue = false)]
        public string CarrierAccountId { get; set; }

        /// <summary>
        /// The optional carrier account name used for the package.
        /// </summary>
        /// <value>The optional carrier account name used for the package.</value>
        [DataMember(Name = "carrierAccountName", EmitDefaultValue = false)]
        public string CarrierAccountName { get; set; }

        /// <summary>
        /// The optional carrier name used for the package.
        /// </summary>
        /// <value>The optional carrier name used for the package.</value>
        [DataMember(Name = "carrierName", EmitDefaultValue = false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// The optional carrier sevice level used for the package.
        /// </summary>
        /// <value>The optional carrier sevice level used for the package.</value>
        [DataMember(Name = "carrierServiceLevel", EmitDefaultValue = false)]
        public string CarrierServiceLevel { get; set; }

        /// <summary>
        /// The name of the culture (language) to use to render any messages.
        /// </summary>
        /// <value>The name of the culture (language) to use to render any messages.</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// The fulfillment location identifier.
        /// </summary>
        /// <value>The fulfillment location identifier.</value>
        [DataMember(Name = "fulfillmentLocationId", EmitDefaultValue = false)]
        public string FulfillmentLocationId { get; set; }

        /// <summary>
        /// The package&#39;s ids to create a manifest for. An empty list will do all unmanifested packages for this carrier.
        /// </summary>
        /// <value>The package&#39;s ids to create a manifest for. An empty list will do all unmanifested packages for this carrier.</value>
        [DataMember(Name = "packageIds", EmitDefaultValue = false)]
        public List<string> PackageIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFulfillmentCarrierManifestRequest {\n");
            sb.Append("  CarrierAccountId: ").Append(CarrierAccountId).Append("\n");
            sb.Append("  CarrierAccountName: ").Append(CarrierAccountName).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  CarrierServiceLevel: ").Append(CarrierServiceLevel).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  FulfillmentLocationId: ").Append(FulfillmentLocationId).Append("\n");
            sb.Append("  PackageIds: ").Append(PackageIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFulfillmentCarrierManifestRequest);
        }

        /// <summary>
        /// Returns true if CreateFulfillmentCarrierManifestRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFulfillmentCarrierManifestRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFulfillmentCarrierManifestRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CarrierAccountId == input.CarrierAccountId ||
                    (this.CarrierAccountId != null &&
                    this.CarrierAccountId.Equals(input.CarrierAccountId))
                ) && 
                (
                    this.CarrierAccountName == input.CarrierAccountName ||
                    (this.CarrierAccountName != null &&
                    this.CarrierAccountName.Equals(input.CarrierAccountName))
                ) && 
                (
                    this.CarrierName == input.CarrierName ||
                    (this.CarrierName != null &&
                    this.CarrierName.Equals(input.CarrierName))
                ) && 
                (
                    this.CarrierServiceLevel == input.CarrierServiceLevel ||
                    (this.CarrierServiceLevel != null &&
                    this.CarrierServiceLevel.Equals(input.CarrierServiceLevel))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.FulfillmentLocationId == input.FulfillmentLocationId ||
                    (this.FulfillmentLocationId != null &&
                    this.FulfillmentLocationId.Equals(input.FulfillmentLocationId))
                ) && 
                (
                    this.PackageIds == input.PackageIds ||
                    this.PackageIds != null &&
                    input.PackageIds != null &&
                    this.PackageIds.SequenceEqual(input.PackageIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CarrierAccountId != null)
                    hashCode = hashCode * 59 + this.CarrierAccountId.GetHashCode();
                if (this.CarrierAccountName != null)
                    hashCode = hashCode * 59 + this.CarrierAccountName.GetHashCode();
                if (this.CarrierName != null)
                    hashCode = hashCode * 59 + this.CarrierName.GetHashCode();
                if (this.CarrierServiceLevel != null)
                    hashCode = hashCode * 59 + this.CarrierServiceLevel.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.FulfillmentLocationId != null)
                    hashCode = hashCode * 59 + this.FulfillmentLocationId.GetHashCode();
                if (this.PackageIds != null)
                    hashCode = hashCode * 59 + this.PackageIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
