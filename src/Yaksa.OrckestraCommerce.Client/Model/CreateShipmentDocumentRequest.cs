/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Orders are entities which represent an order of a customer.
    /// </summary>
    [DataContract(Name = "CreateShipmentDocumentRequest")]
    public partial class CreateShipmentDocumentRequest : IEquatable<CreateShipmentDocumentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShipmentDocumentRequest" /> class.
        /// </summary>
        /// <param name="additionalNotes">Additional notes relative to the shipment pickup confirmation..</param>
        /// <param name="contentType">The content type of the blob object..</param>
        /// <param name="document">The base64 string representation of the document..</param>
        /// <param name="documentType">The document type..</param>
        /// <param name="imageHeight">The image height..</param>
        /// <param name="imageWidth">The image width..</param>
        /// <param name="proofOfIdentity">The type of document used to identifty the recipient..</param>
        /// <param name="recipient">The name of the recipient..</param>
        public CreateShipmentDocumentRequest(string additionalNotes = default(string), string contentType = default(string), string document = default(string), string documentType = default(string), double imageHeight = default(double), double imageWidth = default(double), string proofOfIdentity = default(string), string recipient = default(string))
        {
            this.AdditionalNotes = additionalNotes;
            this.ContentType = contentType;
            this.Document = document;
            this.DocumentType = documentType;
            this.ImageHeight = imageHeight;
            this.ImageWidth = imageWidth;
            this.ProofOfIdentity = proofOfIdentity;
            this.Recipient = recipient;
        }

        /// <summary>
        /// Additional notes relative to the shipment pickup confirmation.
        /// </summary>
        /// <value>Additional notes relative to the shipment pickup confirmation.</value>
        [DataMember(Name = "additionalNotes", EmitDefaultValue = false)]
        public string AdditionalNotes { get; set; }

        /// <summary>
        /// The content type of the blob object.
        /// </summary>
        /// <value>The content type of the blob object.</value>
        [DataMember(Name = "contentType", EmitDefaultValue = false)]
        public string ContentType { get; set; }

        /// <summary>
        /// The base64 string representation of the document.
        /// </summary>
        /// <value>The base64 string representation of the document.</value>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public string Document { get; set; }

        /// <summary>
        /// The document type.
        /// </summary>
        /// <value>The document type.</value>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// The image height.
        /// </summary>
        /// <value>The image height.</value>
        [DataMember(Name = "imageHeight", EmitDefaultValue = false)]
        public double ImageHeight { get; set; }

        /// <summary>
        /// The image width.
        /// </summary>
        /// <value>The image width.</value>
        [DataMember(Name = "imageWidth", EmitDefaultValue = false)]
        public double ImageWidth { get; set; }

        /// <summary>
        /// The type of document used to identifty the recipient.
        /// </summary>
        /// <value>The type of document used to identifty the recipient.</value>
        [DataMember(Name = "proofOfIdentity", EmitDefaultValue = false)]
        public string ProofOfIdentity { get; set; }

        /// <summary>
        /// The name of the recipient.
        /// </summary>
        /// <value>The name of the recipient.</value>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateShipmentDocumentRequest {\n");
            sb.Append("  AdditionalNotes: ").Append(AdditionalNotes).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  ImageHeight: ").Append(ImageHeight).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  ProofOfIdentity: ").Append(ProofOfIdentity).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShipmentDocumentRequest);
        }

        /// <summary>
        /// Returns true if CreateShipmentDocumentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShipmentDocumentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShipmentDocumentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalNotes == input.AdditionalNotes ||
                    (this.AdditionalNotes != null &&
                    this.AdditionalNotes.Equals(input.AdditionalNotes))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.ImageHeight == input.ImageHeight ||
                    this.ImageHeight.Equals(input.ImageHeight)
                ) && 
                (
                    this.ImageWidth == input.ImageWidth ||
                    this.ImageWidth.Equals(input.ImageWidth)
                ) && 
                (
                    this.ProofOfIdentity == input.ProofOfIdentity ||
                    (this.ProofOfIdentity != null &&
                    this.ProofOfIdentity.Equals(input.ProofOfIdentity))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalNotes != null)
                    hashCode = hashCode * 59 + this.AdditionalNotes.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                hashCode = hashCode * 59 + this.ImageHeight.GetHashCode();
                hashCode = hashCode * 59 + this.ImageWidth.GetHashCode();
                if (this.ProofOfIdentity != null)
                    hashCode = hashCode * 59 + this.ProofOfIdentity.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
