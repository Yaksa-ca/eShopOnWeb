/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ConsumabilityRule
    /// </summary>
    [DataContract(Name = "ConsumabilityRule")]
    public partial class ConsumabilityRule : IEquatable<ConsumabilityRule>, IValidatableObject
    {
        /// <summary>
        /// The operation type of the rule
        /// </summary>
        /// <value>The operation type of the rule</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationEnum
        {
            /// <summary>
            /// Enum Equals for value: Equals
            /// </summary>
            [EnumMember(Value = "Equals")]
            Equals = 1,

            /// <summary>
            /// Enum DoesNotEqual for value: DoesNotEqual
            /// </summary>
            [EnumMember(Value = "DoesNotEqual")]
            DoesNotEqual = 2,

            /// <summary>
            /// Enum IsGreaterThan for value: IsGreaterThan
            /// </summary>
            [EnumMember(Value = "IsGreaterThan")]
            IsGreaterThan = 3,

            /// <summary>
            /// Enum IsGreaterThanOrEqualTo for value: IsGreaterThanOrEqualTo
            /// </summary>
            [EnumMember(Value = "IsGreaterThanOrEqualTo")]
            IsGreaterThanOrEqualTo = 4,

            /// <summary>
            /// Enum IsLessThan for value: IsLessThan
            /// </summary>
            [EnumMember(Value = "IsLessThan")]
            IsLessThan = 5,

            /// <summary>
            /// Enum IsLessThanOrEqualTo for value: IsLessThanOrEqualTo
            /// </summary>
            [EnumMember(Value = "IsLessThanOrEqualTo")]
            IsLessThanOrEqualTo = 6,

            /// <summary>
            /// Enum IsBetween for value: IsBetween
            /// </summary>
            [EnumMember(Value = "IsBetween")]
            IsBetween = 7,

            /// <summary>
            /// Enum IsNotBetween for value: IsNotBetween
            /// </summary>
            [EnumMember(Value = "IsNotBetween")]
            IsNotBetween = 8,

            /// <summary>
            /// Enum IsBlank for value: IsBlank
            /// </summary>
            [EnumMember(Value = "IsBlank")]
            IsBlank = 9,

            /// <summary>
            /// Enum IsNotBlank for value: IsNotBlank
            /// </summary>
            [EnumMember(Value = "IsNotBlank")]
            IsNotBlank = 10,

            /// <summary>
            /// Enum IsAnyOf for value: IsAnyOf
            /// </summary>
            [EnumMember(Value = "IsAnyOf")]
            IsAnyOf = 11,

            /// <summary>
            /// Enum IsNoneOf for value: IsNoneOf
            /// </summary>
            [EnumMember(Value = "IsNoneOf")]
            IsNoneOf = 12

        }


        /// <summary>
        /// The operation type of the rule
        /// </summary>
        /// <value>The operation type of the rule</value>
        [DataMember(Name = "operation", EmitDefaultValue = false)]
        public OperationEnum? Operation { get; set; }
        /// <summary>
        /// The type of the property to use for the rule..
        /// </summary>
        /// <value>The type of the property to use for the rule..</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PropertyTypeEnum
        {
            /// <summary>
            /// Enum Number for value: Number
            /// </summary>
            [EnumMember(Value = "Number")]
            Number = 1,

            /// <summary>
            /// Enum Boolean for value: Boolean
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean = 2,

            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 3,

            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 4,

            /// <summary>
            /// Enum Decimal for value: Decimal
            /// </summary>
            [EnumMember(Value = "Decimal")]
            Decimal = 5,

            /// <summary>
            /// Enum Currency for value: Currency
            /// </summary>
            [EnumMember(Value = "Currency")]
            Currency = 6,

            /// <summary>
            /// Enum Lookup for value: Lookup
            /// </summary>
            [EnumMember(Value = "Lookup")]
            Lookup = 7,

            /// <summary>
            /// Enum RichText for value: RichText
            /// </summary>
            [EnumMember(Value = "RichText")]
            RichText = 8

        }


        /// <summary>
        /// The type of the property to use for the rule..
        /// </summary>
        /// <value>The type of the property to use for the rule..</value>
        [DataMember(Name = "propertyType", EmitDefaultValue = false)]
        public PropertyTypeEnum? PropertyType { get; set; }
        /// <summary>
        /// The rule target.
        /// </summary>
        /// <value>The rule target.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TargetEnum
        {
            /// <summary>
            /// Enum LineItem for value: LineItem
            /// </summary>
            [EnumMember(Value = "LineItem")]
            LineItem = 1,

            /// <summary>
            /// Enum Shipment for value: Shipment
            /// </summary>
            [EnumMember(Value = "Shipment")]
            Shipment = 2

        }


        /// <summary>
        /// The rule target.
        /// </summary>
        /// <value>The rule target.</value>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public TargetEnum? Target { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumabilityRule" /> class.
        /// </summary>
        /// <param name="operation">The operation type of the rule.</param>
        /// <param name="propertyName">The name of the property to use for the rule..</param>
        /// <param name="propertyType">The type of the property to use for the rule...</param>
        /// <param name="target">The rule target..</param>
        /// <param name="value">The value to use for the rule..</param>
        public ConsumabilityRule(OperationEnum? operation = default(OperationEnum?), string propertyName = default(string), PropertyTypeEnum? propertyType = default(PropertyTypeEnum?), TargetEnum? target = default(TargetEnum?), string value = default(string))
        {
            this.Operation = operation;
            this.PropertyName = propertyName;
            this.PropertyType = propertyType;
            this.Target = target;
            this.Value = value;
        }

        /// <summary>
        /// The name of the property to use for the rule.
        /// </summary>
        /// <value>The name of the property to use for the rule.</value>
        [DataMember(Name = "propertyName", EmitDefaultValue = false)]
        public string PropertyName { get; set; }

        /// <summary>
        /// The value to use for the rule.
        /// </summary>
        /// <value>The value to use for the rule.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsumabilityRule {\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsumabilityRule);
        }

        /// <summary>
        /// Returns true if ConsumabilityRule instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsumabilityRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsumabilityRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operation == input.Operation ||
                    this.Operation.Equals(input.Operation)
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    this.PropertyType.Equals(input.PropertyType)
                ) && 
                (
                    this.Target == input.Target ||
                    this.Target.Equals(input.Target)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Operation.GetHashCode();
                if (this.PropertyName != null)
                    hashCode = hashCode * 59 + this.PropertyName.GetHashCode();
                hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
