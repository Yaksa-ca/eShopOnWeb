/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// AuthorizedScope
    /// </summary>
    [DataContract(Name = "AuthorizedScope")]
    public partial class AuthorizedScope : IEquatable<AuthorizedScope>, IValidatableObject
    {
        /// <summary>
        /// The ScopeType of the Scope
        /// </summary>
        /// <value>The ScopeType of the Scope</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Global for value: Global
            /// </summary>
            [EnumMember(Value = "Global")]
            Global = 1,

            /// <summary>
            /// Enum Sale for value: Sale
            /// </summary>
            [EnumMember(Value = "Sale")]
            Sale = 2,

            /// <summary>
            /// Enum Dependant for value: Dependant
            /// </summary>
            [EnumMember(Value = "Dependant")]
            Dependant = 3,

            /// <summary>
            /// Enum Virtual for value: Virtual
            /// </summary>
            [EnumMember(Value = "Virtual")]
            Virtual = 4

        }


        /// <summary>
        /// The ScopeType of the Scope
        /// </summary>
        /// <value>The ScopeType of the Scope</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizedScope" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorizedScope() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizedScope" /> class.
        /// </summary>
        /// <param name="children">The children of the Scope.</param>
        /// <param name="childrenIds">The list of the childrend ids.</param>
        /// <param name="currency">currency.</param>
        /// <param name="currencyIso">Currency iso code for the scope. e.g.: CAD or USD.</param>
        /// <param name="defaultCulture">Default culture for the scope. e.g.: en-US.</param>
        /// <param name="description">description.</param>
        /// <param name="endDate">End date for the scope.</param>
        /// <param name="id">The unique identifier of the Scope.  (required).</param>
        /// <param name="isActive">Whether or not the Scope is active.</param>
        /// <param name="isAuthorizedScope">Whether or not the Scope is authorized for the user.</param>
        /// <param name="isDefaultScope">Whether or not the Scope is the default one for the user.</param>
        /// <param name="name">name.</param>
        /// <param name="parentScopeId">The parent scope id.</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="sequenceNumber">The number used for ordering the Scope in a list.</param>
        /// <param name="startDate">Start date for the scope.</param>
        /// <param name="type">The ScopeType of the Scope.</param>
        public AuthorizedScope(List<AuthorizedScope> children = default(List<AuthorizedScope>), List<string> childrenIds = default(List<string>), Currency currency = default(Currency), string currencyIso = default(string), string defaultCulture = default(string), Dictionary<string, string> description = default(Dictionary<string, string>), DateTime endDate = default(DateTime), string id = default(string), bool isActive = default(bool), bool isAuthorizedScope = default(bool), bool isDefaultScope = default(bool), Dictionary<string, string> name = default(Dictionary<string, string>), string parentScopeId = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), int sequenceNumber = default(int), DateTime startDate = default(DateTime), TypeEnum? type = default(TypeEnum?))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for AuthorizedScope and cannot be null");
            this.Children = children;
            this.ChildrenIds = childrenIds;
            this.Currency = currency;
            this.CurrencyIso = currencyIso;
            this.DefaultCulture = defaultCulture;
            this.Description = description;
            this.EndDate = endDate;
            this.IsActive = isActive;
            this.IsAuthorizedScope = isAuthorizedScope;
            this.IsDefaultScope = isDefaultScope;
            this.Name = name;
            this.ParentScopeId = parentScopeId;
            this.PropertyBag = propertyBag;
            this.SequenceNumber = sequenceNumber;
            this.StartDate = startDate;
            this.Type = type;
        }

        /// <summary>
        /// The children of the Scope
        /// </summary>
        /// <value>The children of the Scope</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<AuthorizedScope> Children { get; set; }

        /// <summary>
        /// The list of the childrend ids
        /// </summary>
        /// <value>The list of the childrend ids</value>
        [DataMember(Name = "childrenIds", EmitDefaultValue = false)]
        public List<string> ChildrenIds { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Currency iso code for the scope. e.g.: CAD or USD
        /// </summary>
        /// <value>Currency iso code for the scope. e.g.: CAD or USD</value>
        [DataMember(Name = "currencyIso", EmitDefaultValue = false)]
        public string CurrencyIso { get; set; }

        /// <summary>
        /// Default culture for the scope. e.g.: en-US
        /// </summary>
        /// <value>Default culture for the scope. e.g.: en-US</value>
        [DataMember(Name = "defaultCulture", EmitDefaultValue = false)]
        public string DefaultCulture { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// End date for the scope
        /// </summary>
        /// <value>End date for the scope</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The unique identifier of the Scope. 
        /// </summary>
        /// <value>The unique identifier of the Scope. </value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether or not the Scope is active
        /// </summary>
        /// <value>Whether or not the Scope is active</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Whether or not the Scope is authorized for the user
        /// </summary>
        /// <value>Whether or not the Scope is authorized for the user</value>
        [DataMember(Name = "isAuthorizedScope", EmitDefaultValue = true)]
        public bool IsAuthorizedScope { get; set; }

        /// <summary>
        /// Whether or not the Scope is the default one for the user
        /// </summary>
        /// <value>Whether or not the Scope is the default one for the user</value>
        [DataMember(Name = "isDefaultScope", EmitDefaultValue = true)]
        public bool IsDefaultScope { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public Dictionary<string, string> Name { get; set; }

        /// <summary>
        /// The parent scope id
        /// </summary>
        /// <value>The parent scope id</value>
        [DataMember(Name = "parentScopeId", EmitDefaultValue = false)]
        public string ParentScopeId { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The number used for ordering the Scope in a list
        /// </summary>
        /// <value>The number used for ordering the Scope in a list</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// Start date for the scope
        /// </summary>
        /// <value>Start date for the scope</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorizedScope {\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  ChildrenIds: ").Append(ChildrenIds).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrencyIso: ").Append(CurrencyIso).Append("\n");
            sb.Append("  DefaultCulture: ").Append(DefaultCulture).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsAuthorizedScope: ").Append(IsAuthorizedScope).Append("\n");
            sb.Append("  IsDefaultScope: ").Append(IsDefaultScope).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentScopeId: ").Append(ParentScopeId).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizedScope);
        }

        /// <summary>
        /// Returns true if AuthorizedScope instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizedScope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizedScope input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.ChildrenIds == input.ChildrenIds ||
                    this.ChildrenIds != null &&
                    input.ChildrenIds != null &&
                    this.ChildrenIds.SequenceEqual(input.ChildrenIds)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CurrencyIso == input.CurrencyIso ||
                    (this.CurrencyIso != null &&
                    this.CurrencyIso.Equals(input.CurrencyIso))
                ) && 
                (
                    this.DefaultCulture == input.DefaultCulture ||
                    (this.DefaultCulture != null &&
                    this.DefaultCulture.Equals(input.DefaultCulture))
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.IsAuthorizedScope == input.IsAuthorizedScope ||
                    this.IsAuthorizedScope.Equals(input.IsAuthorizedScope)
                ) && 
                (
                    this.IsDefaultScope == input.IsDefaultScope ||
                    this.IsDefaultScope.Equals(input.IsDefaultScope)
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name != null &&
                    input.Name != null &&
                    this.Name.SequenceEqual(input.Name)
                ) && 
                (
                    this.ParentScopeId == input.ParentScopeId ||
                    (this.ParentScopeId != null &&
                    this.ParentScopeId.Equals(input.ParentScopeId))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.ChildrenIds != null)
                    hashCode = hashCode * 59 + this.ChildrenIds.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CurrencyIso != null)
                    hashCode = hashCode * 59 + this.CurrencyIso.GetHashCode();
                if (this.DefaultCulture != null)
                    hashCode = hashCode * 59 + this.DefaultCulture.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                hashCode = hashCode * 59 + this.IsAuthorizedScope.GetHashCode();
                hashCode = hashCode * 59 + this.IsDefaultScope.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentScopeId != null)
                    hashCode = hashCode * 59 + this.ParentScopeId.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
