/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "TransferFulfillmentPackageItemsRequest")]
    public partial class TransferFulfillmentPackageItemsRequest : IEquatable<TransferFulfillmentPackageItemsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferFulfillmentPackageItemsRequest" /> class.
        /// </summary>
        /// <param name="destinationFulfillmentPackageId">The fulfillment package identifier to transfer items to. Set to null to create a new fulfillment package using default package type..</param>
        /// <param name="fulfillmentPackageItemTransferInfos">A list containing information about fulfillment package items that needs to be transfer from one package to another..</param>
        /// <param name="sourceFulfillmentPackageId">The fulfillment package identifier to transfer items from..</param>
        public TransferFulfillmentPackageItemsRequest(string destinationFulfillmentPackageId = default(string), List<FulfillmentPackageItemTransferInfo> fulfillmentPackageItemTransferInfos = default(List<FulfillmentPackageItemTransferInfo>), string sourceFulfillmentPackageId = default(string))
        {
            this.DestinationFulfillmentPackageId = destinationFulfillmentPackageId;
            this.FulfillmentPackageItemTransferInfos = fulfillmentPackageItemTransferInfos;
            this.SourceFulfillmentPackageId = sourceFulfillmentPackageId;
        }

        /// <summary>
        /// The fulfillment package identifier to transfer items to. Set to null to create a new fulfillment package using default package type.
        /// </summary>
        /// <value>The fulfillment package identifier to transfer items to. Set to null to create a new fulfillment package using default package type.</value>
        [DataMember(Name = "destinationFulfillmentPackageId", EmitDefaultValue = false)]
        public string DestinationFulfillmentPackageId { get; set; }

        /// <summary>
        /// A list containing information about fulfillment package items that needs to be transfer from one package to another.
        /// </summary>
        /// <value>A list containing information about fulfillment package items that needs to be transfer from one package to another.</value>
        [DataMember(Name = "fulfillmentPackageItemTransferInfos", EmitDefaultValue = false)]
        public List<FulfillmentPackageItemTransferInfo> FulfillmentPackageItemTransferInfos { get; set; }

        /// <summary>
        /// The fulfillment package identifier to transfer items from.
        /// </summary>
        /// <value>The fulfillment package identifier to transfer items from.</value>
        [DataMember(Name = "sourceFulfillmentPackageId", EmitDefaultValue = false)]
        public string SourceFulfillmentPackageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferFulfillmentPackageItemsRequest {\n");
            sb.Append("  DestinationFulfillmentPackageId: ").Append(DestinationFulfillmentPackageId).Append("\n");
            sb.Append("  FulfillmentPackageItemTransferInfos: ").Append(FulfillmentPackageItemTransferInfos).Append("\n");
            sb.Append("  SourceFulfillmentPackageId: ").Append(SourceFulfillmentPackageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferFulfillmentPackageItemsRequest);
        }

        /// <summary>
        /// Returns true if TransferFulfillmentPackageItemsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferFulfillmentPackageItemsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferFulfillmentPackageItemsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestinationFulfillmentPackageId == input.DestinationFulfillmentPackageId ||
                    (this.DestinationFulfillmentPackageId != null &&
                    this.DestinationFulfillmentPackageId.Equals(input.DestinationFulfillmentPackageId))
                ) && 
                (
                    this.FulfillmentPackageItemTransferInfos == input.FulfillmentPackageItemTransferInfos ||
                    this.FulfillmentPackageItemTransferInfos != null &&
                    input.FulfillmentPackageItemTransferInfos != null &&
                    this.FulfillmentPackageItemTransferInfos.SequenceEqual(input.FulfillmentPackageItemTransferInfos)
                ) && 
                (
                    this.SourceFulfillmentPackageId == input.SourceFulfillmentPackageId ||
                    (this.SourceFulfillmentPackageId != null &&
                    this.SourceFulfillmentPackageId.Equals(input.SourceFulfillmentPackageId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationFulfillmentPackageId != null)
                    hashCode = hashCode * 59 + this.DestinationFulfillmentPackageId.GetHashCode();
                if (this.FulfillmentPackageItemTransferInfos != null)
                    hashCode = hashCode * 59 + this.FulfillmentPackageItemTransferInfos.GetHashCode();
                if (this.SourceFulfillmentPackageId != null)
                    hashCode = hashCode * 59 + this.SourceFulfillmentPackageId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
