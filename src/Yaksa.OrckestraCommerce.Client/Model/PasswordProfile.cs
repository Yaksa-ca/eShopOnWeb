/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PasswordProfile
    /// </summary>
    [DataContract(Name = "PasswordProfile")]
    public partial class PasswordProfile : IEquatable<PasswordProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordProfile" /> class.
        /// </summary>
        /// <param name="forceChangePasswordNextLogin">the password should be changed or not at the next user&#39;s login..</param>
        /// <param name="password">the password..</param>
        public PasswordProfile(bool forceChangePasswordNextLogin = default(bool), string password = default(string))
        {
            this.ForceChangePasswordNextLogin = forceChangePasswordNextLogin;
            this.Password = password;
        }

        /// <summary>
        /// the password should be changed or not at the next user&#39;s login.
        /// </summary>
        /// <value>the password should be changed or not at the next user&#39;s login.</value>
        [DataMember(Name = "forceChangePasswordNextLogin", EmitDefaultValue = true)]
        public bool ForceChangePasswordNextLogin { get; set; }

        /// <summary>
        /// the password.
        /// </summary>
        /// <value>the password.</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordProfile {\n");
            sb.Append("  ForceChangePasswordNextLogin: ").Append(ForceChangePasswordNextLogin).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordProfile);
        }

        /// <summary>
        /// Returns true if PasswordProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ForceChangePasswordNextLogin == input.ForceChangePasswordNextLogin ||
                    this.ForceChangePasswordNextLogin.Equals(input.ForceChangePasswordNextLogin)
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ForceChangePasswordNextLogin.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
