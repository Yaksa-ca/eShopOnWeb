/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Provider
    /// </summary>
    [DataContract(Name = "Provider")]
    public partial class Provider : IEquatable<Provider>, IValidatableObject
    {
        /// <summary>
        /// The provider type of this provider
        /// </summary>
        /// <value>The provider type of this provider</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,

            /// <summary>
            /// Enum StoreLocator for value: StoreLocator
            /// </summary>
            [EnumMember(Value = "StoreLocator")]
            StoreLocator = 2,

            /// <summary>
            /// Enum Geolocation for value: Geolocation
            /// </summary>
            [EnumMember(Value = "Geolocation")]
            Geolocation = 3,

            /// <summary>
            /// Enum PrintOrder for value: PrintOrder
            /// </summary>
            [EnumMember(Value = "PrintOrder")]
            PrintOrder = 4,

            /// <summary>
            /// Enum PrintShipment for value: PrintShipment
            /// </summary>
            [EnumMember(Value = "PrintShipment")]
            PrintShipment = 5,

            /// <summary>
            /// Enum OrderProcessing for value: OrderProcessing
            /// </summary>
            [EnumMember(Value = "OrderProcessing")]
            OrderProcessing = 6,

            /// <summary>
            /// Enum Shipping for value: Shipping
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping = 7,

            /// <summary>
            /// Enum Payment for value: Payment
            /// </summary>
            [EnumMember(Value = "Payment")]
            Payment = 8,

            /// <summary>
            /// Enum Tax for value: Tax
            /// </summary>
            [EnumMember(Value = "Tax")]
            Tax = 9,

            /// <summary>
            /// Enum Rounding for value: Rounding
            /// </summary>
            [EnumMember(Value = "Rounding")]
            Rounding = 10,

            /// <summary>
            /// Enum TargetingContext for value: TargetingContext
            /// </summary>
            [EnumMember(Value = "TargetingContext")]
            TargetingContext = 11,

            /// <summary>
            /// Enum OrderNumberGenerator for value: OrderNumberGenerator
            /// </summary>
            [EnumMember(Value = "OrderNumberGenerator")]
            OrderNumberGenerator = 12,

            /// <summary>
            /// Enum RmaNumberGenerator for value: RmaNumberGenerator
            /// </summary>
            [EnumMember(Value = "RmaNumberGenerator")]
            RmaNumberGenerator = 13,

            /// <summary>
            /// Enum DigitalAssetManagement for value: DigitalAssetManagement
            /// </summary>
            [EnumMember(Value = "DigitalAssetManagement")]
            DigitalAssetManagement = 14,

            /// <summary>
            /// Enum DirectoryProvider for value: DirectoryProvider
            /// </summary>
            [EnumMember(Value = "DirectoryProvider")]
            DirectoryProvider = 15,

            /// <summary>
            /// Enum MembershipProvider for value: MembershipProvider
            /// </summary>
            [EnumMember(Value = "MembershipProvider")]
            MembershipProvider = 16,

            /// <summary>
            /// Enum Inventory for value: Inventory
            /// </summary>
            [EnumMember(Value = "Inventory")]
            Inventory = 17,

            /// <summary>
            /// Enum Audit for value: Audit
            /// </summary>
            [EnumMember(Value = "Audit")]
            Audit = 18,

            /// <summary>
            /// Enum SlotInstance for value: SlotInstance
            /// </summary>
            [EnumMember(Value = "SlotInstance")]
            SlotInstance = 19,

            /// <summary>
            /// Enum PriceCalculator for value: PriceCalculator
            /// </summary>
            [EnumMember(Value = "PriceCalculator")]
            PriceCalculator = 20,

            /// <summary>
            /// Enum SearchPriceCalculator for value: SearchPriceCalculator
            /// </summary>
            [EnumMember(Value = "SearchPriceCalculator")]
            SearchPriceCalculator = 21,

            /// <summary>
            /// Enum Search for value: Search
            /// </summary>
            [EnumMember(Value = "Search")]
            Search = 22,

            /// <summary>
            /// Enum BlobStorage for value: BlobStorage
            /// </summary>
            [EnumMember(Value = "BlobStorage")]
            BlobStorage = 23,

            /// <summary>
            /// Enum ShipmentProcessingDate for value: ShipmentProcessingDate
            /// </summary>
            [EnumMember(Value = "ShipmentProcessingDate")]
            ShipmentProcessingDate = 24,

            /// <summary>
            /// Enum ProductImportParser for value: ProductImportParser
            /// </summary>
            [EnumMember(Value = "ProductImportParser")]
            ProductImportParser = 25,

            /// <summary>
            /// Enum DataExchange for value: DataExchange
            /// </summary>
            [EnumMember(Value = "DataExchange")]
            DataExchange = 26,

            /// <summary>
            /// Enum ProductDataExchangeImport for value: ProductDataExchangeImport
            /// </summary>
            [EnumMember(Value = "ProductDataExchangeImport")]
            ProductDataExchangeImport = 27,

            /// <summary>
            /// Enum ProductDataExchangeExport for value: ProductDataExchangeExport
            /// </summary>
            [EnumMember(Value = "ProductDataExchangeExport")]
            ProductDataExchangeExport = 28,

            /// <summary>
            /// Enum ProductPriceDataExchangeImport for value: ProductPriceDataExchangeImport
            /// </summary>
            [EnumMember(Value = "ProductPriceDataExchangeImport")]
            ProductPriceDataExchangeImport = 29,

            /// <summary>
            /// Enum ProductPriceDataExchangeExport for value: ProductPriceDataExchangeExport
            /// </summary>
            [EnumMember(Value = "ProductPriceDataExchangeExport")]
            ProductPriceDataExchangeExport = 30,

            /// <summary>
            /// Enum MailProvider for value: MailProvider
            /// </summary>
            [EnumMember(Value = "MailProvider")]
            MailProvider = 31,

            /// <summary>
            /// Enum NotificationProvider for value: NotificationProvider
            /// </summary>
            [EnumMember(Value = "NotificationProvider")]
            NotificationProvider = 32,

            /// <summary>
            /// Enum OrderImportParser for value: OrderImportParser
            /// </summary>
            [EnumMember(Value = "OrderImportParser")]
            OrderImportParser = 33,

            /// <summary>
            /// Enum PromotionLineItemValidator for value: PromotionLineItemValidator
            /// </summary>
            [EnumMember(Value = "PromotionLineItemValidator")]
            PromotionLineItemValidator = 34,

            /// <summary>
            /// Enum PickingMissionNumberGenerator for value: PickingMissionNumberGenerator
            /// </summary>
            [EnumMember(Value = "PickingMissionNumberGenerator")]
            PickingMissionNumberGenerator = 35,

            /// <summary>
            /// Enum FulfillmentCarrier for value: FulfillmentCarrier
            /// </summary>
            [EnumMember(Value = "FulfillmentCarrier")]
            FulfillmentCarrier = 36,

            /// <summary>
            /// Enum FulfillmentRouting for value: FulfillmentRouting
            /// </summary>
            [EnumMember(Value = "FulfillmentRouting")]
            FulfillmentRouting = 37

        }


        /// <summary>
        /// The provider type of this provider
        /// </summary>
        /// <value>The provider type of this provider</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Provider" /> class.
        /// </summary>
        /// <param name="description">The description of this provider.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="id">The unique identifier of this provider.</param>
        /// <param name="implementationTypeName">The implementation type name of this provider.</param>
        /// <param name="isActive">A value indicating whether this provider is currently active.</param>
        /// <param name="name">The name of this provider.</param>
        /// <param name="scopeId">The scopeId of this provider.</param>
        /// <param name="type">The provider type of this provider.</param>
        /// <param name="values">values.</param>
        public Provider(string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), string id = default(string), string implementationTypeName = default(string), bool isActive = default(bool), string name = default(string), string scopeId = default(string), TypeEnum? type = default(TypeEnum?), Dictionary<string, Object> values = default(Dictionary<string, Object>))
        {
            this.Description = description;
            this.DisplayName = displayName;
            this.Id = id;
            this.ImplementationTypeName = implementationTypeName;
            this.IsActive = isActive;
            this.Name = name;
            this.ScopeId = scopeId;
            this.Type = type;
            this.Values = values;
        }

        /// <summary>
        /// The description of this provider
        /// </summary>
        /// <value>The description of this provider</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The unique identifier of this provider
        /// </summary>
        /// <value>The unique identifier of this provider</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The implementation type name of this provider
        /// </summary>
        /// <value>The implementation type name of this provider</value>
        [DataMember(Name = "implementationTypeName", EmitDefaultValue = false)]
        public string ImplementationTypeName { get; set; }

        /// <summary>
        /// A value indicating whether this provider is currently active
        /// </summary>
        /// <value>A value indicating whether this provider is currently active</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The name of this provider
        /// </summary>
        /// <value>The name of this provider</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The scopeId of this provider
        /// </summary>
        /// <value>The scopeId of this provider</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public Dictionary<string, Object> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Provider {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImplementationTypeName: ").Append(ImplementationTypeName).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Provider);
        }

        /// <summary>
        /// Returns true if Provider instances are equal
        /// </summary>
        /// <param name="input">Instance of Provider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Provider input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImplementationTypeName == input.ImplementationTypeName ||
                    (this.ImplementationTypeName != null &&
                    this.ImplementationTypeName.Equals(input.ImplementationTypeName))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImplementationTypeName != null)
                    hashCode = hashCode * 59 + this.ImplementationTypeName.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
