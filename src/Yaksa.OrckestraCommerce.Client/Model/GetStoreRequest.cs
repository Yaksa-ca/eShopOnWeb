/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Stores are entities which represents physical stores or an online/web stores.
    /// </summary>
    [DataContract(Name = "GetStoreRequest")]
    public partial class GetStoreRequest : IEquatable<GetStoreRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStoreRequest" /> class.
        /// </summary>
        /// <param name="scopeId">The id of the requested scope.</param>
        /// <param name="cultureName">The culture name in which language tha data will be returned.</param>
        /// <param name="id">the unique id of the Store.</param>
        /// <param name="includeAddresses">Specifies whether or not to load the collection of addresses linked to the store..</param>
        /// <param name="includeOperatingStatus">Specifies whether or not to load the operating status the store..</param>
        /// <param name="includeSchedules">Specifies whether or not to load schedules of the store..</param>
        public GetStoreRequest(string scopeId = default(string), string cultureName = default(string), string id = default(string), bool includeAddresses = default(bool), bool includeOperatingStatus = default(bool), bool includeSchedules = default(bool))
        {
            this.ScopeId = scopeId;
            this.CultureName = cultureName;
            this.Id = id;
            this.IncludeAddresses = includeAddresses;
            this.IncludeOperatingStatus = includeOperatingStatus;
            this.IncludeSchedules = includeSchedules;
        }

        /// <summary>
        /// The id of the requested scope
        /// </summary>
        /// <value>The id of the requested scope</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The culture name in which language tha data will be returned
        /// </summary>
        /// <value>The culture name in which language tha data will be returned</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// the unique id of the Store
        /// </summary>
        /// <value>the unique id of the Store</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Specifies whether or not to load the collection of addresses linked to the store.
        /// </summary>
        /// <value>Specifies whether or not to load the collection of addresses linked to the store.</value>
        [DataMember(Name = "includeAddresses", EmitDefaultValue = true)]
        public bool IncludeAddresses { get; set; }

        /// <summary>
        /// Specifies whether or not to load the operating status the store.
        /// </summary>
        /// <value>Specifies whether or not to load the operating status the store.</value>
        [DataMember(Name = "includeOperatingStatus", EmitDefaultValue = true)]
        public bool IncludeOperatingStatus { get; set; }

        /// <summary>
        /// Specifies whether or not to load schedules of the store.
        /// </summary>
        /// <value>Specifies whether or not to load schedules of the store.</value>
        [DataMember(Name = "includeSchedules", EmitDefaultValue = true)]
        public bool IncludeSchedules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetStoreRequest {\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncludeAddresses: ").Append(IncludeAddresses).Append("\n");
            sb.Append("  IncludeOperatingStatus: ").Append(IncludeOperatingStatus).Append("\n");
            sb.Append("  IncludeSchedules: ").Append(IncludeSchedules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetStoreRequest);
        }

        /// <summary>
        /// Returns true if GetStoreRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetStoreRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetStoreRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IncludeAddresses == input.IncludeAddresses ||
                    this.IncludeAddresses.Equals(input.IncludeAddresses)
                ) && 
                (
                    this.IncludeOperatingStatus == input.IncludeOperatingStatus ||
                    this.IncludeOperatingStatus.Equals(input.IncludeOperatingStatus)
                ) && 
                (
                    this.IncludeSchedules == input.IncludeSchedules ||
                    this.IncludeSchedules.Equals(input.IncludeSchedules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeAddresses.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeOperatingStatus.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeSchedules.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
