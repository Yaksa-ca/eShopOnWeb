/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// A promotion defines a set of rewards that can be applied to a Cart if a set of conditions are true.
    /// </summary>
    [DataContract(Name = "FindPromoCodesRequest")]
    public partial class FindPromoCodesRequest : IEquatable<FindPromoCodesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindPromoCodesRequest" /> class.
        /// </summary>
        /// <param name="maximumItems">The number of items to return. The default value is 10..</param>
        /// <param name="startingIndex">The starting index. The default value is 0..</param>
        public FindPromoCodesRequest(int maximumItems = default(int), int startingIndex = default(int))
        {
            this.MaximumItems = maximumItems;
            this.StartingIndex = startingIndex;
        }

        /// <summary>
        /// The number of items to return. The default value is 10.
        /// </summary>
        /// <value>The number of items to return. The default value is 10.</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// The starting index. The default value is 0.
        /// </summary>
        /// <value>The starting index. The default value is 0.</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindPromoCodesRequest {\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindPromoCodesRequest);
        }

        /// <summary>
        /// Returns true if FindPromoCodesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindPromoCodesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindPromoCodesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
