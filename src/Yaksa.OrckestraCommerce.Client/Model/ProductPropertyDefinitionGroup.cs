/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductPropertyDefinitionGroup
    /// </summary>
    [DataContract(Name = "ProductPropertyDefinitionGroup")]
    public partial class ProductPropertyDefinitionGroup : IEquatable<ProductPropertyDefinitionGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPropertyDefinitionGroup" /> class.
        /// </summary>
        /// <param name="description">A description for the group. Not multilingual.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="displayOrder">A number representing the order in which the group will be displayed in the list of groups.</param>
        /// <param name="isSystem">Whether the group is a system (un-editable) group.</param>
        /// <param name="name">The name (unchangeable) of the group (business key).</param>
        /// <param name="properties">The list of attributes associated with the group.</param>
        public ProductPropertyDefinitionGroup(string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), int displayOrder = default(int), bool isSystem = default(bool), string name = default(string), List<ProductPropertyDefinition> properties = default(List<ProductPropertyDefinition>))
        {
            this.Description = description;
            this.DisplayName = displayName;
            this.DisplayOrder = displayOrder;
            this.IsSystem = isSystem;
            this.Name = name;
            this.Properties = properties;
        }

        /// <summary>
        /// A description for the group. Not multilingual
        /// </summary>
        /// <value>A description for the group. Not multilingual</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// A number representing the order in which the group will be displayed in the list of groups
        /// </summary>
        /// <value>A number representing the order in which the group will be displayed in the list of groups</value>
        [DataMember(Name = "displayOrder", EmitDefaultValue = false)]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Whether the group is a system (un-editable) group
        /// </summary>
        /// <value>Whether the group is a system (un-editable) group</value>
        [DataMember(Name = "isSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// The name (unchangeable) of the group (business key)
        /// </summary>
        /// <value>The name (unchangeable) of the group (business key)</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The list of attributes associated with the group
        /// </summary>
        /// <value>The list of attributes associated with the group</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<ProductPropertyDefinition> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductPropertyDefinitionGroup {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductPropertyDefinitionGroup);
        }

        /// <summary>
        /// Returns true if ProductPropertyDefinitionGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductPropertyDefinitionGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductPropertyDefinitionGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    this.DisplayOrder.Equals(input.DisplayOrder)
                ) && 
                (
                    this.IsSystem == input.IsSystem ||
                    this.IsSystem.Equals(input.IsSystem)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                hashCode = hashCode * 59 + this.IsSystem.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
