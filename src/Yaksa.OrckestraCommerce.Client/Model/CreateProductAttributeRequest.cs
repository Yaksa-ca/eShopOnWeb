/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Metadata are entities which represents additional definitions and attribute information.
    /// </summary>
    [DataContract(Name = "CreateProductAttributeRequest")]
    public partial class CreateProductAttributeRequest : IEquatable<CreateProductAttributeRequest>, IValidatableObject
    {
        /// <summary>
        /// The data type of this attribute
        /// </summary>
        /// <value>The data type of this attribute</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataTypeEnum
        {
            /// <summary>
            /// Enum Number for value: Number
            /// </summary>
            [EnumMember(Value = "Number")]
            Number = 1,

            /// <summary>
            /// Enum Boolean for value: Boolean
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean = 2,

            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 3,

            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 4,

            /// <summary>
            /// Enum Decimal for value: Decimal
            /// </summary>
            [EnumMember(Value = "Decimal")]
            Decimal = 5,

            /// <summary>
            /// Enum Currency for value: Currency
            /// </summary>
            [EnumMember(Value = "Currency")]
            Currency = 6,

            /// <summary>
            /// Enum Lookup for value: Lookup
            /// </summary>
            [EnumMember(Value = "Lookup")]
            Lookup = 7,

            /// <summary>
            /// Enum RichText for value: RichText
            /// </summary>
            [EnumMember(Value = "RichText")]
            RichText = 8

        }


        /// <summary>
        /// The data type of this attribute
        /// </summary>
        /// <value>The data type of this attribute</value>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public DataTypeEnum? DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProductAttributeRequest" /> class.
        /// </summary>
        /// <param name="allowMultipleSelection">A value indicating whether multiple values can be specified. Applicable only for attributes of type &#39;Lookup&#39;..</param>
        /// <param name="dataType">The data type of this attribute.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="description">The description of the attribute.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="groupName">The ID of the attribute group, if the attribute is associated to a group.</param>
        /// <param name="includeInAllCategoryDefinition">A value indicating whether the attribute will be automatically returned with all Category definitions of the system.</param>
        /// <param name="includeInAllProductDefinition">A value indicating whether the attribute will be automatically returned with all Product definitions of the system.</param>
        /// <param name="includeInAllVariantDefinition">A value indicating whether or not the attribute should be automatically included in variant definitions of the system.</param>
        /// <param name="isHiddenInOrchestrator">A value indicating whether this instance is hidden in the orchestrator.</param>
        /// <param name="isRequired">A value indicating whether a value is required for this attribute.</param>
        /// <param name="localizable">A value indicating whether this attribute is localizable and a distinct value can be specified for different cultures.</param>
        /// <param name="lookupName">The name of the lookup type. Applicable only for attributes of type &#39;Lookup&#39;..</param>
        /// <param name="maximumValue">maximumValue.</param>
        /// <param name="minimumValue">minimumValue.</param>
        public CreateProductAttributeRequest(bool allowMultipleSelection = default(bool), DataTypeEnum? dataType = default(DataTypeEnum?), ValueTypeWrapper defaultValue = default(ValueTypeWrapper), string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), string groupName = default(string), bool includeInAllCategoryDefinition = default(bool), bool includeInAllProductDefinition = default(bool), bool includeInAllVariantDefinition = default(bool), bool isHiddenInOrchestrator = default(bool), bool isRequired = default(bool), bool localizable = default(bool), string lookupName = default(string), ValueTypeWrapper maximumValue = default(ValueTypeWrapper), ValueTypeWrapper minimumValue = default(ValueTypeWrapper))
        {
            this.AllowMultipleSelection = allowMultipleSelection;
            this.DataType = dataType;
            this.DefaultValue = defaultValue;
            this.Description = description;
            this.DisplayName = displayName;
            this.GroupName = groupName;
            this.IncludeInAllCategoryDefinition = includeInAllCategoryDefinition;
            this.IncludeInAllProductDefinition = includeInAllProductDefinition;
            this.IncludeInAllVariantDefinition = includeInAllVariantDefinition;
            this.IsHiddenInOrchestrator = isHiddenInOrchestrator;
            this.IsRequired = isRequired;
            this.Localizable = localizable;
            this.LookupName = lookupName;
            this.MaximumValue = maximumValue;
            this.MinimumValue = minimumValue;
        }

        /// <summary>
        /// A value indicating whether multiple values can be specified. Applicable only for attributes of type &#39;Lookup&#39;.
        /// </summary>
        /// <value>A value indicating whether multiple values can be specified. Applicable only for attributes of type &#39;Lookup&#39;.</value>
        [DataMember(Name = "allowMultipleSelection", EmitDefaultValue = true)]
        public bool AllowMultipleSelection { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "defaultValue", EmitDefaultValue = false)]
        public ValueTypeWrapper DefaultValue { get; set; }

        /// <summary>
        /// The description of the attribute
        /// </summary>
        /// <value>The description of the attribute</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The ID of the attribute group, if the attribute is associated to a group
        /// </summary>
        /// <value>The ID of the attribute group, if the attribute is associated to a group</value>
        [DataMember(Name = "groupName", EmitDefaultValue = false)]
        public string GroupName { get; set; }

        /// <summary>
        /// A value indicating whether the attribute will be automatically returned with all Category definitions of the system
        /// </summary>
        /// <value>A value indicating whether the attribute will be automatically returned with all Category definitions of the system</value>
        [DataMember(Name = "includeInAllCategoryDefinition", EmitDefaultValue = true)]
        public bool IncludeInAllCategoryDefinition { get; set; }

        /// <summary>
        /// A value indicating whether the attribute will be automatically returned with all Product definitions of the system
        /// </summary>
        /// <value>A value indicating whether the attribute will be automatically returned with all Product definitions of the system</value>
        [DataMember(Name = "includeInAllProductDefinition", EmitDefaultValue = true)]
        public bool IncludeInAllProductDefinition { get; set; }

        /// <summary>
        /// A value indicating whether or not the attribute should be automatically included in variant definitions of the system
        /// </summary>
        /// <value>A value indicating whether or not the attribute should be automatically included in variant definitions of the system</value>
        [DataMember(Name = "includeInAllVariantDefinition", EmitDefaultValue = true)]
        public bool IncludeInAllVariantDefinition { get; set; }

        /// <summary>
        /// A value indicating whether this instance is hidden in the orchestrator
        /// </summary>
        /// <value>A value indicating whether this instance is hidden in the orchestrator</value>
        [DataMember(Name = "isHiddenInOrchestrator", EmitDefaultValue = true)]
        public bool IsHiddenInOrchestrator { get; set; }

        /// <summary>
        /// A value indicating whether a value is required for this attribute
        /// </summary>
        /// <value>A value indicating whether a value is required for this attribute</value>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// A value indicating whether this attribute is localizable and a distinct value can be specified for different cultures
        /// </summary>
        /// <value>A value indicating whether this attribute is localizable and a distinct value can be specified for different cultures</value>
        [DataMember(Name = "localizable", EmitDefaultValue = true)]
        public bool Localizable { get; set; }

        /// <summary>
        /// The name of the lookup type. Applicable only for attributes of type &#39;Lookup&#39;.
        /// </summary>
        /// <value>The name of the lookup type. Applicable only for attributes of type &#39;Lookup&#39;.</value>
        [DataMember(Name = "lookupName", EmitDefaultValue = false)]
        public string LookupName { get; set; }

        /// <summary>
        /// Gets or Sets MaximumValue
        /// </summary>
        [DataMember(Name = "maximumValue", EmitDefaultValue = false)]
        public ValueTypeWrapper MaximumValue { get; set; }

        /// <summary>
        /// Gets or Sets MinimumValue
        /// </summary>
        [DataMember(Name = "minimumValue", EmitDefaultValue = false)]
        public ValueTypeWrapper MinimumValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateProductAttributeRequest {\n");
            sb.Append("  AllowMultipleSelection: ").Append(AllowMultipleSelection).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  IncludeInAllCategoryDefinition: ").Append(IncludeInAllCategoryDefinition).Append("\n");
            sb.Append("  IncludeInAllProductDefinition: ").Append(IncludeInAllProductDefinition).Append("\n");
            sb.Append("  IncludeInAllVariantDefinition: ").Append(IncludeInAllVariantDefinition).Append("\n");
            sb.Append("  IsHiddenInOrchestrator: ").Append(IsHiddenInOrchestrator).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  Localizable: ").Append(Localizable).Append("\n");
            sb.Append("  LookupName: ").Append(LookupName).Append("\n");
            sb.Append("  MaximumValue: ").Append(MaximumValue).Append("\n");
            sb.Append("  MinimumValue: ").Append(MinimumValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateProductAttributeRequest);
        }

        /// <summary>
        /// Returns true if CreateProductAttributeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateProductAttributeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateProductAttributeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMultipleSelection == input.AllowMultipleSelection ||
                    this.AllowMultipleSelection.Equals(input.AllowMultipleSelection)
                ) && 
                (
                    this.DataType == input.DataType ||
                    this.DataType.Equals(input.DataType)
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.IncludeInAllCategoryDefinition == input.IncludeInAllCategoryDefinition ||
                    this.IncludeInAllCategoryDefinition.Equals(input.IncludeInAllCategoryDefinition)
                ) && 
                (
                    this.IncludeInAllProductDefinition == input.IncludeInAllProductDefinition ||
                    this.IncludeInAllProductDefinition.Equals(input.IncludeInAllProductDefinition)
                ) && 
                (
                    this.IncludeInAllVariantDefinition == input.IncludeInAllVariantDefinition ||
                    this.IncludeInAllVariantDefinition.Equals(input.IncludeInAllVariantDefinition)
                ) && 
                (
                    this.IsHiddenInOrchestrator == input.IsHiddenInOrchestrator ||
                    this.IsHiddenInOrchestrator.Equals(input.IsHiddenInOrchestrator)
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    this.IsRequired.Equals(input.IsRequired)
                ) && 
                (
                    this.Localizable == input.Localizable ||
                    this.Localizable.Equals(input.Localizable)
                ) && 
                (
                    this.LookupName == input.LookupName ||
                    (this.LookupName != null &&
                    this.LookupName.Equals(input.LookupName))
                ) && 
                (
                    this.MaximumValue == input.MaximumValue ||
                    (this.MaximumValue != null &&
                    this.MaximumValue.Equals(input.MaximumValue))
                ) && 
                (
                    this.MinimumValue == input.MinimumValue ||
                    (this.MinimumValue != null &&
                    this.MinimumValue.Equals(input.MinimumValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowMultipleSelection.GetHashCode();
                hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInAllCategoryDefinition.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInAllProductDefinition.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInAllVariantDefinition.GetHashCode();
                hashCode = hashCode * 59 + this.IsHiddenInOrchestrator.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                hashCode = hashCode * 59 + this.Localizable.GetHashCode();
                if (this.LookupName != null)
                    hashCode = hashCode * 59 + this.LookupName.GetHashCode();
                if (this.MaximumValue != null)
                    hashCode = hashCode * 59 + this.MaximumValue.GetHashCode();
                if (this.MinimumValue != null)
                    hashCode = hashCode * 59 + this.MinimumValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
