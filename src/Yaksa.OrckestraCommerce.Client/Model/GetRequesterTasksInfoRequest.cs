/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Long running tasks perform batch processing.
    /// </summary>
    [DataContract(Name = "GetRequesterTasksInfoRequest")]
    public partial class GetRequesterTasksInfoRequest : IEquatable<GetRequesterTasksInfoRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRequesterTasksInfoRequest" /> class.
        /// </summary>
        /// <param name="filterTaskNames">The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine).</param>
        /// <param name="lastModified">The last modification date of the task. Use this to limit the results to items after this date.</param>
        /// <param name="requester">The username of the user that requested the tasks..</param>
        public GetRequesterTasksInfoRequest(List<string> filterTaskNames = default(List<string>), DateTime lastModified = default(DateTime), string requester = default(string))
        {
            this.FilterTaskNames = filterTaskNames;
            this.LastModified = lastModified;
            this.Requester = requester;
        }

        /// <summary>
        /// The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine)
        /// </summary>
        /// <value>The array of task type names to filter by, if none specified, no filtering is performed. The type names are the fully qualified type names (Eg. Orckestra.Overture.Providers.CommerceEngine.Profiles.ProfileSchemaImportTask, Orckestra.Overture.Providers.CommerceEngine)</value>
        [DataMember(Name = "filterTaskNames", EmitDefaultValue = false)]
        public List<string> FilterTaskNames { get; set; }

        /// <summary>
        /// The last modification date of the task. Use this to limit the results to items after this date
        /// </summary>
        /// <value>The last modification date of the task. Use this to limit the results to items after this date</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The username of the user that requested the tasks.
        /// </summary>
        /// <value>The username of the user that requested the tasks.</value>
        [DataMember(Name = "requester", EmitDefaultValue = false)]
        public string Requester { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetRequesterTasksInfoRequest {\n");
            sb.Append("  FilterTaskNames: ").Append(FilterTaskNames).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Requester: ").Append(Requester).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetRequesterTasksInfoRequest);
        }

        /// <summary>
        /// Returns true if GetRequesterTasksInfoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetRequesterTasksInfoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetRequesterTasksInfoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FilterTaskNames == input.FilterTaskNames ||
                    this.FilterTaskNames != null &&
                    input.FilterTaskNames != null &&
                    this.FilterTaskNames.SequenceEqual(input.FilterTaskNames)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Requester == input.Requester ||
                    (this.Requester != null &&
                    this.Requester.Equals(input.Requester))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilterTaskNames != null)
                    hashCode = hashCode * 59 + this.FilterTaskNames.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.Requester != null)
                    hashCode = hashCode * 59 + this.Requester.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
