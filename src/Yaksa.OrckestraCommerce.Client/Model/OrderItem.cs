/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// OrderItem
    /// </summary>
    [DataContract(Name = "OrderItem")]
    public partial class OrderItem : IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// execution result of the order post processing.
        /// </summary>
        /// <value>execution result of the order post processing.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PostProcessingExecutionResultEnum
        {
            /// <summary>
            /// Enum Success for value: Success
            /// </summary>
            [EnumMember(Value = "Success")]
            Success = 1,

            /// <summary>
            /// Enum Warning for value: Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 3,

            /// <summary>
            /// Enum Critical for value: Critical
            /// </summary>
            [EnumMember(Value = "Critical")]
            Critical = 4,

            /// <summary>
            /// Enum Failure for value: Failure
            /// </summary>
            [EnumMember(Value = "Failure")]
            Failure = 5

        }


        /// <summary>
        /// execution result of the order post processing.
        /// </summary>
        /// <value>execution result of the order post processing.</value>
        [DataMember(Name = "postProcessingExecutionResult", EmitDefaultValue = false)]
        public PostProcessingExecutionResultEnum? PostProcessingExecutionResult { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="billingCurrency">The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;..</param>
        /// <param name="created">The date when the order as created..</param>
        /// <param name="customerEmail">The email of customer who made the order..</param>
        /// <param name="customerId">The customer id who made the order..</param>
        /// <param name="customerName">The complete name of the customer who made the order..</param>
        /// <param name="id">The id of the order..</param>
        /// <param name="messages">The execution messages when the order was post processed..</param>
        /// <param name="orderNumber">The order number..</param>
        /// <param name="orderStatus">The order status..</param>
        /// <param name="postProcessingExecutionResult">execution result of the order post processing..</param>
        /// <param name="scopeId">The scope id..</param>
        /// <param name="shipmentItems">The list of shipments for this order..</param>
        /// <param name="source">The source of the order..</param>
        /// <param name="total">The total of the order..</param>
        /// <param name="validationResults">The validation results when the order was post processed..</param>
        public OrderItem(string billingCurrency = default(string), DateTime created = default(DateTime), string customerEmail = default(string), string customerId = default(string), string customerName = default(string), string id = default(string), List<ExecutionMessage> messages = default(List<ExecutionMessage>), string orderNumber = default(string), string orderStatus = default(string), PostProcessingExecutionResultEnum? postProcessingExecutionResult = default(PostProcessingExecutionResultEnum?), string scopeId = default(string), List<ShipmentItem> shipmentItems = default(List<ShipmentItem>), string source = default(string), double total = default(double), List<ValidationResult> validationResults = default(List<ValidationResult>))
        {
            this.BillingCurrency = billingCurrency;
            this.Created = created;
            this.CustomerEmail = customerEmail;
            this.CustomerId = customerId;
            this.CustomerName = customerName;
            this.Id = id;
            this.Messages = messages;
            this.OrderNumber = orderNumber;
            this.OrderStatus = orderStatus;
            this.PostProcessingExecutionResult = postProcessingExecutionResult;
            this.ScopeId = scopeId;
            this.ShipmentItems = shipmentItems;
            this.Source = source;
            this.Total = total;
            this.ValidationResults = validationResults;
        }

        /// <summary>
        /// The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;.
        /// </summary>
        /// <value>The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;.</value>
        [DataMember(Name = "billingCurrency", EmitDefaultValue = false)]
        public string BillingCurrency { get; set; }

        /// <summary>
        /// The date when the order as created.
        /// </summary>
        /// <value>The date when the order as created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The email of customer who made the order.
        /// </summary>
        /// <value>The email of customer who made the order.</value>
        [DataMember(Name = "customerEmail", EmitDefaultValue = false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// The customer id who made the order.
        /// </summary>
        /// <value>The customer id who made the order.</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The complete name of the customer who made the order.
        /// </summary>
        /// <value>The complete name of the customer who made the order.</value>
        [DataMember(Name = "customerName", EmitDefaultValue = false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// The id of the order.
        /// </summary>
        /// <value>The id of the order.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The execution messages when the order was post processed.
        /// </summary>
        /// <value>The execution messages when the order was post processed.</value>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<ExecutionMessage> Messages { get; set; }

        /// <summary>
        /// The order number.
        /// </summary>
        /// <value>The order number.</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The order status.
        /// </summary>
        /// <value>The order status.</value>
        [DataMember(Name = "orderStatus", EmitDefaultValue = false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// The scope id.
        /// </summary>
        /// <value>The scope id.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The list of shipments for this order.
        /// </summary>
        /// <value>The list of shipments for this order.</value>
        [DataMember(Name = "shipmentItems", EmitDefaultValue = false)]
        public List<ShipmentItem> ShipmentItems { get; set; }

        /// <summary>
        /// The source of the order.
        /// </summary>
        /// <value>The source of the order.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// The total of the order.
        /// </summary>
        /// <value>The total of the order.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// The validation results when the order was post processed.
        /// </summary>
        /// <value>The validation results when the order was post processed.</value>
        [DataMember(Name = "validationResults", EmitDefaultValue = false)]
        public List<ValidationResult> ValidationResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  BillingCurrency: ").Append(BillingCurrency).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  PostProcessingExecutionResult: ").Append(PostProcessingExecutionResult).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  ShipmentItems: ").Append(ShipmentItems).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  ValidationResults: ").Append(ValidationResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingCurrency == input.BillingCurrency ||
                    (this.BillingCurrency != null &&
                    this.BillingCurrency.Equals(input.BillingCurrency))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CustomerEmail == input.CustomerEmail ||
                    (this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(input.CustomerEmail))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.PostProcessingExecutionResult == input.PostProcessingExecutionResult ||
                    this.PostProcessingExecutionResult.Equals(input.PostProcessingExecutionResult)
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.ShipmentItems == input.ShipmentItems ||
                    this.ShipmentItems != null &&
                    input.ShipmentItems != null &&
                    this.ShipmentItems.SequenceEqual(input.ShipmentItems)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.ValidationResults == input.ValidationResults ||
                    this.ValidationResults != null &&
                    input.ValidationResults != null &&
                    this.ValidationResults.SequenceEqual(input.ValidationResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingCurrency != null)
                    hashCode = hashCode * 59 + this.BillingCurrency.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CustomerEmail != null)
                    hashCode = hashCode * 59 + this.CustomerEmail.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                hashCode = hashCode * 59 + this.PostProcessingExecutionResult.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.ShipmentItems != null)
                    hashCode = hashCode * 59 + this.ShipmentItems.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.ValidationResults != null)
                    hashCode = hashCode * 59 + this.ValidationResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
