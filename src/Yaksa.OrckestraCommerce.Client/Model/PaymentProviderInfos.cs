/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PaymentProviderInfos
    /// </summary>
    [DataContract(Name = "PaymentProviderInfos")]
    public partial class PaymentProviderInfos : IEquatable<PaymentProviderInfos>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentProviderInfos" /> class.
        /// </summary>
        /// <param name="paymentProviders">the list of payment providers information..</param>
        public PaymentProviderInfos(List<PaymentProviderInfo> paymentProviders = default(List<PaymentProviderInfo>))
        {
            this.PaymentProviders = paymentProviders;
        }

        /// <summary>
        /// the list of payment providers information.
        /// </summary>
        /// <value>the list of payment providers information.</value>
        [DataMember(Name = "paymentProviders", EmitDefaultValue = false)]
        public List<PaymentProviderInfo> PaymentProviders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentProviderInfos {\n");
            sb.Append("  PaymentProviders: ").Append(PaymentProviders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentProviderInfos);
        }

        /// <summary>
        /// Returns true if PaymentProviderInfos instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentProviderInfos to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentProviderInfos input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentProviders == input.PaymentProviders ||
                    this.PaymentProviders != null &&
                    input.PaymentProviders != null &&
                    this.PaymentProviders.SequenceEqual(input.PaymentProviders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentProviders != null)
                    hashCode = hashCode * 59 + this.PaymentProviders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
