/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Application are blocks of logical business features.
    /// </summary>
    [DataContract(Name = "GetUserScopeTreeRequest")]
    public partial class GetUserScopeTreeRequest : IEquatable<GetUserScopeTreeRequest>, IValidatableObject
    {
        /// <summary>
        /// The module for which the scope tree is returned.
        /// </summary>
        /// <value>The module for which the scope tree is returned.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModuleEnum
        {
            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 1,

            /// <summary>
            /// Enum Customer for value: Customer
            /// </summary>
            [EnumMember(Value = "Customer")]
            Customer = 2,

            /// <summary>
            /// Enum Order for value: Order
            /// </summary>
            [EnumMember(Value = "Order")]
            Order = 3,

            /// <summary>
            /// Enum Marketing for value: Marketing
            /// </summary>
            [EnumMember(Value = "Marketing")]
            Marketing = 4,

            /// <summary>
            /// Enum Reports for value: Reports
            /// </summary>
            [EnumMember(Value = "Reports")]
            Reports = 5,

            /// <summary>
            /// Enum Administration for value: Administration
            /// </summary>
            [EnumMember(Value = "Administration")]
            Administration = 6,

            /// <summary>
            /// Enum UserManagement for value: UserManagement
            /// </summary>
            [EnumMember(Value = "UserManagement")]
            UserManagement = 7,

            /// <summary>
            /// Enum PriceManagement for value: PriceManagement
            /// </summary>
            [EnumMember(Value = "PriceManagement")]
            PriceManagement = 8

        }


        /// <summary>
        /// The module for which the scope tree is returned.
        /// </summary>
        /// <value>The module for which the scope tree is returned.</value>
        [DataMember(Name = "module", EmitDefaultValue = false)]
        public ModuleEnum? Module { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserScopeTreeRequest" /> class.
        /// </summary>
        /// <param name="cultureName">The culture name in which language tha data will be returned..</param>
        /// <param name="module">The module for which the scope tree is returned..</param>
        public GetUserScopeTreeRequest(string cultureName = default(string), ModuleEnum? module = default(ModuleEnum?))
        {
            this.CultureName = cultureName;
            this.Module = module;
        }

        /// <summary>
        /// The culture name in which language tha data will be returned.
        /// </summary>
        /// <value>The culture name in which language tha data will be returned.</value>
        [DataMember(Name = "cultureName", EmitDefaultValue = false)]
        public string CultureName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUserScopeTreeRequest {\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUserScopeTreeRequest);
        }

        /// <summary>
        /// Returns true if GetUserScopeTreeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUserScopeTreeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUserScopeTreeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.Module == input.Module ||
                    this.Module.Equals(input.Module)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                hashCode = hashCode * 59 + this.Module.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
