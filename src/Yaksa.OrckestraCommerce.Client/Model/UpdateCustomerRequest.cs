/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Customers represents entities which have the ability to buy products.
    /// </summary>
    [DataContract(Name = "UpdateCustomerRequest")]
    public partial class UpdateCustomerRequest : IEquatable<UpdateCustomerRequest>, IValidatableObject
    {
        /// <summary>
        /// The current status (active/inactive/requires approval) of the customer account.
        /// </summary>
        /// <value>The current status (active/inactive/requires approval) of the customer account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountStatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,

            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 2,

            /// <summary>
            /// Enum RequiresApproval for value: RequiresApproval
            /// </summary>
            [EnumMember(Value = "RequiresApproval")]
            RequiresApproval = 3

        }


        /// <summary>
        /// The current status (active/inactive/requires approval) of the customer account.
        /// </summary>
        /// <value>The current status (active/inactive/requires approval) of the customer account.</value>
        [DataMember(Name = "accountStatus", EmitDefaultValue = false)]
        public AccountStatusEnum? AccountStatus { get; set; }
        /// <summary>
        /// the type of customer (Registered, Guest).
        /// </summary>
        /// <value>the type of customer (Registered, Guest).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerTypeEnum
        {
            /// <summary>
            /// Enum Registered for value: Registered
            /// </summary>
            [EnumMember(Value = "Registered")]
            Registered = 1,

            /// <summary>
            /// Enum Guest for value: Guest
            /// </summary>
            [EnumMember(Value = "Guest")]
            Guest = 2,

            /// <summary>
            /// Enum Unregistered for value: Unregistered
            /// </summary>
            [EnumMember(Value = "Unregistered")]
            Unregistered = 3

        }


        /// <summary>
        /// the type of customer (Registered, Guest).
        /// </summary>
        /// <value>the type of customer (Registered, Guest).</value>
        [DataMember(Name = "customerType", EmitDefaultValue = false)]
        public CustomerTypeEnum? CustomerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCustomerRequest" /> class.
        /// </summary>
        /// <param name="accountStatus">The current status (active/inactive/requires approval) of the customer account..</param>
        /// <param name="addressIds">TODO.</param>
        /// <param name="cellNumber">the number for the cellular of the customer..</param>
        /// <param name="created">the date the customer was created..</param>
        /// <param name="customerType">the type of customer (Registered, Guest)..</param>
        /// <param name="email">the email associated to the customer..</param>
        /// <param name="faxExtension">the extension, if any, for the customer fax..</param>
        /// <param name="faxNumber">the number to use for the customer fax..</param>
        /// <param name="firstName">the first name of the customer..</param>
        /// <param name="language">the preferred communication language of the customer..</param>
        /// <param name="lastModified">the date that the last modification was applied to the customer..</param>
        /// <param name="lastName">the last name of the customer..</param>
        /// <param name="passwordQuestion">the secret question for the customer..</param>
        /// <param name="phoneExtension">the extension, if any, for the telephone number of the customer..</param>
        /// <param name="phoneExtensionWork">the extension, if any, for the work phone number..</param>
        /// <param name="phoneNumber">the telephone number of the customer..</param>
        /// <param name="phoneNumberWork">the phone number at the work place of the customer..</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="username">a string of character representing a unique name used for the customer..</param>
        public UpdateCustomerRequest(AccountStatusEnum? accountStatus = default(AccountStatusEnum?), List<string> addressIds = default(List<string>), string cellNumber = default(string), DateTime created = default(DateTime), CustomerTypeEnum? customerType = default(CustomerTypeEnum?), string email = default(string), string faxExtension = default(string), string faxNumber = default(string), string firstName = default(string), string language = default(string), DateTime lastModified = default(DateTime), string lastName = default(string), string passwordQuestion = default(string), string phoneExtension = default(string), string phoneExtensionWork = default(string), string phoneNumber = default(string), string phoneNumberWork = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), string username = default(string))
        {
            this.AccountStatus = accountStatus;
            this.AddressIds = addressIds;
            this.CellNumber = cellNumber;
            this.Created = created;
            this.CustomerType = customerType;
            this.Email = email;
            this.FaxExtension = faxExtension;
            this.FaxNumber = faxNumber;
            this.FirstName = firstName;
            this.Language = language;
            this.LastModified = lastModified;
            this.LastName = lastName;
            this.PasswordQuestion = passwordQuestion;
            this.PhoneExtension = phoneExtension;
            this.PhoneExtensionWork = phoneExtensionWork;
            this.PhoneNumber = phoneNumber;
            this.PhoneNumberWork = phoneNumberWork;
            this.PropertyBag = propertyBag;
            this.Username = username;
        }

        /// <summary>
        /// TODO
        /// </summary>
        /// <value>TODO</value>
        [DataMember(Name = "addressIds", EmitDefaultValue = false)]
        public List<string> AddressIds { get; set; }

        /// <summary>
        /// the number for the cellular of the customer.
        /// </summary>
        /// <value>the number for the cellular of the customer.</value>
        [DataMember(Name = "cellNumber", EmitDefaultValue = false)]
        public string CellNumber { get; set; }

        /// <summary>
        /// the date the customer was created.
        /// </summary>
        /// <value>the date the customer was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the email associated to the customer.
        /// </summary>
        /// <value>the email associated to the customer.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// the extension, if any, for the customer fax.
        /// </summary>
        /// <value>the extension, if any, for the customer fax.</value>
        [DataMember(Name = "faxExtension", EmitDefaultValue = false)]
        public string FaxExtension { get; set; }

        /// <summary>
        /// the number to use for the customer fax.
        /// </summary>
        /// <value>the number to use for the customer fax.</value>
        [DataMember(Name = "faxNumber", EmitDefaultValue = false)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// the first name of the customer.
        /// </summary>
        /// <value>the first name of the customer.</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// the preferred communication language of the customer.
        /// </summary>
        /// <value>the preferred communication language of the customer.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// the date that the last modification was applied to the customer.
        /// </summary>
        /// <value>the date that the last modification was applied to the customer.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// the last name of the customer.
        /// </summary>
        /// <value>the last name of the customer.</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// the secret question for the customer.
        /// </summary>
        /// <value>the secret question for the customer.</value>
        [DataMember(Name = "passwordQuestion", EmitDefaultValue = false)]
        public string PasswordQuestion { get; set; }

        /// <summary>
        /// the extension, if any, for the telephone number of the customer.
        /// </summary>
        /// <value>the extension, if any, for the telephone number of the customer.</value>
        [DataMember(Name = "phoneExtension", EmitDefaultValue = false)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// the extension, if any, for the work phone number.
        /// </summary>
        /// <value>the extension, if any, for the work phone number.</value>
        [DataMember(Name = "phoneExtensionWork", EmitDefaultValue = false)]
        public string PhoneExtensionWork { get; set; }

        /// <summary>
        /// the telephone number of the customer.
        /// </summary>
        /// <value>the telephone number of the customer.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// the phone number at the work place of the customer.
        /// </summary>
        /// <value>the phone number at the work place of the customer.</value>
        [DataMember(Name = "phoneNumberWork", EmitDefaultValue = false)]
        public string PhoneNumberWork { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// a string of character representing a unique name used for the customer.
        /// </summary>
        /// <value>a string of character representing a unique name used for the customer.</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCustomerRequest {\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  AddressIds: ").Append(AddressIds).Append("\n");
            sb.Append("  CellNumber: ").Append(CellNumber).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CustomerType: ").Append(CustomerType).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FaxExtension: ").Append(FaxExtension).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  PasswordQuestion: ").Append(PasswordQuestion).Append("\n");
            sb.Append("  PhoneExtension: ").Append(PhoneExtension).Append("\n");
            sb.Append("  PhoneExtensionWork: ").Append(PhoneExtensionWork).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PhoneNumberWork: ").Append(PhoneNumberWork).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCustomerRequest);
        }

        /// <summary>
        /// Returns true if UpdateCustomerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCustomerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCustomerRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountStatus == input.AccountStatus ||
                    this.AccountStatus.Equals(input.AccountStatus)
                ) && 
                (
                    this.AddressIds == input.AddressIds ||
                    this.AddressIds != null &&
                    input.AddressIds != null &&
                    this.AddressIds.SequenceEqual(input.AddressIds)
                ) && 
                (
                    this.CellNumber == input.CellNumber ||
                    (this.CellNumber != null &&
                    this.CellNumber.Equals(input.CellNumber))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CustomerType == input.CustomerType ||
                    this.CustomerType.Equals(input.CustomerType)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FaxExtension == input.FaxExtension ||
                    (this.FaxExtension != null &&
                    this.FaxExtension.Equals(input.FaxExtension))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.PasswordQuestion == input.PasswordQuestion ||
                    (this.PasswordQuestion != null &&
                    this.PasswordQuestion.Equals(input.PasswordQuestion))
                ) && 
                (
                    this.PhoneExtension == input.PhoneExtension ||
                    (this.PhoneExtension != null &&
                    this.PhoneExtension.Equals(input.PhoneExtension))
                ) && 
                (
                    this.PhoneExtensionWork == input.PhoneExtensionWork ||
                    (this.PhoneExtensionWork != null &&
                    this.PhoneExtensionWork.Equals(input.PhoneExtensionWork))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PhoneNumberWork == input.PhoneNumberWork ||
                    (this.PhoneNumberWork != null &&
                    this.PhoneNumberWork.Equals(input.PhoneNumberWork))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                if (this.AddressIds != null)
                    hashCode = hashCode * 59 + this.AddressIds.GetHashCode();
                if (this.CellNumber != null)
                    hashCode = hashCode * 59 + this.CellNumber.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                hashCode = hashCode * 59 + this.CustomerType.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FaxExtension != null)
                    hashCode = hashCode * 59 + this.FaxExtension.GetHashCode();
                if (this.FaxNumber != null)
                    hashCode = hashCode * 59 + this.FaxNumber.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.PasswordQuestion != null)
                    hashCode = hashCode * 59 + this.PasswordQuestion.GetHashCode();
                if (this.PhoneExtension != null)
                    hashCode = hashCode * 59 + this.PhoneExtension.GetHashCode();
                if (this.PhoneExtensionWork != null)
                    hashCode = hashCode * 59 + this.PhoneExtensionWork.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.PhoneNumberWork != null)
                    hashCode = hashCode * 59 + this.PhoneNumberWork.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
