/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Products are entities which represents a buyable item managed in a catalog.
    /// </summary>
    [DataContract(Name = "UpdateProductPublicationStatusRequest")]
    public partial class UpdateProductPublicationStatusRequest : IEquatable<UpdateProductPublicationStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProductPublicationStatusRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateProductPublicationStatusRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProductPublicationStatusRequest" /> class.
        /// </summary>
        /// <param name="productIds">Ids of the products that are going to be processed (required).</param>
        /// <param name="publicationStatus">The publication status that should be set for the products. Supported values are: &#39;InProgress&#39;, &#39;PendingApproval&#39;, &#39;ReadyToCompose&#39;, &#39;Rejected&#39; and &#39;Published&#39;. (required).</param>
        public UpdateProductPublicationStatusRequest(List<string> productIds = default(List<string>), string publicationStatus = default(string))
        {
            // to ensure "productIds" is required (not null)
            this.ProductIds = productIds ?? throw new ArgumentNullException("productIds is a required property for UpdateProductPublicationStatusRequest and cannot be null");
            // to ensure "publicationStatus" is required (not null)
            this.PublicationStatus = publicationStatus ?? throw new ArgumentNullException("publicationStatus is a required property for UpdateProductPublicationStatusRequest and cannot be null");
        }

        /// <summary>
        /// Ids of the products that are going to be processed
        /// </summary>
        /// <value>Ids of the products that are going to be processed</value>
        [DataMember(Name = "productIds", IsRequired = true, EmitDefaultValue = false)]
        public List<string> ProductIds { get; set; }

        /// <summary>
        /// The publication status that should be set for the products. Supported values are: &#39;InProgress&#39;, &#39;PendingApproval&#39;, &#39;ReadyToCompose&#39;, &#39;Rejected&#39; and &#39;Published&#39;.
        /// </summary>
        /// <value>The publication status that should be set for the products. Supported values are: &#39;InProgress&#39;, &#39;PendingApproval&#39;, &#39;ReadyToCompose&#39;, &#39;Rejected&#39; and &#39;Published&#39;.</value>
        [DataMember(Name = "publicationStatus", IsRequired = true, EmitDefaultValue = false)]
        public string PublicationStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateProductPublicationStatusRequest {\n");
            sb.Append("  ProductIds: ").Append(ProductIds).Append("\n");
            sb.Append("  PublicationStatus: ").Append(PublicationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateProductPublicationStatusRequest);
        }

        /// <summary>
        /// Returns true if UpdateProductPublicationStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateProductPublicationStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateProductPublicationStatusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductIds == input.ProductIds ||
                    this.ProductIds != null &&
                    input.ProductIds != null &&
                    this.ProductIds.SequenceEqual(input.ProductIds)
                ) && 
                (
                    this.PublicationStatus == input.PublicationStatus ||
                    (this.PublicationStatus != null &&
                    this.PublicationStatus.Equals(input.PublicationStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductIds != null)
                    hashCode = hashCode * 59 + this.ProductIds.GetHashCode();
                if (this.PublicationStatus != null)
                    hashCode = hashCode * 59 + this.PublicationStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
