/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Regroupment of all CDMV messaging notifications
    /// </summary>
    [DataContract(Name = "CustomerInvitationNotificationRequest")]
    public partial class CustomerInvitationNotificationRequest : IEquatable<CustomerInvitationNotificationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerInvitationNotificationRequest" /> class.
        /// </summary>
        /// <param name="language">The customer&#39;s preferred language..</param>
        /// <param name="firstName">The customer&#39;s first name. Default is FirstName..</param>
        /// <param name="lastName">The customer&#39;s last name.Default is LastName..</param>
        /// <param name="fileNumber">The customer&#39;s medical file number.Default is a new guid..</param>
        /// <param name="emailAddress">The customer&#39;s email address.Default is a random email address @scopeId.cdmv.com.</param>
        /// <param name="numberOfProductAuthorization">The customer&#39;s preferred language..</param>
        public CustomerInvitationNotificationRequest(string language = default(string), string firstName = default(string), string lastName = default(string), string fileNumber = default(string), string emailAddress = default(string), int numberOfProductAuthorization = default(int))
        {
            this.Language = language;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.FileNumber = fileNumber;
            this.EmailAddress = emailAddress;
            this.NumberOfProductAuthorization = numberOfProductAuthorization;
        }

        /// <summary>
        /// The customer&#39;s preferred language.
        /// </summary>
        /// <value>The customer&#39;s preferred language.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The customer&#39;s first name. Default is FirstName.
        /// </summary>
        /// <value>The customer&#39;s first name. Default is FirstName.</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The customer&#39;s last name.Default is LastName.
        /// </summary>
        /// <value>The customer&#39;s last name.Default is LastName.</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The customer&#39;s medical file number.Default is a new guid.
        /// </summary>
        /// <value>The customer&#39;s medical file number.Default is a new guid.</value>
        [DataMember(Name = "fileNumber", EmitDefaultValue = false)]
        public string FileNumber { get; set; }

        /// <summary>
        /// The customer&#39;s email address.Default is a random email address @scopeId.cdmv.com
        /// </summary>
        /// <value>The customer&#39;s email address.Default is a random email address @scopeId.cdmv.com</value>
        [DataMember(Name = "emailAddress", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The customer&#39;s preferred language.
        /// </summary>
        /// <value>The customer&#39;s preferred language.</value>
        [DataMember(Name = "numberOfProductAuthorization", EmitDefaultValue = false)]
        public int NumberOfProductAuthorization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerInvitationNotificationRequest {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FileNumber: ").Append(FileNumber).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  NumberOfProductAuthorization: ").Append(NumberOfProductAuthorization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerInvitationNotificationRequest);
        }

        /// <summary>
        /// Returns true if CustomerInvitationNotificationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerInvitationNotificationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerInvitationNotificationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.FileNumber == input.FileNumber ||
                    (this.FileNumber != null &&
                    this.FileNumber.Equals(input.FileNumber))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.NumberOfProductAuthorization == input.NumberOfProductAuthorization ||
                    this.NumberOfProductAuthorization.Equals(input.NumberOfProductAuthorization)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.FileNumber != null)
                    hashCode = hashCode * 59 + this.FileNumber.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfProductAuthorization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
