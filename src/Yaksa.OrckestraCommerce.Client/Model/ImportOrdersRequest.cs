/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Integration resources dedicated to data exchanges across system boundaries or other systems.
    /// </summary>
    [DataContract(Name = "ImportOrdersRequest")]
    public partial class ImportOrdersRequest : IEquatable<ImportOrdersRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportOrdersRequest" /> class.
        /// </summary>
        /// <param name="correlationId">The correlation id for the durable task..</param>
        /// <param name="orderLocationNumber">The location (store) of the order.</param>
        /// <param name="orderNumberBatchPrefix">Prefix used to allow system integrator to ensure that there will be no clash with current order numbering.</param>
        /// <param name="path">The path of the file(s) to import..</param>
        /// <param name="replaceExistingOrders">Indicates that existing orders will be replaced based on their Order Number.</param>
        public ImportOrdersRequest(string correlationId = default(string), string orderLocationNumber = default(string), string orderNumberBatchPrefix = default(string), string path = default(string), bool replaceExistingOrders = default(bool))
        {
            this.CorrelationId = correlationId;
            this.OrderLocationNumber = orderLocationNumber;
            this.OrderNumberBatchPrefix = orderNumberBatchPrefix;
            this.Path = path;
            this.ReplaceExistingOrders = replaceExistingOrders;
        }

        /// <summary>
        /// The correlation id for the durable task.
        /// </summary>
        /// <value>The correlation id for the durable task.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// The location (store) of the order
        /// </summary>
        /// <value>The location (store) of the order</value>
        [DataMember(Name = "orderLocationNumber", EmitDefaultValue = false)]
        public string OrderLocationNumber { get; set; }

        /// <summary>
        /// Prefix used to allow system integrator to ensure that there will be no clash with current order numbering
        /// </summary>
        /// <value>Prefix used to allow system integrator to ensure that there will be no clash with current order numbering</value>
        [DataMember(Name = "orderNumberBatchPrefix", EmitDefaultValue = false)]
        public string OrderNumberBatchPrefix { get; set; }

        /// <summary>
        /// The path of the file(s) to import.
        /// </summary>
        /// <value>The path of the file(s) to import.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Indicates that existing orders will be replaced based on their Order Number
        /// </summary>
        /// <value>Indicates that existing orders will be replaced based on their Order Number</value>
        [DataMember(Name = "replaceExistingOrders", EmitDefaultValue = true)]
        public bool ReplaceExistingOrders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportOrdersRequest {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  OrderLocationNumber: ").Append(OrderLocationNumber).Append("\n");
            sb.Append("  OrderNumberBatchPrefix: ").Append(OrderNumberBatchPrefix).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ReplaceExistingOrders: ").Append(ReplaceExistingOrders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportOrdersRequest);
        }

        /// <summary>
        /// Returns true if ImportOrdersRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportOrdersRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportOrdersRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.OrderLocationNumber == input.OrderLocationNumber ||
                    (this.OrderLocationNumber != null &&
                    this.OrderLocationNumber.Equals(input.OrderLocationNumber))
                ) && 
                (
                    this.OrderNumberBatchPrefix == input.OrderNumberBatchPrefix ||
                    (this.OrderNumberBatchPrefix != null &&
                    this.OrderNumberBatchPrefix.Equals(input.OrderNumberBatchPrefix))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ReplaceExistingOrders == input.ReplaceExistingOrders ||
                    this.ReplaceExistingOrders.Equals(input.ReplaceExistingOrders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.OrderLocationNumber != null)
                    hashCode = hashCode * 59 + this.OrderLocationNumber.GetHashCode();
                if (this.OrderNumberBatchPrefix != null)
                    hashCode = hashCode * 59 + this.OrderNumberBatchPrefix.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                hashCode = hashCode * 59 + this.ReplaceExistingOrders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
