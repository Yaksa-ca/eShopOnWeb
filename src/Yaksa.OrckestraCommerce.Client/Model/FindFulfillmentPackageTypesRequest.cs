/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// API calls used during the fulfillment process.
    /// </summary>
    [DataContract(Name = "FindFulfillmentPackageTypesRequest")]
    public partial class FindFulfillmentPackageTypesRequest : IEquatable<FindFulfillmentPackageTypesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindFulfillmentPackageTypesRequest" /> class.
        /// </summary>
        /// <param name="includeParentScopes">Determine if parent scope fulfillment package types are included or not.</param>
        /// <param name="onlyActive">Whether we should retrieve only the active fulfillment package types..</param>
        public FindFulfillmentPackageTypesRequest(bool includeParentScopes = default(bool), bool onlyActive = default(bool))
        {
            this.IncludeParentScopes = includeParentScopes;
            this.OnlyActive = onlyActive;
        }

        /// <summary>
        /// Determine if parent scope fulfillment package types are included or not
        /// </summary>
        /// <value>Determine if parent scope fulfillment package types are included or not</value>
        [DataMember(Name = "includeParentScopes", EmitDefaultValue = true)]
        public bool IncludeParentScopes { get; set; }

        /// <summary>
        /// Whether we should retrieve only the active fulfillment package types.
        /// </summary>
        /// <value>Whether we should retrieve only the active fulfillment package types.</value>
        [DataMember(Name = "onlyActive", EmitDefaultValue = true)]
        public bool OnlyActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindFulfillmentPackageTypesRequest {\n");
            sb.Append("  IncludeParentScopes: ").Append(IncludeParentScopes).Append("\n");
            sb.Append("  OnlyActive: ").Append(OnlyActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindFulfillmentPackageTypesRequest);
        }

        /// <summary>
        /// Returns true if FindFulfillmentPackageTypesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindFulfillmentPackageTypesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindFulfillmentPackageTypesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncludeParentScopes == input.IncludeParentScopes ||
                    this.IncludeParentScopes.Equals(input.IncludeParentScopes)
                ) && 
                (
                    this.OnlyActive == input.OnlyActive ||
                    this.OnlyActive.Equals(input.OnlyActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.IncludeParentScopes.GetHashCode();
                hashCode = hashCode * 59 + this.OnlyActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
