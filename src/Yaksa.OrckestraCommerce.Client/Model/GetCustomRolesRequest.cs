/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Roles represents what a person/group is.
    /// </summary>
    [DataContract(Name = "GetCustomRolesRequest")]
    public partial class GetCustomRolesRequest : IEquatable<GetCustomRolesRequest>, IValidatableObject
    {
        /// <summary>
        /// The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName.
        /// </summary>
        /// <value>The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderByEnum
        {
            /// <summary>
            /// Enum DisplayName for value: DisplayName
            /// </summary>
            [EnumMember(Value = "DisplayName")]
            DisplayName = 1,

            /// <summary>
            /// Enum Status for value: Status
            /// </summary>
            [EnumMember(Value = "Status")]
            Status = 2

        }


        /// <summary>
        /// The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName.
        /// </summary>
        /// <value>The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName.</value>
        [DataMember(Name = "orderBy", EmitDefaultValue = false)]
        public OrderByEnum? OrderBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCustomRolesRequest" /> class.
        /// </summary>
        /// <param name="cultureCode">The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory..</param>
        /// <param name="orderBy">The &#39;order by attribute&#39; use to sort custom roles return. By default, the custom roles will be order by DisplayName..</param>
        public GetCustomRolesRequest(string cultureCode = default(string), OrderByEnum? orderBy = default(OrderByEnum?))
        {
            this.CultureCode = cultureCode;
            this.OrderBy = orderBy;
        }

        /// <summary>
        /// The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory.
        /// </summary>
        /// <value>The CultureCode is use when you sort by DisplayName. By default, the culture &#39;en_US&#39; will be use. If you don&#39;t sort by display name, this parameter is not mandatory.</value>
        [DataMember(Name = "cultureCode", EmitDefaultValue = false)]
        public string CultureCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCustomRolesRequest {\n");
            sb.Append("  CultureCode: ").Append(CultureCode).Append("\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCustomRolesRequest);
        }

        /// <summary>
        /// Returns true if GetCustomRolesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCustomRolesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCustomRolesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CultureCode == input.CultureCode ||
                    (this.CultureCode != null &&
                    this.CultureCode.Equals(input.CultureCode))
                ) && 
                (
                    this.OrderBy == input.OrderBy ||
                    this.OrderBy.Equals(input.OrderBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CultureCode != null)
                    hashCode = hashCode * 59 + this.CultureCode.GetHashCode();
                hashCode = hashCode * 59 + this.OrderBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
