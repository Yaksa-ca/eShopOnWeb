/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// CartSummary
    /// </summary>
    [DataContract(Name = "CartSummary")]
    public partial class CartSummary : IEquatable<CartSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CartSummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CartSummary" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="additionalFeeTotal">discount amount applied on the cart, independently from line item and shipping discounts..</param>
        /// <param name="billingCurrency">the currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;..</param>
        /// <param name="cartType">the cart type, according to the CartType lookup..</param>
        /// <param name="created">Date the entity was created.</param>
        /// <param name="customerId">the ID of the customer owning this cart. (required).</param>
        /// <param name="discountAmount">discount amount applied on the cart, independently from line item and shipping discounts..</param>
        /// <param name="discountTotal">the computed sum of all discounts applied to the cart (including order, line item and shipping level discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="merchandiseTotal">the total amount of all line items merchandise without discounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="name">the name of the cart. (required).</param>
        /// <param name="scopeId">the scope..</param>
        /// <param name="shipmentSummaries">the list of shipment summaries..</param>
        /// <param name="shippingTotal">the computed sum of all shipment amounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="source">the cart source..</param>
        /// <param name="subTotal">the computed sum of all line items totals, including line item and order level discount. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="taxTotal">the computed sum of all tax amount for the order. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        /// <param name="total">the grand total for the cart. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated..</param>
        public CartSummary(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), double additionalFeeTotal = default(double), string billingCurrency = default(string), string cartType = default(string), DateTime created = default(DateTime), string customerId = default(string), double discountAmount = default(double), double discountTotal = default(double), double merchandiseTotal = default(double), string name = default(string), string scopeId = default(string), List<ShipmentSummary> shipmentSummaries = default(List<ShipmentSummary>), double shippingTotal = default(double), string source = default(string), double subTotal = default(double), double taxTotal = default(double), double total = default(double))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for CartSummary and cannot be null");
            // to ensure "customerId" is required (not null)
            this.CustomerId = customerId ?? throw new ArgumentNullException("customerId is a required property for CartSummary and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for CartSummary and cannot be null");
            this.PropertyBag = propertyBag;
            this.AdditionalFeeTotal = additionalFeeTotal;
            this.BillingCurrency = billingCurrency;
            this.CartType = cartType;
            this.Created = created;
            this.DiscountAmount = discountAmount;
            this.DiscountTotal = discountTotal;
            this.MerchandiseTotal = merchandiseTotal;
            this.ScopeId = scopeId;
            this.ShipmentSummaries = shipmentSummaries;
            this.ShippingTotal = shippingTotal;
            this.Source = source;
            this.SubTotal = subTotal;
            this.TaxTotal = taxTotal;
            this.Total = total;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// discount amount applied on the cart, independently from line item and shipping discounts.
        /// </summary>
        /// <value>discount amount applied on the cart, independently from line item and shipping discounts.</value>
        [DataMember(Name = "additionalFeeTotal", EmitDefaultValue = false)]
        public double AdditionalFeeTotal { get; set; }

        /// <summary>
        /// the currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;.
        /// </summary>
        /// <value>the currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;.</value>
        [DataMember(Name = "billingCurrency", EmitDefaultValue = false)]
        public string BillingCurrency { get; set; }

        /// <summary>
        /// the cart type, according to the CartType lookup.
        /// </summary>
        /// <value>the cart type, according to the CartType lookup.</value>
        [DataMember(Name = "cartType", EmitDefaultValue = false)]
        public string CartType { get; set; }

        /// <summary>
        /// Date the entity was created
        /// </summary>
        /// <value>Date the entity was created</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the ID of the customer owning this cart.
        /// </summary>
        /// <value>the ID of the customer owning this cart.</value>
        [DataMember(Name = "customerId", IsRequired = true, EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// discount amount applied on the cart, independently from line item and shipping discounts.
        /// </summary>
        /// <value>discount amount applied on the cart, independently from line item and shipping discounts.</value>
        [DataMember(Name = "discountAmount", EmitDefaultValue = false)]
        public double DiscountAmount { get; set; }

        /// <summary>
        /// the computed sum of all discounts applied to the cart (including order, line item and shipping level discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>the computed sum of all discounts applied to the cart (including order, line item and shipping level discounts). This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "discountTotal", EmitDefaultValue = false)]
        public double DiscountTotal { get; set; }

        /// <summary>
        /// the total amount of all line items merchandise without discounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>the total amount of all line items merchandise without discounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "merchandiseTotal", EmitDefaultValue = false)]
        public double MerchandiseTotal { get; set; }

        /// <summary>
        /// the name of the cart.
        /// </summary>
        /// <value>the name of the cart.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the scope.
        /// </summary>
        /// <value>the scope.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// the list of shipment summaries.
        /// </summary>
        /// <value>the list of shipment summaries.</value>
        [DataMember(Name = "shipmentSummaries", EmitDefaultValue = false)]
        public List<ShipmentSummary> ShipmentSummaries { get; set; }

        /// <summary>
        /// the computed sum of all shipment amounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>the computed sum of all shipment amounts. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "shippingTotal", EmitDefaultValue = false)]
        public double ShippingTotal { get; set; }

        /// <summary>
        /// the cart source.
        /// </summary>
        /// <value>the cart source.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// the computed sum of all line items totals, including line item and order level discount. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>the computed sum of all line items totals, including line item and order level discount. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "subTotal", EmitDefaultValue = false)]
        public double SubTotal { get; set; }

        /// <summary>
        /// the computed sum of all tax amount for the order. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>the computed sum of all tax amount for the order. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "taxTotal", EmitDefaultValue = false)]
        public double TaxTotal { get; set; }

        /// <summary>
        /// the grand total for the cart. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.
        /// </summary>
        /// <value>the grand total for the cart. This value is usually computed during the workflow execution. When null, indicates that the value has not been calculated.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  AdditionalFeeTotal: ").Append(AdditionalFeeTotal).Append("\n");
            sb.Append("  BillingCurrency: ").Append(BillingCurrency).Append("\n");
            sb.Append("  CartType: ").Append(CartType).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountTotal: ").Append(DiscountTotal).Append("\n");
            sb.Append("  MerchandiseTotal: ").Append(MerchandiseTotal).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  ShipmentSummaries: ").Append(ShipmentSummaries).Append("\n");
            sb.Append("  ShippingTotal: ").Append(ShippingTotal).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartSummary);
        }

        /// <summary>
        /// Returns true if CartSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of CartSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.AdditionalFeeTotal == input.AdditionalFeeTotal ||
                    this.AdditionalFeeTotal.Equals(input.AdditionalFeeTotal)
                ) && 
                (
                    this.BillingCurrency == input.BillingCurrency ||
                    (this.BillingCurrency != null &&
                    this.BillingCurrency.Equals(input.BillingCurrency))
                ) && 
                (
                    this.CartType == input.CartType ||
                    (this.CartType != null &&
                    this.CartType.Equals(input.CartType))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    this.DiscountAmount.Equals(input.DiscountAmount)
                ) && 
                (
                    this.DiscountTotal == input.DiscountTotal ||
                    this.DiscountTotal.Equals(input.DiscountTotal)
                ) && 
                (
                    this.MerchandiseTotal == input.MerchandiseTotal ||
                    this.MerchandiseTotal.Equals(input.MerchandiseTotal)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.ShipmentSummaries == input.ShipmentSummaries ||
                    this.ShipmentSummaries != null &&
                    input.ShipmentSummaries != null &&
                    this.ShipmentSummaries.SequenceEqual(input.ShipmentSummaries)
                ) && 
                (
                    this.ShippingTotal == input.ShippingTotal ||
                    this.ShippingTotal.Equals(input.ShippingTotal)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    this.SubTotal.Equals(input.SubTotal)
                ) && 
                (
                    this.TaxTotal == input.TaxTotal ||
                    this.TaxTotal.Equals(input.TaxTotal)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.AdditionalFeeTotal.GetHashCode();
                if (this.BillingCurrency != null)
                    hashCode = hashCode * 59 + this.BillingCurrency.GetHashCode();
                if (this.CartType != null)
                    hashCode = hashCode * 59 + this.CartType.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                hashCode = hashCode * 59 + this.DiscountTotal.GetHashCode();
                hashCode = hashCode * 59 + this.MerchandiseTotal.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.ShipmentSummaries != null)
                    hashCode = hashCode * 59 + this.ShipmentSummaries.GetHashCode();
                hashCode = hashCode * 59 + this.ShippingTotal.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                hashCode = hashCode * 59 + this.TaxTotal.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
