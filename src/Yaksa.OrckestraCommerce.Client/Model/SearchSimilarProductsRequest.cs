/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// The API used to query the search engine.
    /// </summary>
    [DataContract(Name = "SearchSimilarProductsRequest")]
    public partial class SearchSimilarProductsRequest : IEquatable<SearchSimilarProductsRequest>, IValidatableObject
    {
        /// <summary>
        /// The variant grouping strategy
        /// </summary>
        /// <value>The variant grouping strategy</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VariantGroupingStrategyEnum
        {
            /// <summary>
            /// Enum PerConfiguredSearchOption for value: PerConfiguredSearchOption
            /// </summary>
            [EnumMember(Value = "PerConfiguredSearchOption")]
            PerConfiguredSearchOption = 1,

            /// <summary>
            /// Enum PerProduct for value: PerProduct
            /// </summary>
            [EnumMember(Value = "PerProduct")]
            PerProduct = 2,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3

        }


        /// <summary>
        /// The variant grouping strategy
        /// </summary>
        /// <value>The variant grouping strategy</value>
        [DataMember(Name = "variantGroupingStrategy", EmitDefaultValue = false)]
        public VariantGroupingStrategyEnum? VariantGroupingStrategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSimilarProductsRequest" /> class.
        /// </summary>
        /// <param name="maxNumberOfResults">The maximum number of results.</param>
        /// <param name="maxPrice">The maximum price.</param>
        /// <param name="minPrice">The minimum price.</param>
        /// <param name="onlyActiveProducts">Whether or not retrieve only active products.</param>
        /// <param name="query">query.</param>
        /// <param name="variantGroupingStrategy">The variant grouping strategy.</param>
        public SearchSimilarProductsRequest(int maxNumberOfResults = default(int), int maxPrice = default(int), int minPrice = default(int), bool onlyActiveProducts = default(bool), Query query = default(Query), VariantGroupingStrategyEnum? variantGroupingStrategy = default(VariantGroupingStrategyEnum?))
        {
            this.MaxNumberOfResults = maxNumberOfResults;
            this.MaxPrice = maxPrice;
            this.MinPrice = minPrice;
            this.OnlyActiveProducts = onlyActiveProducts;
            this.Query = query;
            this.VariantGroupingStrategy = variantGroupingStrategy;
        }

        /// <summary>
        /// The maximum number of results
        /// </summary>
        /// <value>The maximum number of results</value>
        [DataMember(Name = "maxNumberOfResults", EmitDefaultValue = false)]
        public int MaxNumberOfResults { get; set; }

        /// <summary>
        /// The maximum price
        /// </summary>
        /// <value>The maximum price</value>
        [DataMember(Name = "maxPrice", EmitDefaultValue = false)]
        public int MaxPrice { get; set; }

        /// <summary>
        /// The minimum price
        /// </summary>
        /// <value>The minimum price</value>
        [DataMember(Name = "minPrice", EmitDefaultValue = false)]
        public int MinPrice { get; set; }

        /// <summary>
        /// Whether or not retrieve only active products
        /// </summary>
        /// <value>Whether or not retrieve only active products</value>
        [DataMember(Name = "onlyActiveProducts", EmitDefaultValue = true)]
        public bool OnlyActiveProducts { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public Query Query { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchSimilarProductsRequest {\n");
            sb.Append("  MaxNumberOfResults: ").Append(MaxNumberOfResults).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("  MinPrice: ").Append(MinPrice).Append("\n");
            sb.Append("  OnlyActiveProducts: ").Append(OnlyActiveProducts).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  VariantGroupingStrategy: ").Append(VariantGroupingStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchSimilarProductsRequest);
        }

        /// <summary>
        /// Returns true if SearchSimilarProductsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchSimilarProductsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchSimilarProductsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxNumberOfResults == input.MaxNumberOfResults ||
                    this.MaxNumberOfResults.Equals(input.MaxNumberOfResults)
                ) && 
                (
                    this.MaxPrice == input.MaxPrice ||
                    this.MaxPrice.Equals(input.MaxPrice)
                ) && 
                (
                    this.MinPrice == input.MinPrice ||
                    this.MinPrice.Equals(input.MinPrice)
                ) && 
                (
                    this.OnlyActiveProducts == input.OnlyActiveProducts ||
                    this.OnlyActiveProducts.Equals(input.OnlyActiveProducts)
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.VariantGroupingStrategy == input.VariantGroupingStrategy ||
                    this.VariantGroupingStrategy.Equals(input.VariantGroupingStrategy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.MaxNumberOfResults.GetHashCode();
                hashCode = hashCode * 59 + this.MaxPrice.GetHashCode();
                hashCode = hashCode * 59 + this.MinPrice.GetHashCode();
                hashCode = hashCode * 59 + this.OnlyActiveProducts.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                hashCode = hashCode * 59 + this.VariantGroupingStrategy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
