/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// RecurringOrderLineItem
    /// </summary>
    [DataContract(Name = "RecurringOrderLineItem")]
    public partial class RecurringOrderLineItem : IEquatable<RecurringOrderLineItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringOrderLineItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecurringOrderLineItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringOrderLineItem" /> class.
        /// </summary>
        /// <param name="created">The date of the creation of the entity (required).</param>
        /// <param name="createdBy">The id of the person who created the entity (required).</param>
        /// <param name="lastModified">The date of the last modification (required).</param>
        /// <param name="lastModifiedBy">The id of the last person who modified the entity (required).</param>
        /// <param name="billingAddressId">The billing address id of the recurring order line item (required).</param>
        /// <param name="customerId">The customer id of the recurring order line item (required).</param>
        /// <param name="fulfillmentMethodName">The fulfillment method name of the recurring order line item (required).</param>
        /// <param name="nextOccurence">The next occurence of the recurring order line item (required).</param>
        /// <param name="paymentMethodId">The payment method id of the recurring order line item (required).</param>
        /// <param name="paymentProviderName">The payment method provider name of the recurring order line item (required).</param>
        /// <param name="previousOccurence">The previous occurence of the recurring order line item.</param>
        /// <param name="productDisplayName">The product display name of the recurring order line item (required).</param>
        /// <param name="productId">The product name of the recurring order line item (required).</param>
        /// <param name="quantity">The quantity of the recurring order line item (required).</param>
        /// <param name="recurringOrderFrequencyName">The name of the recurring order frequency of the recurring order line item (required).</param>
        /// <param name="recurringOrderLineItemId">The recurring order line item id (required).</param>
        /// <param name="recurringOrderProgramName">The name of the recurring order program of the recurring order line item (required).</param>
        /// <param name="scopeId">The scope of the recurring order line item (required).</param>
        /// <param name="shippingAddressId">The shipping address id of the recurring order line item (required).</param>
        /// <param name="shippingProviderId">The shipping provider id of the recurring order line item (required).</param>
        /// <param name="sku">The sku of the recurring order line item (required).</param>
        /// <param name="tag">The tag of the recurring order line item.</param>
        /// <param name="variantId">The variant name of the recurring order line item.</param>
        public RecurringOrderLineItem(DateTime created = default(DateTime), string createdBy = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), string billingAddressId = default(string), string customerId = default(string), string fulfillmentMethodName = default(string), DateTime nextOccurence = default(DateTime), string paymentMethodId = default(string), string paymentProviderName = default(string), DateTime previousOccurence = default(DateTime), string productDisplayName = default(string), string productId = default(string), double quantity = default(double), string recurringOrderFrequencyName = default(string), string recurringOrderLineItemId = default(string), string recurringOrderProgramName = default(string), string scopeId = default(string), string shippingAddressId = default(string), string shippingProviderId = default(string), string sku = default(string), string tag = default(string), string variantId = default(string))
        {
            this.Created = created;
            // to ensure "createdBy" is required (not null)
            this.CreatedBy = createdBy ?? throw new ArgumentNullException("createdBy is a required property for RecurringOrderLineItem and cannot be null");
            this.LastModified = lastModified;
            // to ensure "lastModifiedBy" is required (not null)
            this.LastModifiedBy = lastModifiedBy ?? throw new ArgumentNullException("lastModifiedBy is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "billingAddressId" is required (not null)
            this.BillingAddressId = billingAddressId ?? throw new ArgumentNullException("billingAddressId is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "customerId" is required (not null)
            this.CustomerId = customerId ?? throw new ArgumentNullException("customerId is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "fulfillmentMethodName" is required (not null)
            this.FulfillmentMethodName = fulfillmentMethodName ?? throw new ArgumentNullException("fulfillmentMethodName is a required property for RecurringOrderLineItem and cannot be null");
            this.NextOccurence = nextOccurence;
            // to ensure "paymentMethodId" is required (not null)
            this.PaymentMethodId = paymentMethodId ?? throw new ArgumentNullException("paymentMethodId is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "paymentProviderName" is required (not null)
            this.PaymentProviderName = paymentProviderName ?? throw new ArgumentNullException("paymentProviderName is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "productDisplayName" is required (not null)
            this.ProductDisplayName = productDisplayName ?? throw new ArgumentNullException("productDisplayName is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "productId" is required (not null)
            this.ProductId = productId ?? throw new ArgumentNullException("productId is a required property for RecurringOrderLineItem and cannot be null");
            this.Quantity = quantity;
            // to ensure "recurringOrderFrequencyName" is required (not null)
            this.RecurringOrderFrequencyName = recurringOrderFrequencyName ?? throw new ArgumentNullException("recurringOrderFrequencyName is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "recurringOrderLineItemId" is required (not null)
            this.RecurringOrderLineItemId = recurringOrderLineItemId ?? throw new ArgumentNullException("recurringOrderLineItemId is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "recurringOrderProgramName" is required (not null)
            this.RecurringOrderProgramName = recurringOrderProgramName ?? throw new ArgumentNullException("recurringOrderProgramName is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "scopeId" is required (not null)
            this.ScopeId = scopeId ?? throw new ArgumentNullException("scopeId is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "shippingAddressId" is required (not null)
            this.ShippingAddressId = shippingAddressId ?? throw new ArgumentNullException("shippingAddressId is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "shippingProviderId" is required (not null)
            this.ShippingProviderId = shippingProviderId ?? throw new ArgumentNullException("shippingProviderId is a required property for RecurringOrderLineItem and cannot be null");
            // to ensure "sku" is required (not null)
            this.Sku = sku ?? throw new ArgumentNullException("sku is a required property for RecurringOrderLineItem and cannot be null");
            this.PreviousOccurence = previousOccurence;
            this.Tag = tag;
            this.VariantId = variantId;
        }

        /// <summary>
        /// The date of the creation of the entity
        /// </summary>
        /// <value>The date of the creation of the entity</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The id of the person who created the entity
        /// </summary>
        /// <value>The id of the person who created the entity</value>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The date of the last modification
        /// </summary>
        /// <value>The date of the last modification</value>
        [DataMember(Name = "lastModified", IsRequired = true, EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The id of the last person who modified the entity
        /// </summary>
        /// <value>The id of the last person who modified the entity</value>
        [DataMember(Name = "lastModifiedBy", IsRequired = true, EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The billing address id of the recurring order line item
        /// </summary>
        /// <value>The billing address id of the recurring order line item</value>
        [DataMember(Name = "billingAddressId", IsRequired = true, EmitDefaultValue = false)]
        public string BillingAddressId { get; set; }

        /// <summary>
        /// The customer id of the recurring order line item
        /// </summary>
        /// <value>The customer id of the recurring order line item</value>
        [DataMember(Name = "customerId", IsRequired = true, EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The fulfillment method name of the recurring order line item
        /// </summary>
        /// <value>The fulfillment method name of the recurring order line item</value>
        [DataMember(Name = "fulfillmentMethodName", IsRequired = true, EmitDefaultValue = false)]
        public string FulfillmentMethodName { get; set; }

        /// <summary>
        /// The next occurence of the recurring order line item
        /// </summary>
        /// <value>The next occurence of the recurring order line item</value>
        [DataMember(Name = "nextOccurence", IsRequired = true, EmitDefaultValue = false)]
        public DateTime NextOccurence { get; set; }

        /// <summary>
        /// The payment method id of the recurring order line item
        /// </summary>
        /// <value>The payment method id of the recurring order line item</value>
        [DataMember(Name = "paymentMethodId", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// The payment method provider name of the recurring order line item
        /// </summary>
        /// <value>The payment method provider name of the recurring order line item</value>
        [DataMember(Name = "paymentProviderName", IsRequired = true, EmitDefaultValue = false)]
        public string PaymentProviderName { get; set; }

        /// <summary>
        /// The previous occurence of the recurring order line item
        /// </summary>
        /// <value>The previous occurence of the recurring order line item</value>
        [DataMember(Name = "previousOccurence", EmitDefaultValue = false)]
        public DateTime PreviousOccurence { get; set; }

        /// <summary>
        /// The product display name of the recurring order line item
        /// </summary>
        /// <value>The product display name of the recurring order line item</value>
        [DataMember(Name = "productDisplayName", IsRequired = true, EmitDefaultValue = false)]
        public string ProductDisplayName { get; set; }

        /// <summary>
        /// The product name of the recurring order line item
        /// </summary>
        /// <value>The product name of the recurring order line item</value>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = false)]
        public string ProductId { get; set; }

        /// <summary>
        /// The quantity of the recurring order line item
        /// </summary>
        /// <value>The quantity of the recurring order line item</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// The name of the recurring order frequency of the recurring order line item
        /// </summary>
        /// <value>The name of the recurring order frequency of the recurring order line item</value>
        [DataMember(Name = "recurringOrderFrequencyName", IsRequired = true, EmitDefaultValue = false)]
        public string RecurringOrderFrequencyName { get; set; }

        /// <summary>
        /// The recurring order line item id
        /// </summary>
        /// <value>The recurring order line item id</value>
        [DataMember(Name = "recurringOrderLineItemId", IsRequired = true, EmitDefaultValue = false)]
        public string RecurringOrderLineItemId { get; set; }

        /// <summary>
        /// The name of the recurring order program of the recurring order line item
        /// </summary>
        /// <value>The name of the recurring order program of the recurring order line item</value>
        [DataMember(Name = "recurringOrderProgramName", IsRequired = true, EmitDefaultValue = false)]
        public string RecurringOrderProgramName { get; set; }

        /// <summary>
        /// The scope of the recurring order line item
        /// </summary>
        /// <value>The scope of the recurring order line item</value>
        [DataMember(Name = "scopeId", IsRequired = true, EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The shipping address id of the recurring order line item
        /// </summary>
        /// <value>The shipping address id of the recurring order line item</value>
        [DataMember(Name = "shippingAddressId", IsRequired = true, EmitDefaultValue = false)]
        public string ShippingAddressId { get; set; }

        /// <summary>
        /// The shipping provider id of the recurring order line item
        /// </summary>
        /// <value>The shipping provider id of the recurring order line item</value>
        [DataMember(Name = "shippingProviderId", IsRequired = true, EmitDefaultValue = false)]
        public string ShippingProviderId { get; set; }

        /// <summary>
        /// The sku of the recurring order line item
        /// </summary>
        /// <value>The sku of the recurring order line item</value>
        [DataMember(Name = "sku", IsRequired = true, EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// The tag of the recurring order line item
        /// </summary>
        /// <value>The tag of the recurring order line item</value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// The variant name of the recurring order line item
        /// </summary>
        /// <value>The variant name of the recurring order line item</value>
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecurringOrderLineItem {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  BillingAddressId: ").Append(BillingAddressId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  FulfillmentMethodName: ").Append(FulfillmentMethodName).Append("\n");
            sb.Append("  NextOccurence: ").Append(NextOccurence).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PaymentProviderName: ").Append(PaymentProviderName).Append("\n");
            sb.Append("  PreviousOccurence: ").Append(PreviousOccurence).Append("\n");
            sb.Append("  ProductDisplayName: ").Append(ProductDisplayName).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RecurringOrderFrequencyName: ").Append(RecurringOrderFrequencyName).Append("\n");
            sb.Append("  RecurringOrderLineItemId: ").Append(RecurringOrderLineItemId).Append("\n");
            sb.Append("  RecurringOrderProgramName: ").Append(RecurringOrderProgramName).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  ShippingAddressId: ").Append(ShippingAddressId).Append("\n");
            sb.Append("  ShippingProviderId: ").Append(ShippingProviderId).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurringOrderLineItem);
        }

        /// <summary>
        /// Returns true if RecurringOrderLineItem instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurringOrderLineItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurringOrderLineItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.BillingAddressId == input.BillingAddressId ||
                    (this.BillingAddressId != null &&
                    this.BillingAddressId.Equals(input.BillingAddressId))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.FulfillmentMethodName == input.FulfillmentMethodName ||
                    (this.FulfillmentMethodName != null &&
                    this.FulfillmentMethodName.Equals(input.FulfillmentMethodName))
                ) && 
                (
                    this.NextOccurence == input.NextOccurence ||
                    (this.NextOccurence != null &&
                    this.NextOccurence.Equals(input.NextOccurence))
                ) && 
                (
                    this.PaymentMethodId == input.PaymentMethodId ||
                    (this.PaymentMethodId != null &&
                    this.PaymentMethodId.Equals(input.PaymentMethodId))
                ) && 
                (
                    this.PaymentProviderName == input.PaymentProviderName ||
                    (this.PaymentProviderName != null &&
                    this.PaymentProviderName.Equals(input.PaymentProviderName))
                ) && 
                (
                    this.PreviousOccurence == input.PreviousOccurence ||
                    (this.PreviousOccurence != null &&
                    this.PreviousOccurence.Equals(input.PreviousOccurence))
                ) && 
                (
                    this.ProductDisplayName == input.ProductDisplayName ||
                    (this.ProductDisplayName != null &&
                    this.ProductDisplayName.Equals(input.ProductDisplayName))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.RecurringOrderFrequencyName == input.RecurringOrderFrequencyName ||
                    (this.RecurringOrderFrequencyName != null &&
                    this.RecurringOrderFrequencyName.Equals(input.RecurringOrderFrequencyName))
                ) && 
                (
                    this.RecurringOrderLineItemId == input.RecurringOrderLineItemId ||
                    (this.RecurringOrderLineItemId != null &&
                    this.RecurringOrderLineItemId.Equals(input.RecurringOrderLineItemId))
                ) && 
                (
                    this.RecurringOrderProgramName == input.RecurringOrderProgramName ||
                    (this.RecurringOrderProgramName != null &&
                    this.RecurringOrderProgramName.Equals(input.RecurringOrderProgramName))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.ShippingAddressId == input.ShippingAddressId ||
                    (this.ShippingAddressId != null &&
                    this.ShippingAddressId.Equals(input.ShippingAddressId))
                ) && 
                (
                    this.ShippingProviderId == input.ShippingProviderId ||
                    (this.ShippingProviderId != null &&
                    this.ShippingProviderId.Equals(input.ShippingProviderId))
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.BillingAddressId != null)
                    hashCode = hashCode * 59 + this.BillingAddressId.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.FulfillmentMethodName != null)
                    hashCode = hashCode * 59 + this.FulfillmentMethodName.GetHashCode();
                if (this.NextOccurence != null)
                    hashCode = hashCode * 59 + this.NextOccurence.GetHashCode();
                if (this.PaymentMethodId != null)
                    hashCode = hashCode * 59 + this.PaymentMethodId.GetHashCode();
                if (this.PaymentProviderName != null)
                    hashCode = hashCode * 59 + this.PaymentProviderName.GetHashCode();
                if (this.PreviousOccurence != null)
                    hashCode = hashCode * 59 + this.PreviousOccurence.GetHashCode();
                if (this.ProductDisplayName != null)
                    hashCode = hashCode * 59 + this.ProductDisplayName.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RecurringOrderFrequencyName != null)
                    hashCode = hashCode * 59 + this.RecurringOrderFrequencyName.GetHashCode();
                if (this.RecurringOrderLineItemId != null)
                    hashCode = hashCode * 59 + this.RecurringOrderLineItemId.GetHashCode();
                if (this.RecurringOrderProgramName != null)
                    hashCode = hashCode * 59 + this.RecurringOrderProgramName.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                if (this.ShippingAddressId != null)
                    hashCode = hashCode * 59 + this.ShippingAddressId.GetHashCode();
                if (this.ShippingProviderId != null)
                    hashCode = hashCode * 59 + this.ShippingProviderId.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
