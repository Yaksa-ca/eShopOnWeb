/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Metadata are entities which represents additional definitions and attribute information.
    /// </summary>
    [DataContract(Name = "CreateEntityTypeRequest")]
    public partial class CreateEntityTypeRequest : IEquatable<CreateEntityTypeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEntityTypeRequest" /> class.
        /// </summary>
        /// <param name="attributes">The list of attributes describing this entity type..</param>
        /// <param name="description">The description for the entity definition..</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="isSharedEntity">Whether or not the instances of this entity is considered as a shared entity, meaning that an instance of the entity will be reused by multiple other entities (using relations)..</param>
        public CreateEntityTypeRequest(List<AttributeDefinition> attributes = default(List<AttributeDefinition>), string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), bool isSharedEntity = default(bool))
        {
            this.Attributes = attributes;
            this.Description = description;
            this.DisplayName = displayName;
            this.IsSharedEntity = isSharedEntity;
        }

        /// <summary>
        /// The list of attributes describing this entity type.
        /// </summary>
        /// <value>The list of attributes describing this entity type.</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<AttributeDefinition> Attributes { get; set; }

        /// <summary>
        /// The description for the entity definition.
        /// </summary>
        /// <value>The description for the entity definition.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Whether or not the instances of this entity is considered as a shared entity, meaning that an instance of the entity will be reused by multiple other entities (using relations).
        /// </summary>
        /// <value>Whether or not the instances of this entity is considered as a shared entity, meaning that an instance of the entity will be reused by multiple other entities (using relations).</value>
        [DataMember(Name = "isSharedEntity", EmitDefaultValue = true)]
        public bool IsSharedEntity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateEntityTypeRequest {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IsSharedEntity: ").Append(IsSharedEntity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateEntityTypeRequest);
        }

        /// <summary>
        /// Returns true if CreateEntityTypeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateEntityTypeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateEntityTypeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.IsSharedEntity == input.IsSharedEntity ||
                    this.IsSharedEntity.Equals(input.IsSharedEntity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IsSharedEntity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
