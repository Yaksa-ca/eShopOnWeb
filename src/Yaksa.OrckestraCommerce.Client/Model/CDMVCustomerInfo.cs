/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// CDMVCustomerInfo
    /// </summary>
    [DataContract(Name = "CDMVCustomerInfo")]
    public partial class CDMVCustomerInfo : IEquatable<CDMVCustomerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CDMVCustomerInfo" /> class.
        /// </summary>
        /// <param name="id">The customer&#39;s unique identifier.</param>
        /// <param name="username">The customer&#39;s username.</param>
        /// <param name="firstName">The customer&#39;s first name.</param>
        /// <param name="lastName">The customer&#39;s last name.</param>
        /// <param name="language">The customer&#39;s communication language.</param>
        /// <param name="fileNumber">The customer&#39;s medical file number.</param>
        /// <param name="phoneNumber">The customer&#39;s phone number.</param>
        /// <param name="pendingCustomerApprovalOrderCount">The number of pending orders for this customer.</param>
        /// <param name="created">The date when this customer was created.</param>
        /// <param name="b2CSiteProfileId">The Id of the B2C site profile of this customer.</param>
        public CDMVCustomerInfo(string id = default(string), string username = default(string), string firstName = default(string), string lastName = default(string), string language = default(string), string fileNumber = default(string), string phoneNumber = default(string), int pendingCustomerApprovalOrderCount = default(int), DateTime created = default(DateTime), string b2CSiteProfileId = default(string))
        {
            this.Id = id;
            this.Username = username;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Language = language;
            this.FileNumber = fileNumber;
            this.PhoneNumber = phoneNumber;
            this.PendingCustomerApprovalOrderCount = pendingCustomerApprovalOrderCount;
            this.Created = created;
            this.B2CSiteProfileId = b2CSiteProfileId;
        }

        /// <summary>
        /// The customer&#39;s unique identifier
        /// </summary>
        /// <value>The customer&#39;s unique identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The customer&#39;s username
        /// </summary>
        /// <value>The customer&#39;s username</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// The customer&#39;s first name
        /// </summary>
        /// <value>The customer&#39;s first name</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The customer&#39;s last name
        /// </summary>
        /// <value>The customer&#39;s last name</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The customer&#39;s communication language
        /// </summary>
        /// <value>The customer&#39;s communication language</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The customer&#39;s medical file number
        /// </summary>
        /// <value>The customer&#39;s medical file number</value>
        [DataMember(Name = "fileNumber", EmitDefaultValue = false)]
        public string FileNumber { get; set; }

        /// <summary>
        /// The customer&#39;s phone number
        /// </summary>
        /// <value>The customer&#39;s phone number</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The number of pending orders for this customer
        /// </summary>
        /// <value>The number of pending orders for this customer</value>
        [DataMember(Name = "pendingCustomerApprovalOrderCount", EmitDefaultValue = false)]
        public int PendingCustomerApprovalOrderCount { get; set; }

        /// <summary>
        /// The date when this customer was created
        /// </summary>
        /// <value>The date when this customer was created</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The Id of the B2C site profile of this customer
        /// </summary>
        /// <value>The Id of the B2C site profile of this customer</value>
        [DataMember(Name = "b2CSiteProfileId", EmitDefaultValue = false)]
        public string B2CSiteProfileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CDMVCustomerInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  FileNumber: ").Append(FileNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PendingCustomerApprovalOrderCount: ").Append(PendingCustomerApprovalOrderCount).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  B2CSiteProfileId: ").Append(B2CSiteProfileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CDMVCustomerInfo);
        }

        /// <summary>
        /// Returns true if CDMVCustomerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CDMVCustomerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CDMVCustomerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.FileNumber == input.FileNumber ||
                    (this.FileNumber != null &&
                    this.FileNumber.Equals(input.FileNumber))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PendingCustomerApprovalOrderCount == input.PendingCustomerApprovalOrderCount ||
                    this.PendingCustomerApprovalOrderCount.Equals(input.PendingCustomerApprovalOrderCount)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.B2CSiteProfileId == input.B2CSiteProfileId ||
                    (this.B2CSiteProfileId != null &&
                    this.B2CSiteProfileId.Equals(input.B2CSiteProfileId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.FileNumber != null)
                    hashCode = hashCode * 59 + this.FileNumber.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                hashCode = hashCode * 59 + this.PendingCustomerApprovalOrderCount.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.B2CSiteProfileId != null)
                    hashCode = hashCode * 59 + this.B2CSiteProfileId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
