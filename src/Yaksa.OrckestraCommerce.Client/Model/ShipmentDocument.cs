/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ShipmentDocument
    /// </summary>
    [DataContract(Name = "ShipmentDocument")]
    public partial class ShipmentDocument : IEquatable<ShipmentDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentDocument" /> class.
        /// </summary>
        /// <param name="additionalNotes">additional notes related to the confirmation..</param>
        /// <param name="contentType">The content type of the blob object..</param>
        /// <param name="created">the date when the pickup confirmation was created..</param>
        /// <param name="createdBy">the user id of the user that created the pickup confirmation..</param>
        /// <param name="document">the value of the base64 media..</param>
        /// <param name="documentType">document type..</param>
        /// <param name="id">the id of the shipment document..</param>
        /// <param name="imageHeight">the height of the image..</param>
        /// <param name="imageWidth">the width of the image..</param>
        /// <param name="lastModified">the last modified date of the shipment document..</param>
        /// <param name="lastModifiedBy">the user who last modified the shipment acquired confirmatio..</param>
        /// <param name="name">name of the media..</param>
        /// <param name="orderId">the id of the order associated to the shipment..</param>
        /// <param name="path">the path of the shipment document in the blob..</param>
        /// <param name="proofOfIdentity">type of proof used to identify receiver..</param>
        /// <param name="recipient">the name of the person who picked up the shipment..</param>
        /// <param name="shipmentId">the id of the associated shipment..</param>
        public ShipmentDocument(string additionalNotes = default(string), string contentType = default(string), DateTime created = default(DateTime), string createdBy = default(string), string document = default(string), string documentType = default(string), string id = default(string), double imageHeight = default(double), double imageWidth = default(double), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), string name = default(string), string orderId = default(string), string path = default(string), string proofOfIdentity = default(string), string recipient = default(string), string shipmentId = default(string))
        {
            this.AdditionalNotes = additionalNotes;
            this.ContentType = contentType;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.Document = document;
            this.DocumentType = documentType;
            this.Id = id;
            this.ImageHeight = imageHeight;
            this.ImageWidth = imageWidth;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.Name = name;
            this.OrderId = orderId;
            this.Path = path;
            this.ProofOfIdentity = proofOfIdentity;
            this.Recipient = recipient;
            this.ShipmentId = shipmentId;
        }

        /// <summary>
        /// additional notes related to the confirmation.
        /// </summary>
        /// <value>additional notes related to the confirmation.</value>
        [DataMember(Name = "additionalNotes", EmitDefaultValue = false)]
        public string AdditionalNotes { get; set; }

        /// <summary>
        /// The content type of the blob object.
        /// </summary>
        /// <value>The content type of the blob object.</value>
        [DataMember(Name = "contentType", EmitDefaultValue = false)]
        public string ContentType { get; set; }

        /// <summary>
        /// the date when the pickup confirmation was created.
        /// </summary>
        /// <value>the date when the pickup confirmation was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// the user id of the user that created the pickup confirmation.
        /// </summary>
        /// <value>the user id of the user that created the pickup confirmation.</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// the value of the base64 media.
        /// </summary>
        /// <value>the value of the base64 media.</value>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public string Document { get; set; }

        /// <summary>
        /// document type.
        /// </summary>
        /// <value>document type.</value>
        [DataMember(Name = "documentType", EmitDefaultValue = false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// the id of the shipment document.
        /// </summary>
        /// <value>the id of the shipment document.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// the height of the image.
        /// </summary>
        /// <value>the height of the image.</value>
        [DataMember(Name = "imageHeight", EmitDefaultValue = false)]
        public double ImageHeight { get; set; }

        /// <summary>
        /// the width of the image.
        /// </summary>
        /// <value>the width of the image.</value>
        [DataMember(Name = "imageWidth", EmitDefaultValue = false)]
        public double ImageWidth { get; set; }

        /// <summary>
        /// the last modified date of the shipment document.
        /// </summary>
        /// <value>the last modified date of the shipment document.</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// the user who last modified the shipment acquired confirmatio.
        /// </summary>
        /// <value>the user who last modified the shipment acquired confirmatio.</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// name of the media.
        /// </summary>
        /// <value>name of the media.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// the id of the order associated to the shipment.
        /// </summary>
        /// <value>the id of the order associated to the shipment.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// the path of the shipment document in the blob.
        /// </summary>
        /// <value>the path of the shipment document in the blob.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// type of proof used to identify receiver.
        /// </summary>
        /// <value>type of proof used to identify receiver.</value>
        [DataMember(Name = "proofOfIdentity", EmitDefaultValue = false)]
        public string ProofOfIdentity { get; set; }

        /// <summary>
        /// the name of the person who picked up the shipment.
        /// </summary>
        /// <value>the name of the person who picked up the shipment.</value>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// the id of the associated shipment.
        /// </summary>
        /// <value>the id of the associated shipment.</value>
        [DataMember(Name = "shipmentId", EmitDefaultValue = false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentDocument {\n");
            sb.Append("  AdditionalNotes: ").Append(AdditionalNotes).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageHeight: ").Append(ImageHeight).Append("\n");
            sb.Append("  ImageWidth: ").Append(ImageWidth).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ProofOfIdentity: ").Append(ProofOfIdentity).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentDocument);
        }

        /// <summary>
        /// Returns true if ShipmentDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalNotes == input.AdditionalNotes ||
                    (this.AdditionalNotes != null &&
                    this.AdditionalNotes.Equals(input.AdditionalNotes))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageHeight == input.ImageHeight ||
                    this.ImageHeight.Equals(input.ImageHeight)
                ) && 
                (
                    this.ImageWidth == input.ImageWidth ||
                    this.ImageWidth.Equals(input.ImageWidth)
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ProofOfIdentity == input.ProofOfIdentity ||
                    (this.ProofOfIdentity != null &&
                    this.ProofOfIdentity.Equals(input.ProofOfIdentity))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalNotes != null)
                    hashCode = hashCode * 59 + this.AdditionalNotes.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.ImageHeight.GetHashCode();
                hashCode = hashCode * 59 + this.ImageWidth.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ProofOfIdentity != null)
                    hashCode = hashCode * 59 + this.ProofOfIdentity.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
