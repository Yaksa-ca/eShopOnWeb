/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Time zones.
    /// </summary>
    [DataContract(Name = "FindUtcOffsetForTimeZoneRequest")]
    public partial class FindUtcOffsetForTimeZoneRequest : IEquatable<FindUtcOffsetForTimeZoneRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindUtcOffsetForTimeZoneRequest" /> class.
        /// </summary>
        /// <param name="timeZoneId">The specific destination time zone id.</param>
        /// <param name="utcDateTime">The date and time that will be converted.</param>
        public FindUtcOffsetForTimeZoneRequest(string timeZoneId = default(string), DateTime utcDateTime = default(DateTime))
        {
            this.TimeZoneId = timeZoneId;
            this.UtcDateTime = utcDateTime;
        }

        /// <summary>
        /// The specific destination time zone id
        /// </summary>
        /// <value>The specific destination time zone id</value>
        [DataMember(Name = "timeZoneId", EmitDefaultValue = false)]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// The date and time that will be converted
        /// </summary>
        /// <value>The date and time that will be converted</value>
        [DataMember(Name = "utcDateTime", EmitDefaultValue = false)]
        public DateTime UtcDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindUtcOffsetForTimeZoneRequest {\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("  UtcDateTime: ").Append(UtcDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindUtcOffsetForTimeZoneRequest);
        }

        /// <summary>
        /// Returns true if FindUtcOffsetForTimeZoneRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindUtcOffsetForTimeZoneRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindUtcOffsetForTimeZoneRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeZoneId == input.TimeZoneId ||
                    (this.TimeZoneId != null &&
                    this.TimeZoneId.Equals(input.TimeZoneId))
                ) && 
                (
                    this.UtcDateTime == input.UtcDateTime ||
                    (this.UtcDateTime != null &&
                    this.UtcDateTime.Equals(input.UtcDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeZoneId != null)
                    hashCode = hashCode * 59 + this.TimeZoneId.GetHashCode();
                if (this.UtcDateTime != null)
                    hashCode = hashCode * 59 + this.UtcDateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
