/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FacetPredicate
    /// </summary>
    [DataContract(Name = "FacetPredicate")]
    public partial class FacetPredicate : IEquatable<FacetPredicate>, IValidatableObject
    {
        /// <summary>
        /// Gets the Facet Type.
        /// </summary>
        /// <value>Gets the Facet Type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FacetTypeEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Field for value: Field
            /// </summary>
            [EnumMember(Value = "Field")]
            Field = 2,

            /// <summary>
            /// Enum Range for value: Range
            /// </summary>
            [EnumMember(Value = "Range")]
            Range = 3,

            /// <summary>
            /// Enum Query for value: Query
            /// </summary>
            [EnumMember(Value = "Query")]
            Query = 4

        }


        /// <summary>
        /// Gets the Facet Type.
        /// </summary>
        /// <value>Gets the Facet Type.</value>
        [DataMember(Name = "facetType", EmitDefaultValue = false)]
        public FacetTypeEnum? FacetType { get; set; }
        /// <summary>
        /// The values operator
        /// </summary>
        /// <value>The values operator</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorTypeEnum
        {
            /// <summary>
            /// Enum Or for value: Or
            /// </summary>
            [EnumMember(Value = "Or")]
            Or = 1,

            /// <summary>
            /// Enum And for value: And
            /// </summary>
            [EnumMember(Value = "And")]
            And = 2

        }


        /// <summary>
        /// The values operator
        /// </summary>
        /// <value>The values operator</value>
        [DataMember(Name = "operatorType", EmitDefaultValue = false)]
        public OperatorTypeEnum? OperatorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FacetPredicate" /> class.
        /// </summary>
        /// <param name="excludeFilterForFacetsCount">Exclude specified filter for facets count.</param>
        /// <param name="facetType">Gets the Facet Type..</param>
        /// <param name="fieldName">The name which is used to refer to this facet.</param>
        /// <param name="maximumValue">The range maximum value.</param>
        /// <param name="minimumValue">The range minimum value.</param>
        /// <param name="operatorType">The values operator.</param>
        /// <param name="queryExpression">The query expression.</param>
        /// <param name="values">The values.</param>
        public FacetPredicate(bool excludeFilterForFacetsCount = default(bool), FacetTypeEnum? facetType = default(FacetTypeEnum?), string fieldName = default(string), string maximumValue = default(string), string minimumValue = default(string), OperatorTypeEnum? operatorType = default(OperatorTypeEnum?), string queryExpression = default(string), List<string> values = default(List<string>))
        {
            this.ExcludeFilterForFacetsCount = excludeFilterForFacetsCount;
            this.FacetType = facetType;
            this.FieldName = fieldName;
            this.MaximumValue = maximumValue;
            this.MinimumValue = minimumValue;
            this.OperatorType = operatorType;
            this.QueryExpression = queryExpression;
            this.Values = values;
        }

        /// <summary>
        /// Exclude specified filter for facets count
        /// </summary>
        /// <value>Exclude specified filter for facets count</value>
        [DataMember(Name = "excludeFilterForFacetsCount", EmitDefaultValue = true)]
        public bool ExcludeFilterForFacetsCount { get; set; }

        /// <summary>
        /// The name which is used to refer to this facet
        /// </summary>
        /// <value>The name which is used to refer to this facet</value>
        [DataMember(Name = "fieldName", EmitDefaultValue = false)]
        public string FieldName { get; set; }

        /// <summary>
        /// The range maximum value
        /// </summary>
        /// <value>The range maximum value</value>
        [DataMember(Name = "maximumValue", EmitDefaultValue = false)]
        public string MaximumValue { get; set; }

        /// <summary>
        /// The range minimum value
        /// </summary>
        /// <value>The range minimum value</value>
        [DataMember(Name = "minimumValue", EmitDefaultValue = false)]
        public string MinimumValue { get; set; }

        /// <summary>
        /// The query expression
        /// </summary>
        /// <value>The query expression</value>
        [DataMember(Name = "queryExpression", EmitDefaultValue = false)]
        public string QueryExpression { get; set; }

        /// <summary>
        /// The values
        /// </summary>
        /// <value>The values</value>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FacetPredicate {\n");
            sb.Append("  ExcludeFilterForFacetsCount: ").Append(ExcludeFilterForFacetsCount).Append("\n");
            sb.Append("  FacetType: ").Append(FacetType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  MaximumValue: ").Append(MaximumValue).Append("\n");
            sb.Append("  MinimumValue: ").Append(MinimumValue).Append("\n");
            sb.Append("  OperatorType: ").Append(OperatorType).Append("\n");
            sb.Append("  QueryExpression: ").Append(QueryExpression).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FacetPredicate);
        }

        /// <summary>
        /// Returns true if FacetPredicate instances are equal
        /// </summary>
        /// <param name="input">Instance of FacetPredicate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FacetPredicate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExcludeFilterForFacetsCount == input.ExcludeFilterForFacetsCount ||
                    this.ExcludeFilterForFacetsCount.Equals(input.ExcludeFilterForFacetsCount)
                ) && 
                (
                    this.FacetType == input.FacetType ||
                    this.FacetType.Equals(input.FacetType)
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.MaximumValue == input.MaximumValue ||
                    (this.MaximumValue != null &&
                    this.MaximumValue.Equals(input.MaximumValue))
                ) && 
                (
                    this.MinimumValue == input.MinimumValue ||
                    (this.MinimumValue != null &&
                    this.MinimumValue.Equals(input.MinimumValue))
                ) && 
                (
                    this.OperatorType == input.OperatorType ||
                    this.OperatorType.Equals(input.OperatorType)
                ) && 
                (
                    this.QueryExpression == input.QueryExpression ||
                    (this.QueryExpression != null &&
                    this.QueryExpression.Equals(input.QueryExpression))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ExcludeFilterForFacetsCount.GetHashCode();
                hashCode = hashCode * 59 + this.FacetType.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.MaximumValue != null)
                    hashCode = hashCode * 59 + this.MaximumValue.GetHashCode();
                if (this.MinimumValue != null)
                    hashCode = hashCode * 59 + this.MinimumValue.GetHashCode();
                hashCode = hashCode * 59 + this.OperatorType.GetHashCode();
                if (this.QueryExpression != null)
                    hashCode = hashCode * 59 + this.QueryExpression.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
