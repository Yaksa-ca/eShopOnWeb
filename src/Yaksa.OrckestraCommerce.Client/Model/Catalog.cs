/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Catalog
    /// </summary>
    [DataContract(Name = "Catalog")]
    public partial class Catalog : IEquatable<Catalog>, IValidatableObject
    {
        /// <summary>
        /// The type of the Catalog.
        /// </summary>
        /// <value>The type of the Catalog.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Global for value: Global
            /// </summary>
            [EnumMember(Value = "Global")]
            Global = 1,

            /// <summary>
            /// Enum Sale for value: Sale
            /// </summary>
            [EnumMember(Value = "Sale")]
            Sale = 2,

            /// <summary>
            /// Enum Dependant for value: Dependant
            /// </summary>
            [EnumMember(Value = "Dependant")]
            Dependant = 3

        }


        /// <summary>
        /// The type of the Catalog.
        /// </summary>
        /// <value>The type of the Catalog.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Catalog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Catalog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Catalog" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="childCatalogs">The child catalogs..</param>
        /// <param name="currency">The currency of the Catalog..</param>
        /// <param name="defaultLanguage">The default language of the Catalog..</param>
        /// <param name="description">A general description of the Catalog..</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="endDate">The end date of the Catalog..</param>
        /// <param name="isActive">The active flag of the Catalog..</param>
        /// <param name="languages">The list of languages supported by the Catalog..</param>
        /// <param name="parentId">The parent catalog id of the Catalog..</param>
        /// <param name="startDate">The start date of the Catalog..</param>
        /// <param name="type">The type of the Catalog..</param>
        /// <param name="overrideParent">Whether the products has overridden values in the current Sales scope. It means that it have values that does not come from the Global scope..</param>
        public Catalog(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), List<Catalog> childCatalogs = default(List<Catalog>), string currency = default(string), string defaultLanguage = default(string), string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>), DateTime endDate = default(DateTime), bool isActive = default(bool), List<string> languages = default(List<string>), string parentId = default(string), DateTime startDate = default(DateTime), TypeEnum? type = default(TypeEnum?), bool overrideParent = default(bool))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Catalog and cannot be null");
            this.PropertyBag = propertyBag;
            this.ChildCatalogs = childCatalogs;
            this.Currency = currency;
            this.DefaultLanguage = defaultLanguage;
            this.Description = description;
            this.DisplayName = displayName;
            this.EndDate = endDate;
            this.IsActive = isActive;
            this.Languages = languages;
            this.ParentId = parentId;
            this.StartDate = startDate;
            this.Type = type;
            this.OverrideParent = overrideParent;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The child catalogs.
        /// </summary>
        /// <value>The child catalogs.</value>
        [DataMember(Name = "childCatalogs", EmitDefaultValue = false)]
        public List<Catalog> ChildCatalogs { get; set; }

        /// <summary>
        /// The currency of the Catalog.
        /// </summary>
        /// <value>The currency of the Catalog.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// The default language of the Catalog.
        /// </summary>
        /// <value>The default language of the Catalog.</value>
        [DataMember(Name = "defaultLanguage", EmitDefaultValue = false)]
        public string DefaultLanguage { get; set; }

        /// <summary>
        /// A general description of the Catalog.
        /// </summary>
        /// <value>A general description of the Catalog.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// The end date of the Catalog.
        /// </summary>
        /// <value>The end date of the Catalog.</value>
        [DataMember(Name = "endDate", EmitDefaultValue = false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// The active flag of the Catalog.
        /// </summary>
        /// <value>The active flag of the Catalog.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// The list of languages supported by the Catalog.
        /// </summary>
        /// <value>The list of languages supported by the Catalog.</value>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<string> Languages { get; set; }

        /// <summary>
        /// The parent catalog id of the Catalog.
        /// </summary>
        /// <value>The parent catalog id of the Catalog.</value>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// The start date of the Catalog.
        /// </summary>
        /// <value>The start date of the Catalog.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Whether the products has overridden values in the current Sales scope. It means that it have values that does not come from the Global scope.
        /// </summary>
        /// <value>Whether the products has overridden values in the current Sales scope. It means that it have values that does not come from the Global scope.</value>
        [DataMember(Name = "overrideParent", EmitDefaultValue = true)]
        public bool OverrideParent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Catalog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  ChildCatalogs: ").Append(ChildCatalogs).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OverrideParent: ").Append(OverrideParent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Catalog);
        }

        /// <summary>
        /// Returns true if Catalog instances are equal
        /// </summary>
        /// <param name="input">Instance of Catalog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Catalog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.ChildCatalogs == input.ChildCatalogs ||
                    this.ChildCatalogs != null &&
                    input.ChildCatalogs != null &&
                    this.ChildCatalogs.SequenceEqual(input.ChildCatalogs)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.DefaultLanguage == input.DefaultLanguage ||
                    (this.DefaultLanguage != null &&
                    this.DefaultLanguage.Equals(input.DefaultLanguage))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    input.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.OverrideParent == input.OverrideParent ||
                    this.OverrideParent.Equals(input.OverrideParent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.ChildCatalogs != null)
                    hashCode = hashCode * 59 + this.ChildCatalogs.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.DefaultLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultLanguage.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.OverrideParent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
