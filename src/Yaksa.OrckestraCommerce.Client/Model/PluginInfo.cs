/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// PluginInfo
    /// </summary>
    [DataContract(Name = "PluginInfo")]
    public partial class PluginInfo : IEquatable<PluginInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginInfo" /> class.
        /// </summary>
        /// <param name="typeName">typeName.</param>
        /// <param name="assemblyName">assemblyName.</param>
        /// <param name="version">version.</param>
        public PluginInfo(string typeName = default(string), string assemblyName = default(string), string version = default(string))
        {
            this.TypeName = typeName;
            this.AssemblyName = assemblyName;
            this.Version = version;
        }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name = "typeName", EmitDefaultValue = false)]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets AssemblyName
        /// </summary>
        [DataMember(Name = "assemblyName", EmitDefaultValue = false)]
        public string AssemblyName { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PluginInfo {\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  AssemblyName: ").Append(AssemblyName).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PluginInfo);
        }

        /// <summary>
        /// Returns true if PluginInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PluginInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.AssemblyName == input.AssemblyName ||
                    (this.AssemblyName != null &&
                    this.AssemblyName.Equals(input.AssemblyName))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.AssemblyName != null)
                    hashCode = hashCode * 59 + this.AssemblyName.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
