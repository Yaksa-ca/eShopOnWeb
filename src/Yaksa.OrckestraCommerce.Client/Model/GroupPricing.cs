/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// GroupPricing
    /// </summary>
    [DataContract(Name = "GroupPricing")]
    public partial class GroupPricing : IEquatable<GroupPricing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupPricing" /> class.
        /// </summary>
        /// <param name="currentPricePriceLists">the information about all the price lists found for the current price in this group.</param>
        /// <param name="fromCurrentPrice">the starting (minimum) current price of this group.</param>
        /// <param name="fromRegularPrice">the starting (minimum) regular price of this group.</param>
        /// <param name="toCurrentPrice">the highest (maximum) current price of this group.</param>
        /// <param name="toRegularPrice">the highest (maximum) regular price of this group.</param>
        public GroupPricing(List<PriceListSummary> currentPricePriceLists = default(List<PriceListSummary>), double fromCurrentPrice = default(double), double fromRegularPrice = default(double), double toCurrentPrice = default(double), double toRegularPrice = default(double))
        {
            this.CurrentPricePriceLists = currentPricePriceLists;
            this.FromCurrentPrice = fromCurrentPrice;
            this.FromRegularPrice = fromRegularPrice;
            this.ToCurrentPrice = toCurrentPrice;
            this.ToRegularPrice = toRegularPrice;
        }

        /// <summary>
        /// the information about all the price lists found for the current price in this group
        /// </summary>
        /// <value>the information about all the price lists found for the current price in this group</value>
        [DataMember(Name = "currentPricePriceLists", EmitDefaultValue = false)]
        public List<PriceListSummary> CurrentPricePriceLists { get; set; }

        /// <summary>
        /// the starting (minimum) current price of this group
        /// </summary>
        /// <value>the starting (minimum) current price of this group</value>
        [DataMember(Name = "fromCurrentPrice", EmitDefaultValue = false)]
        public double FromCurrentPrice { get; set; }

        /// <summary>
        /// the starting (minimum) regular price of this group
        /// </summary>
        /// <value>the starting (minimum) regular price of this group</value>
        [DataMember(Name = "fromRegularPrice", EmitDefaultValue = false)]
        public double FromRegularPrice { get; set; }

        /// <summary>
        /// the highest (maximum) current price of this group
        /// </summary>
        /// <value>the highest (maximum) current price of this group</value>
        [DataMember(Name = "toCurrentPrice", EmitDefaultValue = false)]
        public double ToCurrentPrice { get; set; }

        /// <summary>
        /// the highest (maximum) regular price of this group
        /// </summary>
        /// <value>the highest (maximum) regular price of this group</value>
        [DataMember(Name = "toRegularPrice", EmitDefaultValue = false)]
        public double ToRegularPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupPricing {\n");
            sb.Append("  CurrentPricePriceLists: ").Append(CurrentPricePriceLists).Append("\n");
            sb.Append("  FromCurrentPrice: ").Append(FromCurrentPrice).Append("\n");
            sb.Append("  FromRegularPrice: ").Append(FromRegularPrice).Append("\n");
            sb.Append("  ToCurrentPrice: ").Append(ToCurrentPrice).Append("\n");
            sb.Append("  ToRegularPrice: ").Append(ToRegularPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupPricing);
        }

        /// <summary>
        /// Returns true if GroupPricing instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupPricing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupPricing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentPricePriceLists == input.CurrentPricePriceLists ||
                    this.CurrentPricePriceLists != null &&
                    input.CurrentPricePriceLists != null &&
                    this.CurrentPricePriceLists.SequenceEqual(input.CurrentPricePriceLists)
                ) && 
                (
                    this.FromCurrentPrice == input.FromCurrentPrice ||
                    this.FromCurrentPrice.Equals(input.FromCurrentPrice)
                ) && 
                (
                    this.FromRegularPrice == input.FromRegularPrice ||
                    this.FromRegularPrice.Equals(input.FromRegularPrice)
                ) && 
                (
                    this.ToCurrentPrice == input.ToCurrentPrice ||
                    this.ToCurrentPrice.Equals(input.ToCurrentPrice)
                ) && 
                (
                    this.ToRegularPrice == input.ToRegularPrice ||
                    this.ToRegularPrice.Equals(input.ToRegularPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentPricePriceLists != null)
                    hashCode = hashCode * 59 + this.CurrentPricePriceLists.GetHashCode();
                hashCode = hashCode * 59 + this.FromCurrentPrice.GetHashCode();
                hashCode = hashCode * 59 + this.FromRegularPrice.GetHashCode();
                hashCode = hashCode * 59 + this.ToCurrentPrice.GetHashCode();
                hashCode = hashCode * 59 + this.ToRegularPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
