/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Customers represents entities which have the ability to buy products.
    /// </summary>
    [DataContract(Name = "AddCustomerPaymentProfileRequest")]
    public partial class AddCustomerPaymentProfileRequest : IEquatable<AddCustomerPaymentProfileRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddCustomerPaymentProfileRequest" /> class.
        /// </summary>
        /// <param name="allowMultiplePaymentProfileOnProvider">The value for overwriting the way pyment profile are added..</param>
        /// <param name="externalIds">The list of unique identifier returned by external provider related to the payment profile..</param>
        /// <param name="id">Unique identifier of the new payment profile (will be generated if not specified)..</param>
        /// <param name="orderLocationId">The store for wich the provider configuration is done..</param>
        /// <param name="propertyBag">propertyBag.</param>
        public AddCustomerPaymentProfileRequest(bool allowMultiplePaymentProfileOnProvider = default(bool), string externalIds = default(string), string id = default(string), string orderLocationId = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>))
        {
            this.AllowMultiplePaymentProfileOnProvider = allowMultiplePaymentProfileOnProvider;
            this.ExternalIds = externalIds;
            this.Id = id;
            this.OrderLocationId = orderLocationId;
            this.PropertyBag = propertyBag;
        }

        /// <summary>
        /// The value for overwriting the way pyment profile are added.
        /// </summary>
        /// <value>The value for overwriting the way pyment profile are added.</value>
        [DataMember(Name = "allowMultiplePaymentProfileOnProvider", EmitDefaultValue = true)]
        public bool AllowMultiplePaymentProfileOnProvider { get; set; }

        /// <summary>
        /// The list of unique identifier returned by external provider related to the payment profile.
        /// </summary>
        /// <value>The list of unique identifier returned by external provider related to the payment profile.</value>
        [DataMember(Name = "externalIds", EmitDefaultValue = false)]
        public string ExternalIds { get; set; }

        /// <summary>
        /// Unique identifier of the new payment profile (will be generated if not specified).
        /// </summary>
        /// <value>Unique identifier of the new payment profile (will be generated if not specified).</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The store for wich the provider configuration is done.
        /// </summary>
        /// <value>The store for wich the provider configuration is done.</value>
        [DataMember(Name = "orderLocationId", EmitDefaultValue = false)]
        public string OrderLocationId { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddCustomerPaymentProfileRequest {\n");
            sb.Append("  AllowMultiplePaymentProfileOnProvider: ").Append(AllowMultiplePaymentProfileOnProvider).Append("\n");
            sb.Append("  ExternalIds: ").Append(ExternalIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderLocationId: ").Append(OrderLocationId).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddCustomerPaymentProfileRequest);
        }

        /// <summary>
        /// Returns true if AddCustomerPaymentProfileRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddCustomerPaymentProfileRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddCustomerPaymentProfileRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMultiplePaymentProfileOnProvider == input.AllowMultiplePaymentProfileOnProvider ||
                    this.AllowMultiplePaymentProfileOnProvider.Equals(input.AllowMultiplePaymentProfileOnProvider)
                ) && 
                (
                    this.ExternalIds == input.ExternalIds ||
                    (this.ExternalIds != null &&
                    this.ExternalIds.Equals(input.ExternalIds))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderLocationId == input.OrderLocationId ||
                    (this.OrderLocationId != null &&
                    this.OrderLocationId.Equals(input.OrderLocationId))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AllowMultiplePaymentProfileOnProvider.GetHashCode();
                if (this.ExternalIds != null)
                    hashCode = hashCode * 59 + this.ExternalIds.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrderLocationId != null)
                    hashCode = hashCode * 59 + this.OrderLocationId.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
