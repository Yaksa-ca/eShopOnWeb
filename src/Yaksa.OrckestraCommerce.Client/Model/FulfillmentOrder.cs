/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// FulfillmentOrder
    /// </summary>
    [DataContract(Name = "FulfillmentOrder")]
    public partial class FulfillmentOrder : IEquatable<FulfillmentOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentOrder" /> class.
        /// </summary>
        /// <param name="billingCurrency">The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;..</param>
        /// <param name="created">The date when the order as created..</param>
        /// <param name="customerId">The customer id who made the order..</param>
        /// <param name="customerName">The complete name of the customer who made the order..</param>
        /// <param name="fulfillmentShipments">The list of fulfillment shipments for this order..</param>
        /// <param name="id">The id of the order..</param>
        /// <param name="orderNumber">The order number..</param>
        /// <param name="scopeId">The scope id..</param>
        /// <param name="total">The total of the order..</param>
        public FulfillmentOrder(string billingCurrency = default(string), DateTime created = default(DateTime), string customerId = default(string), string customerName = default(string), List<FulfillmentShipment> fulfillmentShipments = default(List<FulfillmentShipment>), string id = default(string), string orderNumber = default(string), string scopeId = default(string), double total = default(double))
        {
            this.BillingCurrency = billingCurrency;
            this.Created = created;
            this.CustomerId = customerId;
            this.CustomerName = customerName;
            this.FulfillmentShipments = fulfillmentShipments;
            this.Id = id;
            this.OrderNumber = orderNumber;
            this.ScopeId = scopeId;
            this.Total = total;
        }

        /// <summary>
        /// The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;.
        /// </summary>
        /// <value>The currency ISO code under which the items are sold &#39;Currency.IsoCode&#39;.</value>
        [DataMember(Name = "billingCurrency", EmitDefaultValue = false)]
        public string BillingCurrency { get; set; }

        /// <summary>
        /// The date when the order as created.
        /// </summary>
        /// <value>The date when the order as created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The customer id who made the order.
        /// </summary>
        /// <value>The customer id who made the order.</value>
        [DataMember(Name = "customerId", EmitDefaultValue = false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// The complete name of the customer who made the order.
        /// </summary>
        /// <value>The complete name of the customer who made the order.</value>
        [DataMember(Name = "customerName", EmitDefaultValue = false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// The list of fulfillment shipments for this order.
        /// </summary>
        /// <value>The list of fulfillment shipments for this order.</value>
        [DataMember(Name = "fulfillmentShipments", EmitDefaultValue = false)]
        public List<FulfillmentShipment> FulfillmentShipments { get; set; }

        /// <summary>
        /// The id of the order.
        /// </summary>
        /// <value>The id of the order.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The order number.
        /// </summary>
        /// <value>The order number.</value>
        [DataMember(Name = "orderNumber", EmitDefaultValue = false)]
        public string OrderNumber { get; set; }

        /// <summary>
        /// The scope id.
        /// </summary>
        /// <value>The scope id.</value>
        [DataMember(Name = "scopeId", EmitDefaultValue = false)]
        public string ScopeId { get; set; }

        /// <summary>
        /// The total of the order.
        /// </summary>
        /// <value>The total of the order.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentOrder {\n");
            sb.Append("  BillingCurrency: ").Append(BillingCurrency).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  FulfillmentShipments: ").Append(FulfillmentShipments).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  ScopeId: ").Append(ScopeId).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentOrder);
        }

        /// <summary>
        /// Returns true if FulfillmentOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingCurrency == input.BillingCurrency ||
                    (this.BillingCurrency != null &&
                    this.BillingCurrency.Equals(input.BillingCurrency))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.FulfillmentShipments == input.FulfillmentShipments ||
                    this.FulfillmentShipments != null &&
                    input.FulfillmentShipments != null &&
                    this.FulfillmentShipments.SequenceEqual(input.FulfillmentShipments)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.ScopeId == input.ScopeId ||
                    (this.ScopeId != null &&
                    this.ScopeId.Equals(input.ScopeId))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingCurrency != null)
                    hashCode = hashCode * 59 + this.BillingCurrency.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.FulfillmentShipments != null)
                    hashCode = hashCode * 59 + this.FulfillmentShipments.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                if (this.ScopeId != null)
                    hashCode = hashCode * 59 + this.ScopeId.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
