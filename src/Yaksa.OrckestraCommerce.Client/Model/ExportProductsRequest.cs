/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Integration resources dedicated to data exchanges across system boundaries or other systems.
    /// </summary>
    [DataContract(Name = "ExportProductsRequest")]
    public partial class ExportProductsRequest : IEquatable<ExportProductsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportProductsRequest" /> class.
        /// </summary>
        /// <param name="breakInheritance">Indicates to break or not inheritance for Products..</param>
        /// <param name="category">The category of products to be exported..</param>
        /// <param name="correlationId">The correlation id for the durable task..</param>
        /// <param name="cultures">The languages to include in the export..</param>
        /// <param name="fileFormat">The file format of the export, JSON or XML..</param>
        /// <param name="filePath">The File path in the blob storage..</param>
        /// <param name="includeCategories">Indicates to include or not the categories..</param>
        /// <param name="includePrices">Indicates to include or not the prices..</param>
        /// <param name="includeProducts">Indicates to include or not the products..</param>
        /// <param name="includeSchema">Indicates to include or not the schema..</param>
        /// <param name="taskId">The task id..</param>
        public ExportProductsRequest(bool breakInheritance = default(bool), string category = default(string), string correlationId = default(string), List<string> cultures = default(List<string>), string fileFormat = default(string), string filePath = default(string), bool includeCategories = default(bool), bool includePrices = default(bool), bool includeProducts = default(bool), bool includeSchema = default(bool), string taskId = default(string))
        {
            this.BreakInheritance = breakInheritance;
            this.Category = category;
            this.CorrelationId = correlationId;
            this.Cultures = cultures;
            this.FileFormat = fileFormat;
            this.FilePath = filePath;
            this.IncludeCategories = includeCategories;
            this.IncludePrices = includePrices;
            this.IncludeProducts = includeProducts;
            this.IncludeSchema = includeSchema;
            this.TaskId = taskId;
        }

        /// <summary>
        /// Indicates to break or not inheritance for Products.
        /// </summary>
        /// <value>Indicates to break or not inheritance for Products.</value>
        [DataMember(Name = "breakInheritance", EmitDefaultValue = true)]
        public bool BreakInheritance { get; set; }

        /// <summary>
        /// The category of products to be exported.
        /// </summary>
        /// <value>The category of products to be exported.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// The correlation id for the durable task.
        /// </summary>
        /// <value>The correlation id for the durable task.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// The languages to include in the export.
        /// </summary>
        /// <value>The languages to include in the export.</value>
        [DataMember(Name = "cultures", EmitDefaultValue = false)]
        public List<string> Cultures { get; set; }

        /// <summary>
        /// The file format of the export, JSON or XML.
        /// </summary>
        /// <value>The file format of the export, JSON or XML.</value>
        [DataMember(Name = "fileFormat", EmitDefaultValue = false)]
        public string FileFormat { get; set; }

        /// <summary>
        /// The File path in the blob storage.
        /// </summary>
        /// <value>The File path in the blob storage.</value>
        [DataMember(Name = "filePath", EmitDefaultValue = false)]
        public string FilePath { get; set; }

        /// <summary>
        /// Indicates to include or not the categories.
        /// </summary>
        /// <value>Indicates to include or not the categories.</value>
        [DataMember(Name = "includeCategories", EmitDefaultValue = true)]
        public bool IncludeCategories { get; set; }

        /// <summary>
        /// Indicates to include or not the prices.
        /// </summary>
        /// <value>Indicates to include or not the prices.</value>
        [DataMember(Name = "includePrices", EmitDefaultValue = true)]
        public bool IncludePrices { get; set; }

        /// <summary>
        /// Indicates to include or not the products.
        /// </summary>
        /// <value>Indicates to include or not the products.</value>
        [DataMember(Name = "includeProducts", EmitDefaultValue = true)]
        public bool IncludeProducts { get; set; }

        /// <summary>
        /// Indicates to include or not the schema.
        /// </summary>
        /// <value>Indicates to include or not the schema.</value>
        [DataMember(Name = "includeSchema", EmitDefaultValue = true)]
        public bool IncludeSchema { get; set; }

        /// <summary>
        /// The task id.
        /// </summary>
        /// <value>The task id.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportProductsRequest {\n");
            sb.Append("  BreakInheritance: ").Append(BreakInheritance).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  Cultures: ").Append(Cultures).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  IncludeCategories: ").Append(IncludeCategories).Append("\n");
            sb.Append("  IncludePrices: ").Append(IncludePrices).Append("\n");
            sb.Append("  IncludeProducts: ").Append(IncludeProducts).Append("\n");
            sb.Append("  IncludeSchema: ").Append(IncludeSchema).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportProductsRequest);
        }

        /// <summary>
        /// Returns true if ExportProductsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportProductsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportProductsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BreakInheritance == input.BreakInheritance ||
                    this.BreakInheritance.Equals(input.BreakInheritance)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.Cultures == input.Cultures ||
                    this.Cultures != null &&
                    input.Cultures != null &&
                    this.Cultures.SequenceEqual(input.Cultures)
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    (this.FileFormat != null &&
                    this.FileFormat.Equals(input.FileFormat))
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.IncludeCategories == input.IncludeCategories ||
                    this.IncludeCategories.Equals(input.IncludeCategories)
                ) && 
                (
                    this.IncludePrices == input.IncludePrices ||
                    this.IncludePrices.Equals(input.IncludePrices)
                ) && 
                (
                    this.IncludeProducts == input.IncludeProducts ||
                    this.IncludeProducts.Equals(input.IncludeProducts)
                ) && 
                (
                    this.IncludeSchema == input.IncludeSchema ||
                    this.IncludeSchema.Equals(input.IncludeSchema)
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.BreakInheritance.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.Cultures != null)
                    hashCode = hashCode * 59 + this.Cultures.GetHashCode();
                if (this.FileFormat != null)
                    hashCode = hashCode * 59 + this.FileFormat.GetHashCode();
                if (this.FilePath != null)
                    hashCode = hashCode * 59 + this.FilePath.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeCategories.GetHashCode();
                hashCode = hashCode * 59 + this.IncludePrices.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeProducts.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeSchema.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
