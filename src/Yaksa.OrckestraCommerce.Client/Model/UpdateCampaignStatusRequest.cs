/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Campaigns are entities used to organize marketing promotions.
    /// </summary>
    [DataContract(Name = "UpdateCampaignStatusRequest")]
    public partial class UpdateCampaignStatusRequest : IEquatable<UpdateCampaignStatusRequest>, IValidatableObject
    {
        /// <summary>
        /// The status of the Campaign
        /// </summary>
        /// <value>The status of the Campaign</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Draft for value: Draft
            /// </summary>
            [EnumMember(Value = "Draft")]
            Draft = 2,

            /// <summary>
            /// Enum PendingApproval for value: PendingApproval
            /// </summary>
            [EnumMember(Value = "PendingApproval")]
            PendingApproval = 3,

            /// <summary>
            /// Enum Ready for value: Ready
            /// </summary>
            [EnumMember(Value = "Ready")]
            Ready = 4,

            /// <summary>
            /// Enum Live for value: Live
            /// </summary>
            [EnumMember(Value = "Live")]
            Live = 5,

            /// <summary>
            /// Enum Paused for value: Paused
            /// </summary>
            [EnumMember(Value = "Paused")]
            Paused = 6,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 7,

            /// <summary>
            /// Enum Expired for value: Expired
            /// </summary>
            [EnumMember(Value = "Expired")]
            Expired = 8,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 9

        }


        /// <summary>
        /// The status of the Campaign
        /// </summary>
        /// <value>The status of the Campaign</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCampaignStatusRequest" /> class.
        /// </summary>
        /// <param name="status">The status of the Campaign.</param>
        public UpdateCampaignStatusRequest(StatusEnum? status = default(StatusEnum?))
        {
            this.Status = status;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCampaignStatusRequest {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCampaignStatusRequest);
        }

        /// <summary>
        /// Returns true if UpdateCampaignStatusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCampaignStatusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCampaignStatusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
