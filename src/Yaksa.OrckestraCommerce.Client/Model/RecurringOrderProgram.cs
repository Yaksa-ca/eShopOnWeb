/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// RecurringOrderProgram
    /// </summary>
    [DataContract(Name = "RecurringOrderProgram")]
    public partial class RecurringOrderProgram : IEquatable<RecurringOrderProgram>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringOrderProgram" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecurringOrderProgram() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringOrderProgram" /> class.
        /// </summary>
        /// <param name="created">The date of the creation of the entity (required).</param>
        /// <param name="createdBy">The id of the person who created the entity (required).</param>
        /// <param name="lastModified">The date of the last modification (required).</param>
        /// <param name="lastModifiedBy">The id of the last person who modified the entity (required).</param>
        /// <param name="frequencies">The frequencies of the recurring order program.</param>
        /// <param name="localizations">The localized name of the recurring order program.</param>
        /// <param name="recurringOrderProgramName">The name and unique identifier of the recurring order program (required).</param>
        /// <param name="scopeIds">The scope ids which are associated to the recurring order program.</param>
        public RecurringOrderProgram(DateTime created = default(DateTime), string createdBy = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), List<RecurringOrderFrequency> frequencies = default(List<RecurringOrderFrequency>), List<RecurringOrderProgramLocalize> localizations = default(List<RecurringOrderProgramLocalize>), string recurringOrderProgramName = default(string), List<string> scopeIds = default(List<string>))
        {
            this.Created = created;
            // to ensure "createdBy" is required (not null)
            this.CreatedBy = createdBy ?? throw new ArgumentNullException("createdBy is a required property for RecurringOrderProgram and cannot be null");
            this.LastModified = lastModified;
            // to ensure "lastModifiedBy" is required (not null)
            this.LastModifiedBy = lastModifiedBy ?? throw new ArgumentNullException("lastModifiedBy is a required property for RecurringOrderProgram and cannot be null");
            // to ensure "recurringOrderProgramName" is required (not null)
            this.RecurringOrderProgramName = recurringOrderProgramName ?? throw new ArgumentNullException("recurringOrderProgramName is a required property for RecurringOrderProgram and cannot be null");
            this.Frequencies = frequencies;
            this.Localizations = localizations;
            this.ScopeIds = scopeIds;
        }

        /// <summary>
        /// The date of the creation of the entity
        /// </summary>
        /// <value>The date of the creation of the entity</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The id of the person who created the entity
        /// </summary>
        /// <value>The id of the person who created the entity</value>
        [DataMember(Name = "createdBy", IsRequired = true, EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The date of the last modification
        /// </summary>
        /// <value>The date of the last modification</value>
        [DataMember(Name = "lastModified", IsRequired = true, EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// The id of the last person who modified the entity
        /// </summary>
        /// <value>The id of the last person who modified the entity</value>
        [DataMember(Name = "lastModifiedBy", IsRequired = true, EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The frequencies of the recurring order program
        /// </summary>
        /// <value>The frequencies of the recurring order program</value>
        [DataMember(Name = "frequencies", EmitDefaultValue = false)]
        public List<RecurringOrderFrequency> Frequencies { get; set; }

        /// <summary>
        /// The localized name of the recurring order program
        /// </summary>
        /// <value>The localized name of the recurring order program</value>
        [DataMember(Name = "localizations", EmitDefaultValue = false)]
        public List<RecurringOrderProgramLocalize> Localizations { get; set; }

        /// <summary>
        /// The name and unique identifier of the recurring order program
        /// </summary>
        /// <value>The name and unique identifier of the recurring order program</value>
        [DataMember(Name = "recurringOrderProgramName", IsRequired = true, EmitDefaultValue = false)]
        public string RecurringOrderProgramName { get; set; }

        /// <summary>
        /// The scope ids which are associated to the recurring order program
        /// </summary>
        /// <value>The scope ids which are associated to the recurring order program</value>
        [DataMember(Name = "scopeIds", EmitDefaultValue = false)]
        public List<string> ScopeIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecurringOrderProgram {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  Frequencies: ").Append(Frequencies).Append("\n");
            sb.Append("  Localizations: ").Append(Localizations).Append("\n");
            sb.Append("  RecurringOrderProgramName: ").Append(RecurringOrderProgramName).Append("\n");
            sb.Append("  ScopeIds: ").Append(ScopeIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurringOrderProgram);
        }

        /// <summary>
        /// Returns true if RecurringOrderProgram instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurringOrderProgram to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurringOrderProgram input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.Frequencies == input.Frequencies ||
                    this.Frequencies != null &&
                    input.Frequencies != null &&
                    this.Frequencies.SequenceEqual(input.Frequencies)
                ) && 
                (
                    this.Localizations == input.Localizations ||
                    this.Localizations != null &&
                    input.Localizations != null &&
                    this.Localizations.SequenceEqual(input.Localizations)
                ) && 
                (
                    this.RecurringOrderProgramName == input.RecurringOrderProgramName ||
                    (this.RecurringOrderProgramName != null &&
                    this.RecurringOrderProgramName.Equals(input.RecurringOrderProgramName))
                ) && 
                (
                    this.ScopeIds == input.ScopeIds ||
                    this.ScopeIds != null &&
                    input.ScopeIds != null &&
                    this.ScopeIds.SequenceEqual(input.ScopeIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.Frequencies != null)
                    hashCode = hashCode * 59 + this.Frequencies.GetHashCode();
                if (this.Localizations != null)
                    hashCode = hashCode * 59 + this.Localizations.GetHashCode();
                if (this.RecurringOrderProgramName != null)
                    hashCode = hashCode * 59 + this.RecurringOrderProgramName.GetHashCode();
                if (this.ScopeIds != null)
                    hashCode = hashCode * 59 + this.ScopeIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
