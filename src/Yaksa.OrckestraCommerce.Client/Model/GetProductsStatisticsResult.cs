/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// model for products&#39; statistics info
    /// </summary>
    [DataContract(Name = "GetProductsStatisticsResult")]
    public partial class GetProductsStatisticsResult : IEquatable<GetProductsStatisticsResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProductsStatisticsResult" /> class.
        /// </summary>
        /// <param name="documentCount">The total count of analyzed documents.</param>
        /// <param name="documentSize">documentSize.</param>
        /// <param name="variantCount">variantCount.</param>
        public GetProductsStatisticsResult(int documentCount = default(int), PropertyStatistics documentSize = default(PropertyStatistics), PropertyStatistics variantCount = default(PropertyStatistics))
        {
            this.DocumentCount = documentCount;
            this.DocumentSize = documentSize;
            this.VariantCount = variantCount;
        }

        /// <summary>
        /// The total count of analyzed documents
        /// </summary>
        /// <value>The total count of analyzed documents</value>
        [DataMember(Name = "documentCount", EmitDefaultValue = false)]
        public int DocumentCount { get; set; }

        /// <summary>
        /// Gets or Sets DocumentSize
        /// </summary>
        [DataMember(Name = "documentSize", EmitDefaultValue = false)]
        public PropertyStatistics DocumentSize { get; set; }

        /// <summary>
        /// Gets or Sets VariantCount
        /// </summary>
        [DataMember(Name = "variantCount", EmitDefaultValue = false)]
        public PropertyStatistics VariantCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProductsStatisticsResult {\n");
            sb.Append("  DocumentCount: ").Append(DocumentCount).Append("\n");
            sb.Append("  DocumentSize: ").Append(DocumentSize).Append("\n");
            sb.Append("  VariantCount: ").Append(VariantCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProductsStatisticsResult);
        }

        /// <summary>
        /// Returns true if GetProductsStatisticsResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProductsStatisticsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProductsStatisticsResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentCount == input.DocumentCount ||
                    this.DocumentCount.Equals(input.DocumentCount)
                ) && 
                (
                    this.DocumentSize == input.DocumentSize ||
                    (this.DocumentSize != null &&
                    this.DocumentSize.Equals(input.DocumentSize))
                ) && 
                (
                    this.VariantCount == input.VariantCount ||
                    (this.VariantCount != null &&
                    this.VariantCount.Equals(input.VariantCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DocumentCount.GetHashCode();
                if (this.DocumentSize != null)
                    hashCode = hashCode * 59 + this.DocumentSize.GetHashCode();
                if (this.VariantCount != null)
                    hashCode = hashCode * 59 + this.VariantCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
