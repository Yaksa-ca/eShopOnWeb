/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ProductDefinitionAttributeToAdd
    /// </summary>
    [DataContract(Name = "ProductDefinitionAttributeToAdd")]
    public partial class ProductDefinitionAttributeToAdd : IEquatable<ProductDefinitionAttributeToAdd>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether attribute should be applied to product itself and/or its variants.
        /// </summary>
        /// <value>Indicates whether attribute should be applied to product itself and/or its variants.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttributeTargetEnum
        {
            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            [EnumMember(Value = "Product")]
            Product = 1,

            /// <summary>
            /// Enum ProductAndVariant for value: ProductAndVariant
            /// </summary>
            [EnumMember(Value = "ProductAndVariant")]
            ProductAndVariant = 2,

            /// <summary>
            /// Enum VariantKey for value: VariantKey
            /// </summary>
            [EnumMember(Value = "VariantKey")]
            VariantKey = 3

        }


        /// <summary>
        /// Indicates whether attribute should be applied to product itself and/or its variants.
        /// </summary>
        /// <value>Indicates whether attribute should be applied to product itself and/or its variants.</value>
        [DataMember(Name = "attributeTarget", EmitDefaultValue = false)]
        public AttributeTargetEnum? AttributeTarget { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDefinitionAttributeToAdd" /> class.
        /// </summary>
        /// <param name="attributeName">The name of the existing attribute to associate to the definition.</param>
        /// <param name="attributeTarget">Indicates whether attribute should be applied to product itself and/or its variants..</param>
        /// <param name="sequenceNumber">Affects the order in which attributes are shown when editing a product..</param>
        /// <param name="keyVariantOrder">The order of a key variant attribute..</param>
        /// <param name="isVariantGroup">Gets or sets a value inticating whether the attribute is used for variant grouping.</param>
        public ProductDefinitionAttributeToAdd(string attributeName = default(string), AttributeTargetEnum? attributeTarget = default(AttributeTargetEnum?), int sequenceNumber = default(int), int keyVariantOrder = default(int), bool isVariantGroup = default(bool))
        {
            this.AttributeName = attributeName;
            this.AttributeTarget = attributeTarget;
            this.SequenceNumber = sequenceNumber;
            this.KeyVariantOrder = keyVariantOrder;
            this.IsVariantGroup = isVariantGroup;
        }

        /// <summary>
        /// The name of the existing attribute to associate to the definition
        /// </summary>
        /// <value>The name of the existing attribute to associate to the definition</value>
        [DataMember(Name = "attributeName", EmitDefaultValue = false)]
        public string AttributeName { get; set; }

        /// <summary>
        /// Affects the order in which attributes are shown when editing a product.
        /// </summary>
        /// <value>Affects the order in which attributes are shown when editing a product.</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// The order of a key variant attribute.
        /// </summary>
        /// <value>The order of a key variant attribute.</value>
        [DataMember(Name = "keyVariantOrder", EmitDefaultValue = false)]
        public int KeyVariantOrder { get; set; }

        /// <summary>
        /// Gets or sets a value inticating whether the attribute is used for variant grouping
        /// </summary>
        /// <value>Gets or sets a value inticating whether the attribute is used for variant grouping</value>
        [DataMember(Name = "isVariantGroup", EmitDefaultValue = true)]
        public bool IsVariantGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductDefinitionAttributeToAdd {\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  AttributeTarget: ").Append(AttributeTarget).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  KeyVariantOrder: ").Append(KeyVariantOrder).Append("\n");
            sb.Append("  IsVariantGroup: ").Append(IsVariantGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductDefinitionAttributeToAdd);
        }

        /// <summary>
        /// Returns true if ProductDefinitionAttributeToAdd instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductDefinitionAttributeToAdd to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductDefinitionAttributeToAdd input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttributeName == input.AttributeName ||
                    (this.AttributeName != null &&
                    this.AttributeName.Equals(input.AttributeName))
                ) && 
                (
                    this.AttributeTarget == input.AttributeTarget ||
                    this.AttributeTarget.Equals(input.AttributeTarget)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.KeyVariantOrder == input.KeyVariantOrder ||
                    this.KeyVariantOrder.Equals(input.KeyVariantOrder)
                ) && 
                (
                    this.IsVariantGroup == input.IsVariantGroup ||
                    this.IsVariantGroup.Equals(input.IsVariantGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributeName != null)
                    hashCode = hashCode * 59 + this.AttributeName.GetHashCode();
                hashCode = hashCode * 59 + this.AttributeTarget.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                hashCode = hashCode * 59 + this.KeyVariantOrder.GetHashCode();
                hashCode = hashCode * 59 + this.IsVariantGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
