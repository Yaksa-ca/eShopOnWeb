/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// The API used to query the search engine.
    /// </summary>
    [DataContract(Name = "AdvancedSearchRequest")]
    public partial class AdvancedSearchRequest : IEquatable<AdvancedSearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedSearchRequest" /> class.
        /// </summary>
        /// <param name="configurationName">The name of the configuration to use to process this request.</param>
        /// <param name="query">query.</param>
        /// <param name="autoCorrect">Whether or not to automatically do the correction when there is no result and at least one suggestion.</param>
        /// <param name="boostQueryParams">The boost query parameters for this search. This will append a &#39;bq&#39; parameter to the call to Solr for each param..</param>
        /// <param name="elevatedIds">The ids of the documents that will be elevated.</param>
        /// <param name="facetHierarchyId">The ID of the facet hierarchy to use. This will impact the facets results, only the facets defined in this hierarchy will be returned..</param>
        /// <param name="facetPredicates">List of FacetPredicate to apply on the search.</param>
        /// <param name="facets">The facets, a list of string, that will be included in the results.</param>
        /// <param name="groupByField">The field used to group results..</param>
        /// <param name="includeEmptyFacets">Whether to return the Facet with no values in it.</param>
        /// <param name="includeFacets">Whether facets are returned as part of the search results.</param>
        /// <param name="_operator">The operator (OR, AND), default to AND.</param>
        /// <param name="properties">The collection of properties, represented as string. According to the search engine, a list of properties may be required to retrieve the documents properties.</param>
        /// <param name="searchTerms">The search terms for this search query.</param>
        public AdvancedSearchRequest(string configurationName = default(string), Query query = default(Query), bool autoCorrect = default(bool), List<string> boostQueryParams = default(List<string>), List<string> elevatedIds = default(List<string>), string facetHierarchyId = default(string), List<FacetPredicate> facetPredicates = default(List<FacetPredicate>), List<string> facets = default(List<string>), string groupByField = default(string), bool includeEmptyFacets = default(bool), bool includeFacets = default(bool), string _operator = default(string), List<string> properties = default(List<string>), string searchTerms = default(string))
        {
            this.ConfigurationName = configurationName;
            this.Query = query;
            this.AutoCorrect = autoCorrect;
            this.BoostQueryParams = boostQueryParams;
            this.ElevatedIds = elevatedIds;
            this.FacetHierarchyId = facetHierarchyId;
            this.FacetPredicates = facetPredicates;
            this.Facets = facets;
            this.GroupByField = groupByField;
            this.IncludeEmptyFacets = includeEmptyFacets;
            this.IncludeFacets = includeFacets;
            this.Operator = _operator;
            this.Properties = properties;
            this.SearchTerms = searchTerms;
        }

        /// <summary>
        /// The name of the configuration to use to process this request
        /// </summary>
        /// <value>The name of the configuration to use to process this request</value>
        [DataMember(Name = "configurationName", EmitDefaultValue = false)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public Query Query { get; set; }

        /// <summary>
        /// Whether or not to automatically do the correction when there is no result and at least one suggestion
        /// </summary>
        /// <value>Whether or not to automatically do the correction when there is no result and at least one suggestion</value>
        [DataMember(Name = "autoCorrect", EmitDefaultValue = true)]
        public bool AutoCorrect { get; set; }

        /// <summary>
        /// The boost query parameters for this search. This will append a &#39;bq&#39; parameter to the call to Solr for each param.
        /// </summary>
        /// <value>The boost query parameters for this search. This will append a &#39;bq&#39; parameter to the call to Solr for each param.</value>
        [DataMember(Name = "boostQueryParams", EmitDefaultValue = false)]
        public List<string> BoostQueryParams { get; set; }

        /// <summary>
        /// The ids of the documents that will be elevated
        /// </summary>
        /// <value>The ids of the documents that will be elevated</value>
        [DataMember(Name = "elevatedIds", EmitDefaultValue = false)]
        public List<string> ElevatedIds { get; set; }

        /// <summary>
        /// The ID of the facet hierarchy to use. This will impact the facets results, only the facets defined in this hierarchy will be returned.
        /// </summary>
        /// <value>The ID of the facet hierarchy to use. This will impact the facets results, only the facets defined in this hierarchy will be returned.</value>
        [DataMember(Name = "facetHierarchyId", EmitDefaultValue = false)]
        public string FacetHierarchyId { get; set; }

        /// <summary>
        /// List of FacetPredicate to apply on the search
        /// </summary>
        /// <value>List of FacetPredicate to apply on the search</value>
        [DataMember(Name = "facetPredicates", EmitDefaultValue = false)]
        public List<FacetPredicate> FacetPredicates { get; set; }

        /// <summary>
        /// The facets, a list of string, that will be included in the results
        /// </summary>
        /// <value>The facets, a list of string, that will be included in the results</value>
        [DataMember(Name = "facets", EmitDefaultValue = false)]
        public List<string> Facets { get; set; }

        /// <summary>
        /// The field used to group results.
        /// </summary>
        /// <value>The field used to group results.</value>
        [DataMember(Name = "groupByField", EmitDefaultValue = false)]
        public string GroupByField { get; set; }

        /// <summary>
        /// Whether to return the Facet with no values in it
        /// </summary>
        /// <value>Whether to return the Facet with no values in it</value>
        [DataMember(Name = "includeEmptyFacets", EmitDefaultValue = true)]
        public bool IncludeEmptyFacets { get; set; }

        /// <summary>
        /// Whether facets are returned as part of the search results
        /// </summary>
        /// <value>Whether facets are returned as part of the search results</value>
        [DataMember(Name = "includeFacets", EmitDefaultValue = true)]
        public bool IncludeFacets { get; set; }

        /// <summary>
        /// The operator (OR, AND), default to AND
        /// </summary>
        /// <value>The operator (OR, AND), default to AND</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// The collection of properties, represented as string. According to the search engine, a list of properties may be required to retrieve the documents properties
        /// </summary>
        /// <value>The collection of properties, represented as string. According to the search engine, a list of properties may be required to retrieve the documents properties</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<string> Properties { get; set; }

        /// <summary>
        /// The search terms for this search query
        /// </summary>
        /// <value>The search terms for this search query</value>
        [DataMember(Name = "searchTerms", EmitDefaultValue = false)]
        public string SearchTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdvancedSearchRequest {\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  AutoCorrect: ").Append(AutoCorrect).Append("\n");
            sb.Append("  BoostQueryParams: ").Append(BoostQueryParams).Append("\n");
            sb.Append("  ElevatedIds: ").Append(ElevatedIds).Append("\n");
            sb.Append("  FacetHierarchyId: ").Append(FacetHierarchyId).Append("\n");
            sb.Append("  FacetPredicates: ").Append(FacetPredicates).Append("\n");
            sb.Append("  Facets: ").Append(Facets).Append("\n");
            sb.Append("  GroupByField: ").Append(GroupByField).Append("\n");
            sb.Append("  IncludeEmptyFacets: ").Append(IncludeEmptyFacets).Append("\n");
            sb.Append("  IncludeFacets: ").Append(IncludeFacets).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdvancedSearchRequest);
        }

        /// <summary>
        /// Returns true if AdvancedSearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AdvancedSearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdvancedSearchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.AutoCorrect == input.AutoCorrect ||
                    this.AutoCorrect.Equals(input.AutoCorrect)
                ) && 
                (
                    this.BoostQueryParams == input.BoostQueryParams ||
                    this.BoostQueryParams != null &&
                    input.BoostQueryParams != null &&
                    this.BoostQueryParams.SequenceEqual(input.BoostQueryParams)
                ) && 
                (
                    this.ElevatedIds == input.ElevatedIds ||
                    this.ElevatedIds != null &&
                    input.ElevatedIds != null &&
                    this.ElevatedIds.SequenceEqual(input.ElevatedIds)
                ) && 
                (
                    this.FacetHierarchyId == input.FacetHierarchyId ||
                    (this.FacetHierarchyId != null &&
                    this.FacetHierarchyId.Equals(input.FacetHierarchyId))
                ) && 
                (
                    this.FacetPredicates == input.FacetPredicates ||
                    this.FacetPredicates != null &&
                    input.FacetPredicates != null &&
                    this.FacetPredicates.SequenceEqual(input.FacetPredicates)
                ) && 
                (
                    this.Facets == input.Facets ||
                    this.Facets != null &&
                    input.Facets != null &&
                    this.Facets.SequenceEqual(input.Facets)
                ) && 
                (
                    this.GroupByField == input.GroupByField ||
                    (this.GroupByField != null &&
                    this.GroupByField.Equals(input.GroupByField))
                ) && 
                (
                    this.IncludeEmptyFacets == input.IncludeEmptyFacets ||
                    this.IncludeEmptyFacets.Equals(input.IncludeEmptyFacets)
                ) && 
                (
                    this.IncludeFacets == input.IncludeFacets ||
                    this.IncludeFacets.Equals(input.IncludeFacets)
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.SearchTerms == input.SearchTerms ||
                    (this.SearchTerms != null &&
                    this.SearchTerms.Equals(input.SearchTerms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigurationName != null)
                    hashCode = hashCode * 59 + this.ConfigurationName.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                hashCode = hashCode * 59 + this.AutoCorrect.GetHashCode();
                if (this.BoostQueryParams != null)
                    hashCode = hashCode * 59 + this.BoostQueryParams.GetHashCode();
                if (this.ElevatedIds != null)
                    hashCode = hashCode * 59 + this.ElevatedIds.GetHashCode();
                if (this.FacetHierarchyId != null)
                    hashCode = hashCode * 59 + this.FacetHierarchyId.GetHashCode();
                if (this.FacetPredicates != null)
                    hashCode = hashCode * 59 + this.FacetPredicates.GetHashCode();
                if (this.Facets != null)
                    hashCode = hashCode * 59 + this.Facets.GetHashCode();
                if (this.GroupByField != null)
                    hashCode = hashCode * 59 + this.GroupByField.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeEmptyFacets.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeFacets.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.SearchTerms != null)
                    hashCode = hashCode * 59 + this.SearchTerms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
