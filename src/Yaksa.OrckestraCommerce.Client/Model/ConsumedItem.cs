/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// ConsumedItem
    /// </summary>
    [DataContract(Name = "ConsumedItem")]
    public partial class ConsumedItem : IEquatable<ConsumedItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumedItem" /> class.
        /// </summary>
        /// <param name="conditionId">The condition id..</param>
        /// <param name="lineItemId">The lineItem id..</param>
        /// <param name="promotionId">The promotion id..</param>
        /// <param name="quantity">The quantity of units consumed..</param>
        /// <param name="rewardId">The reward id..</param>
        public ConsumedItem(string conditionId = default(string), string lineItemId = default(string), string promotionId = default(string), double quantity = default(double), string rewardId = default(string))
        {
            this.ConditionId = conditionId;
            this.LineItemId = lineItemId;
            this.PromotionId = promotionId;
            this.Quantity = quantity;
            this.RewardId = rewardId;
        }

        /// <summary>
        /// The condition id.
        /// </summary>
        /// <value>The condition id.</value>
        [DataMember(Name = "conditionId", EmitDefaultValue = false)]
        public string ConditionId { get; set; }

        /// <summary>
        /// The lineItem id.
        /// </summary>
        /// <value>The lineItem id.</value>
        [DataMember(Name = "lineItemId", EmitDefaultValue = false)]
        public string LineItemId { get; set; }

        /// <summary>
        /// The promotion id.
        /// </summary>
        /// <value>The promotion id.</value>
        [DataMember(Name = "promotionId", EmitDefaultValue = false)]
        public string PromotionId { get; set; }

        /// <summary>
        /// The quantity of units consumed.
        /// </summary>
        /// <value>The quantity of units consumed.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// The reward id.
        /// </summary>
        /// <value>The reward id.</value>
        [DataMember(Name = "rewardId", EmitDefaultValue = false)]
        public string RewardId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsumedItem {\n");
            sb.Append("  ConditionId: ").Append(ConditionId).Append("\n");
            sb.Append("  LineItemId: ").Append(LineItemId).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RewardId: ").Append(RewardId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsumedItem);
        }

        /// <summary>
        /// Returns true if ConsumedItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsumedItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsumedItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConditionId == input.ConditionId ||
                    (this.ConditionId != null &&
                    this.ConditionId.Equals(input.ConditionId))
                ) && 
                (
                    this.LineItemId == input.LineItemId ||
                    (this.LineItemId != null &&
                    this.LineItemId.Equals(input.LineItemId))
                ) && 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.RewardId == input.RewardId ||
                    (this.RewardId != null &&
                    this.RewardId.Equals(input.RewardId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConditionId != null)
                    hashCode = hashCode * 59 + this.ConditionId.GetHashCode();
                if (this.LineItemId != null)
                    hashCode = hashCode * 59 + this.LineItemId.GetHashCode();
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RewardId != null)
                    hashCode = hashCode * 59 + this.RewardId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
