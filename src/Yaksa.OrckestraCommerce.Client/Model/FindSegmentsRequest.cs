/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Segments are entities which are used to store one, or more marketing targeting conditions.
    /// </summary>
    [DataContract(Name = "FindSegmentsRequest")]
    public partial class FindSegmentsRequest : IEquatable<FindSegmentsRequest>, IValidatableObject
    {
        /// <summary>
        /// The status of the segment(s) to search for.
        /// </summary>
        /// <value>The status of the segment(s) to search for.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SegmentStatusEnum
        {
            /// <summary>
            /// Enum Unspecified for value: Unspecified
            /// </summary>
            [EnumMember(Value = "Unspecified")]
            Unspecified = 1,

            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 2,

            /// <summary>
            /// Enum Inactive for value: Inactive
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive = 3

        }


        /// <summary>
        /// The status of the segment(s) to search for.
        /// </summary>
        /// <value>The status of the segment(s) to search for.</value>
        [DataMember(Name = "segmentStatus", EmitDefaultValue = false)]
        public SegmentStatusEnum? SegmentStatus { get; set; }
        /// <summary>
        /// The sort direction. (Ascending or descending)
        /// </summary>
        /// <value>The sort direction. (Ascending or descending)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Ascending for value: Ascending
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending = 1,

            /// <summary>
            /// Enum Descending for value: Descending
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending = 2

        }


        /// <summary>
        /// The sort direction. (Ascending or descending)
        /// </summary>
        /// <value>The sort direction. (Ascending or descending)</value>
        [DataMember(Name = "sortDirection", EmitDefaultValue = false)]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// The sort by specifying the SegmentOrderField.
        /// </summary>
        /// <value>The sort by specifying the SegmentOrderField.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortOrderFieldEnum
        {
            /// <summary>
            /// Enum Name for value: Name
            /// </summary>
            [EnumMember(Value = "Name")]
            Name = 1,

            /// <summary>
            /// Enum Status for value: Status
            /// </summary>
            [EnumMember(Value = "Status")]
            Status = 2,

            /// <summary>
            /// Enum StartDate for value: StartDate
            /// </summary>
            [EnumMember(Value = "StartDate")]
            StartDate = 3,

            /// <summary>
            /// Enum EndDate for value: EndDate
            /// </summary>
            [EnumMember(Value = "EndDate")]
            EndDate = 4,

            /// <summary>
            /// Enum Type for value: Type
            /// </summary>
            [EnumMember(Value = "Type")]
            Type = 5,

            /// <summary>
            /// Enum Scope for value: Scope
            /// </summary>
            [EnumMember(Value = "Scope")]
            Scope = 6

        }


        /// <summary>
        /// The sort by specifying the SegmentOrderField.
        /// </summary>
        /// <value>The sort by specifying the SegmentOrderField.</value>
        [DataMember(Name = "sortOrderField", EmitDefaultValue = false)]
        public SortOrderFieldEnum? SortOrderField { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindSegmentsRequest" /> class.
        /// </summary>
        /// <param name="maximumItems">The number of items to return. (This is the page size when requesting paged data).</param>
        /// <param name="segmentStatus">The status of the segment(s) to search for..</param>
        /// <param name="sortDirection">The sort direction. (Ascending or descending).</param>
        /// <param name="sortOrderField">The sort by specifying the SegmentOrderField..</param>
        /// <param name="startingIndex">The starting index. (The offset of the first record when requesting paged data).</param>
        /// <param name="validateTargeting">Indicates whether the targeting conditions in the segment should be validated.</param>
        public FindSegmentsRequest(int maximumItems = default(int), SegmentStatusEnum? segmentStatus = default(SegmentStatusEnum?), SortDirectionEnum? sortDirection = default(SortDirectionEnum?), SortOrderFieldEnum? sortOrderField = default(SortOrderFieldEnum?), int startingIndex = default(int), bool validateTargeting = default(bool))
        {
            this.MaximumItems = maximumItems;
            this.SegmentStatus = segmentStatus;
            this.SortDirection = sortDirection;
            this.SortOrderField = sortOrderField;
            this.StartingIndex = startingIndex;
            this.ValidateTargeting = validateTargeting;
        }

        /// <summary>
        /// The number of items to return. (This is the page size when requesting paged data)
        /// </summary>
        /// <value>The number of items to return. (This is the page size when requesting paged data)</value>
        [DataMember(Name = "maximumItems", EmitDefaultValue = false)]
        public int MaximumItems { get; set; }

        /// <summary>
        /// The starting index. (The offset of the first record when requesting paged data)
        /// </summary>
        /// <value>The starting index. (The offset of the first record when requesting paged data)</value>
        [DataMember(Name = "startingIndex", EmitDefaultValue = false)]
        public int StartingIndex { get; set; }

        /// <summary>
        /// Indicates whether the targeting conditions in the segment should be validated
        /// </summary>
        /// <value>Indicates whether the targeting conditions in the segment should be validated</value>
        [DataMember(Name = "validateTargeting", EmitDefaultValue = true)]
        public bool ValidateTargeting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindSegmentsRequest {\n");
            sb.Append("  MaximumItems: ").Append(MaximumItems).Append("\n");
            sb.Append("  SegmentStatus: ").Append(SegmentStatus).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  SortOrderField: ").Append(SortOrderField).Append("\n");
            sb.Append("  StartingIndex: ").Append(StartingIndex).Append("\n");
            sb.Append("  ValidateTargeting: ").Append(ValidateTargeting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindSegmentsRequest);
        }

        /// <summary>
        /// Returns true if FindSegmentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FindSegmentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindSegmentsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaximumItems == input.MaximumItems ||
                    this.MaximumItems.Equals(input.MaximumItems)
                ) && 
                (
                    this.SegmentStatus == input.SegmentStatus ||
                    this.SegmentStatus.Equals(input.SegmentStatus)
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    this.SortDirection.Equals(input.SortDirection)
                ) && 
                (
                    this.SortOrderField == input.SortOrderField ||
                    this.SortOrderField.Equals(input.SortOrderField)
                ) && 
                (
                    this.StartingIndex == input.StartingIndex ||
                    this.StartingIndex.Equals(input.StartingIndex)
                ) && 
                (
                    this.ValidateTargeting == input.ValidateTargeting ||
                    this.ValidateTargeting.Equals(input.ValidateTargeting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.MaximumItems.GetHashCode();
                hashCode = hashCode * 59 + this.SegmentStatus.GetHashCode();
                hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                hashCode = hashCode * 59 + this.SortOrderField.GetHashCode();
                hashCode = hashCode * 59 + this.StartingIndex.GetHashCode();
                hashCode = hashCode * 59 + this.ValidateTargeting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
