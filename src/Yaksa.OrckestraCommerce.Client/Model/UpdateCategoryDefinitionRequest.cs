/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Metadata are entities which represents additional definitions and attribute information.
    /// </summary>
    [DataContract(Name = "UpdateCategoryDefinitionRequest")]
    public partial class UpdateCategoryDefinitionRequest : IEquatable<UpdateCategoryDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCategoryDefinitionRequest" /> class.
        /// </summary>
        /// <param name="attributesToAdd">The list of attributes to associate to the definition. If none are specified, the list is unchanged..</param>
        /// <param name="attributesToRemove">The list of the names of the attributes to be removed from the category definition.</param>
        /// <param name="description">The description of the category definition.</param>
        /// <param name="displayName">displayName.</param>
        public UpdateCategoryDefinitionRequest(List<CategoryDefinitionAttributeToAdd> attributesToAdd = default(List<CategoryDefinitionAttributeToAdd>), List<string> attributesToRemove = default(List<string>), string description = default(string), Dictionary<string, string> displayName = default(Dictionary<string, string>))
        {
            this.AttributesToAdd = attributesToAdd;
            this.AttributesToRemove = attributesToRemove;
            this.Description = description;
            this.DisplayName = displayName;
        }

        /// <summary>
        /// The list of attributes to associate to the definition. If none are specified, the list is unchanged.
        /// </summary>
        /// <value>The list of attributes to associate to the definition. If none are specified, the list is unchanged.</value>
        [DataMember(Name = "attributesToAdd", EmitDefaultValue = false)]
        public List<CategoryDefinitionAttributeToAdd> AttributesToAdd { get; set; }

        /// <summary>
        /// The list of the names of the attributes to be removed from the category definition
        /// </summary>
        /// <value>The list of the names of the attributes to be removed from the category definition</value>
        [DataMember(Name = "attributesToRemove", EmitDefaultValue = false)]
        public List<string> AttributesToRemove { get; set; }

        /// <summary>
        /// The description of the category definition
        /// </summary>
        /// <value>The description of the category definition</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCategoryDefinitionRequest {\n");
            sb.Append("  AttributesToAdd: ").Append(AttributesToAdd).Append("\n");
            sb.Append("  AttributesToRemove: ").Append(AttributesToRemove).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCategoryDefinitionRequest);
        }

        /// <summary>
        /// Returns true if UpdateCategoryDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCategoryDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCategoryDefinitionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttributesToAdd == input.AttributesToAdd ||
                    this.AttributesToAdd != null &&
                    input.AttributesToAdd != null &&
                    this.AttributesToAdd.SequenceEqual(input.AttributesToAdd)
                ) && 
                (
                    this.AttributesToRemove == input.AttributesToRemove ||
                    this.AttributesToRemove != null &&
                    input.AttributesToRemove != null &&
                    this.AttributesToRemove.SequenceEqual(input.AttributesToRemove)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributesToAdd != null)
                    hashCode = hashCode * 59 + this.AttributesToAdd.GetHashCode();
                if (this.AttributesToRemove != null)
                    hashCode = hashCode * 59 + this.AttributesToRemove.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
