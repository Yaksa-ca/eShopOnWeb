/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// TimeZone
    /// </summary>
    [DataContract(Name = "TimeZone")]
    public partial class TimeZone : IEquatable<TimeZone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeZone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeZone() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeZone" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="baseUtcOffset">The time difference between the current time zone&#39;s standard time and Coordinated Universal Time (UTC).</param>
        /// <param name="displayName">The general display name that represents the time zone.</param>
        /// <param name="supportsDaylightSavingTime">Whether the time zone has any daylight saving time rules.</param>
        public TimeZone(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), double baseUtcOffset = default(double), string displayName = default(string), bool supportsDaylightSavingTime = default(bool))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for TimeZone and cannot be null");
            this.PropertyBag = propertyBag;
            this.BaseUtcOffset = baseUtcOffset;
            this.DisplayName = displayName;
            this.SupportsDaylightSavingTime = supportsDaylightSavingTime;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// The time difference between the current time zone&#39;s standard time and Coordinated Universal Time (UTC)
        /// </summary>
        /// <value>The time difference between the current time zone&#39;s standard time and Coordinated Universal Time (UTC)</value>
        [DataMember(Name = "baseUtcOffset", EmitDefaultValue = false)]
        public double BaseUtcOffset { get; set; }

        /// <summary>
        /// The general display name that represents the time zone
        /// </summary>
        /// <value>The general display name that represents the time zone</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Whether the time zone has any daylight saving time rules
        /// </summary>
        /// <value>Whether the time zone has any daylight saving time rules</value>
        [DataMember(Name = "supportsDaylightSavingTime", EmitDefaultValue = true)]
        public bool SupportsDaylightSavingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeZone {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  BaseUtcOffset: ").Append(BaseUtcOffset).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  SupportsDaylightSavingTime: ").Append(SupportsDaylightSavingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeZone);
        }

        /// <summary>
        /// Returns true if TimeZone instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeZone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeZone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.BaseUtcOffset == input.BaseUtcOffset ||
                    this.BaseUtcOffset.Equals(input.BaseUtcOffset)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.SupportsDaylightSavingTime == input.SupportsDaylightSavingTime ||
                    this.SupportsDaylightSavingTime.Equals(input.SupportsDaylightSavingTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                hashCode = hashCode * 59 + this.BaseUtcOffset.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.SupportsDaylightSavingTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
