/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// VariantPriceEntry
    /// </summary>
    [DataContract(Name = "VariantPriceEntry")]
    public partial class VariantPriceEntry : IEquatable<VariantPriceEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariantPriceEntry" /> class.
        /// </summary>
        /// <param name="pricesEntries">The collection of ProductPriceEntry which each item represents the price of the Variant in a PriceList.</param>
        /// <param name="variantId">The unique identifier of the variant..</param>
        public VariantPriceEntry(List<ProductPriceEntry> pricesEntries = default(List<ProductPriceEntry>), string variantId = default(string))
        {
            this.PricesEntries = pricesEntries;
            this.VariantId = variantId;
        }

        /// <summary>
        /// The collection of ProductPriceEntry which each item represents the price of the Variant in a PriceList
        /// </summary>
        /// <value>The collection of ProductPriceEntry which each item represents the price of the Variant in a PriceList</value>
        [DataMember(Name = "pricesEntries", EmitDefaultValue = false)]
        public List<ProductPriceEntry> PricesEntries { get; set; }

        /// <summary>
        /// The unique identifier of the variant.
        /// </summary>
        /// <value>The unique identifier of the variant.</value>
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariantPriceEntry {\n");
            sb.Append("  PricesEntries: ").Append(PricesEntries).Append("\n");
            sb.Append("  VariantId: ").Append(VariantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariantPriceEntry);
        }

        /// <summary>
        /// Returns true if VariantPriceEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of VariantPriceEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariantPriceEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PricesEntries == input.PricesEntries ||
                    this.PricesEntries != null &&
                    input.PricesEntries != null &&
                    this.PricesEntries.SequenceEqual(input.PricesEntries)
                ) && 
                (
                    this.VariantId == input.VariantId ||
                    (this.VariantId != null &&
                    this.VariantId.Equals(input.VariantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PricesEntries != null)
                    hashCode = hashCode * 59 + this.PricesEntries.GetHashCode();
                if (this.VariantId != null)
                    hashCode = hashCode * 59 + this.VariantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
