/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Globalization are entities related to regional settings. Such as countries, regions, timezones and cultures.
    /// </summary>
    [DataContract(Name = "AddCountryRequest")]
    public partial class AddCountryRequest : IEquatable<AddCountryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddCountryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddCountryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddCountryRequest" /> class.
        /// </summary>
        /// <param name="isoCode">Two letter code that identifies Country uniquely (ISO 3166) (required).</param>
        /// <param name="isSupported">The indicator specifying if the Country is supported by the merchant.</param>
        /// <param name="name">name.</param>
        /// <param name="phoneRegex">The Country&#39;s telephone validation regular expression.</param>
        /// <param name="postalCodeRegex">The Country&#39;s postal code validation regular expression.</param>
        /// <param name="sortOrder">The number used for ordering the Country in a list.</param>
        public AddCountryRequest(string isoCode = default(string), bool isSupported = default(bool), Dictionary<string, string> name = default(Dictionary<string, string>), string phoneRegex = default(string), string postalCodeRegex = default(string), int sortOrder = default(int))
        {
            // to ensure "isoCode" is required (not null)
            this.IsoCode = isoCode ?? throw new ArgumentNullException("isoCode is a required property for AddCountryRequest and cannot be null");
            this.IsSupported = isSupported;
            this.Name = name;
            this.PhoneRegex = phoneRegex;
            this.PostalCodeRegex = postalCodeRegex;
            this.SortOrder = sortOrder;
        }

        /// <summary>
        /// Two letter code that identifies Country uniquely (ISO 3166)
        /// </summary>
        /// <value>Two letter code that identifies Country uniquely (ISO 3166)</value>
        [DataMember(Name = "isoCode", IsRequired = true, EmitDefaultValue = false)]
        public string IsoCode { get; set; }

        /// <summary>
        /// The indicator specifying if the Country is supported by the merchant
        /// </summary>
        /// <value>The indicator specifying if the Country is supported by the merchant</value>
        [DataMember(Name = "isSupported", EmitDefaultValue = true)]
        public bool IsSupported { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public Dictionary<string, string> Name { get; set; }

        /// <summary>
        /// The Country&#39;s telephone validation regular expression
        /// </summary>
        /// <value>The Country&#39;s telephone validation regular expression</value>
        [DataMember(Name = "phoneRegex", EmitDefaultValue = false)]
        public string PhoneRegex { get; set; }

        /// <summary>
        /// The Country&#39;s postal code validation regular expression
        /// </summary>
        /// <value>The Country&#39;s postal code validation regular expression</value>
        [DataMember(Name = "postalCodeRegex", EmitDefaultValue = false)]
        public string PostalCodeRegex { get; set; }

        /// <summary>
        /// The number used for ordering the Country in a list
        /// </summary>
        /// <value>The number used for ordering the Country in a list</value>
        [DataMember(Name = "sortOrder", EmitDefaultValue = false)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddCountryRequest {\n");
            sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
            sb.Append("  IsSupported: ").Append(IsSupported).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneRegex: ").Append(PhoneRegex).Append("\n");
            sb.Append("  PostalCodeRegex: ").Append(PostalCodeRegex).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddCountryRequest);
        }

        /// <summary>
        /// Returns true if AddCountryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddCountryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddCountryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsoCode == input.IsoCode ||
                    (this.IsoCode != null &&
                    this.IsoCode.Equals(input.IsoCode))
                ) && 
                (
                    this.IsSupported == input.IsSupported ||
                    this.IsSupported.Equals(input.IsSupported)
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name != null &&
                    input.Name != null &&
                    this.Name.SequenceEqual(input.Name)
                ) && 
                (
                    this.PhoneRegex == input.PhoneRegex ||
                    (this.PhoneRegex != null &&
                    this.PhoneRegex.Equals(input.PhoneRegex))
                ) && 
                (
                    this.PostalCodeRegex == input.PostalCodeRegex ||
                    (this.PostalCodeRegex != null &&
                    this.PostalCodeRegex.Equals(input.PostalCodeRegex))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsoCode != null)
                    hashCode = hashCode * 59 + this.IsoCode.GetHashCode();
                hashCode = hashCode * 59 + this.IsSupported.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PhoneRegex != null)
                    hashCode = hashCode * 59 + this.PhoneRegex.GetHashCode();
                if (this.PostalCodeRegex != null)
                    hashCode = hashCode * 59 + this.PostalCodeRegex.GetHashCode();
                hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
