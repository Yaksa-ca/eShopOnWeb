/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Roles represents what a person/group is.
    /// </summary>
    [DataContract(Name = "RemoveRoleChildRequest")]
    public partial class RemoveRoleChildRequest : IEquatable<RemoveRoleChildRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoveRoleChildRequest" /> class.
        /// </summary>
        /// <param name="applicationName">the application name..</param>
        /// <param name="childRoleId">the child role identifier..</param>
        /// <param name="parentRoleId">the parent role identifier..</param>
        public RemoveRoleChildRequest(string applicationName = default(string), int childRoleId = default(int), int parentRoleId = default(int))
        {
            this.ApplicationName = applicationName;
            this.ChildRoleId = childRoleId;
            this.ParentRoleId = parentRoleId;
        }

        /// <summary>
        /// the application name.
        /// </summary>
        /// <value>the application name.</value>
        [DataMember(Name = "applicationName", EmitDefaultValue = false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// the child role identifier.
        /// </summary>
        /// <value>the child role identifier.</value>
        [DataMember(Name = "childRoleId", EmitDefaultValue = false)]
        public int ChildRoleId { get; set; }

        /// <summary>
        /// the parent role identifier.
        /// </summary>
        /// <value>the parent role identifier.</value>
        [DataMember(Name = "parentRoleId", EmitDefaultValue = false)]
        public int ParentRoleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoveRoleChildRequest {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ChildRoleId: ").Append(ChildRoleId).Append("\n");
            sb.Append("  ParentRoleId: ").Append(ParentRoleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoveRoleChildRequest);
        }

        /// <summary>
        /// Returns true if RemoveRoleChildRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoveRoleChildRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoveRoleChildRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.ChildRoleId == input.ChildRoleId ||
                    this.ChildRoleId.Equals(input.ChildRoleId)
                ) && 
                (
                    this.ParentRoleId == input.ParentRoleId ||
                    this.ParentRoleId.Equals(input.ParentRoleId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                hashCode = hashCode * 59 + this.ChildRoleId.GetHashCode();
                hashCode = hashCode * 59 + this.ParentRoleId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
