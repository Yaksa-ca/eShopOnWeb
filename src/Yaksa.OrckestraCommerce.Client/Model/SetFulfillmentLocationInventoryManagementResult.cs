/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// SetFulfillmentLocationInventoryManagementResult
    /// </summary>
    [DataContract(Name = "SetFulfillmentLocationInventoryManagementResult")]
    public partial class SetFulfillmentLocationInventoryManagementResult : IEquatable<SetFulfillmentLocationInventoryManagementResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetFulfillmentLocationInventoryManagementResult" /> class.
        /// </summary>
        /// <param name="alreadyUsedName">the name of the fulfillment location using the specfied inventory location identifier..</param>
        /// <param name="alreadyUsedNumber">the number of the fulfillment location using the specfied inventory location identifier..</param>
        /// <param name="isSuccess">a value indicating whether the operation was completed successfully..</param>
        public SetFulfillmentLocationInventoryManagementResult(string alreadyUsedName = default(string), string alreadyUsedNumber = default(string), bool isSuccess = default(bool))
        {
            this.AlreadyUsedName = alreadyUsedName;
            this.AlreadyUsedNumber = alreadyUsedNumber;
            this.IsSuccess = isSuccess;
        }

        /// <summary>
        /// the name of the fulfillment location using the specfied inventory location identifier.
        /// </summary>
        /// <value>the name of the fulfillment location using the specfied inventory location identifier.</value>
        [DataMember(Name = "alreadyUsedName", EmitDefaultValue = false)]
        public string AlreadyUsedName { get; set; }

        /// <summary>
        /// the number of the fulfillment location using the specfied inventory location identifier.
        /// </summary>
        /// <value>the number of the fulfillment location using the specfied inventory location identifier.</value>
        [DataMember(Name = "alreadyUsedNumber", EmitDefaultValue = false)]
        public string AlreadyUsedNumber { get; set; }

        /// <summary>
        /// a value indicating whether the operation was completed successfully.
        /// </summary>
        /// <value>a value indicating whether the operation was completed successfully.</value>
        [DataMember(Name = "isSuccess", EmitDefaultValue = true)]
        public bool IsSuccess { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetFulfillmentLocationInventoryManagementResult {\n");
            sb.Append("  AlreadyUsedName: ").Append(AlreadyUsedName).Append("\n");
            sb.Append("  AlreadyUsedNumber: ").Append(AlreadyUsedNumber).Append("\n");
            sb.Append("  IsSuccess: ").Append(IsSuccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetFulfillmentLocationInventoryManagementResult);
        }

        /// <summary>
        /// Returns true if SetFulfillmentLocationInventoryManagementResult instances are equal
        /// </summary>
        /// <param name="input">Instance of SetFulfillmentLocationInventoryManagementResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetFulfillmentLocationInventoryManagementResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AlreadyUsedName == input.AlreadyUsedName ||
                    (this.AlreadyUsedName != null &&
                    this.AlreadyUsedName.Equals(input.AlreadyUsedName))
                ) && 
                (
                    this.AlreadyUsedNumber == input.AlreadyUsedNumber ||
                    (this.AlreadyUsedNumber != null &&
                    this.AlreadyUsedNumber.Equals(input.AlreadyUsedNumber))
                ) && 
                (
                    this.IsSuccess == input.IsSuccess ||
                    this.IsSuccess.Equals(input.IsSuccess)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlreadyUsedName != null)
                    hashCode = hashCode * 59 + this.AlreadyUsedName.GetHashCode();
                if (this.AlreadyUsedNumber != null)
                    hashCode = hashCode * 59 + this.AlreadyUsedNumber.GetHashCode();
                hashCode = hashCode * 59 + this.IsSuccess.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
