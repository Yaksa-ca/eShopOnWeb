/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Fulfillment locations are entities which handles fulfillment for a shipment.
    /// </summary>
    [DataContract(Name = "SetFulfillmentLocationInventoryManagementRequest")]
    public partial class SetFulfillmentLocationInventoryManagementRequest : IEquatable<SetFulfillmentLocationInventoryManagementRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetFulfillmentLocationInventoryManagementRequest" /> class.
        /// </summary>
        /// <param name="inventoryLocationId">the unique identifier of the inventory location..</param>
        /// <param name="inventoryProviderId">the identifier of the inventory provider..</param>
        /// <param name="isAtpEnabled">a value indicating whether the inventory availability to promise is enabled..</param>
        /// <param name="isInventoryEnabled">whether the inventory is enabled..</param>
        public SetFulfillmentLocationInventoryManagementRequest(string inventoryLocationId = default(string), string inventoryProviderId = default(string), bool isAtpEnabled = default(bool), bool isInventoryEnabled = default(bool))
        {
            this.InventoryLocationId = inventoryLocationId;
            this.InventoryProviderId = inventoryProviderId;
            this.IsAtpEnabled = isAtpEnabled;
            this.IsInventoryEnabled = isInventoryEnabled;
        }

        /// <summary>
        /// the unique identifier of the inventory location.
        /// </summary>
        /// <value>the unique identifier of the inventory location.</value>
        [DataMember(Name = "inventoryLocationId", EmitDefaultValue = false)]
        public string InventoryLocationId { get; set; }

        /// <summary>
        /// the identifier of the inventory provider.
        /// </summary>
        /// <value>the identifier of the inventory provider.</value>
        [DataMember(Name = "inventoryProviderId", EmitDefaultValue = false)]
        public string InventoryProviderId { get; set; }

        /// <summary>
        /// a value indicating whether the inventory availability to promise is enabled.
        /// </summary>
        /// <value>a value indicating whether the inventory availability to promise is enabled.</value>
        [DataMember(Name = "isAtpEnabled", EmitDefaultValue = true)]
        public bool IsAtpEnabled { get; set; }

        /// <summary>
        /// whether the inventory is enabled.
        /// </summary>
        /// <value>whether the inventory is enabled.</value>
        [DataMember(Name = "isInventoryEnabled", EmitDefaultValue = true)]
        public bool IsInventoryEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetFulfillmentLocationInventoryManagementRequest {\n");
            sb.Append("  InventoryLocationId: ").Append(InventoryLocationId).Append("\n");
            sb.Append("  InventoryProviderId: ").Append(InventoryProviderId).Append("\n");
            sb.Append("  IsAtpEnabled: ").Append(IsAtpEnabled).Append("\n");
            sb.Append("  IsInventoryEnabled: ").Append(IsInventoryEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetFulfillmentLocationInventoryManagementRequest);
        }

        /// <summary>
        /// Returns true if SetFulfillmentLocationInventoryManagementRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetFulfillmentLocationInventoryManagementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetFulfillmentLocationInventoryManagementRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InventoryLocationId == input.InventoryLocationId ||
                    (this.InventoryLocationId != null &&
                    this.InventoryLocationId.Equals(input.InventoryLocationId))
                ) && 
                (
                    this.InventoryProviderId == input.InventoryProviderId ||
                    (this.InventoryProviderId != null &&
                    this.InventoryProviderId.Equals(input.InventoryProviderId))
                ) && 
                (
                    this.IsAtpEnabled == input.IsAtpEnabled ||
                    this.IsAtpEnabled.Equals(input.IsAtpEnabled)
                ) && 
                (
                    this.IsInventoryEnabled == input.IsInventoryEnabled ||
                    this.IsInventoryEnabled.Equals(input.IsInventoryEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InventoryLocationId != null)
                    hashCode = hashCode * 59 + this.InventoryLocationId.GetHashCode();
                if (this.InventoryProviderId != null)
                    hashCode = hashCode * 59 + this.InventoryProviderId.GetHashCode();
                hashCode = hashCode * 59 + this.IsAtpEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.IsInventoryEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
