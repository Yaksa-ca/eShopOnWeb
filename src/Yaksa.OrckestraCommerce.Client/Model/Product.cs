/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract(Name = "Product")]
    public partial class Product : IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the entity. (required).</param>
        /// <param name="propertyBag">propertyBag.</param>
        /// <param name="created">Date the entity was created.</param>
        /// <param name="createdBy">Identifier of the operator who created the entity.</param>
        /// <param name="lastModified">Date that the last modification was applied to the entity.</param>
        /// <param name="lastModifiedBy">Identifier of the operator who last modified the entity.</param>
        /// <param name="activationOverridden">Allow overriding the Active flag and the activation schedule at a descendent scope level..</param>
        /// <param name="allowVariantActivationSchedule">Allow overriding the activation schedule at the variant level..</param>
        /// <param name="brand">the Brand of the Product..</param>
        /// <param name="itemFormat">the ItemFormat of the Product (must be mg, mm, mm2, mm3 or Unit quantity)..</param>
        /// <param name="scheduledActivation">The date on which the product becomes active..</param>
        /// <param name="scheduledDeactivation">The date on which the product becomes inactive..</param>
        /// <param name="sellingMethod">the Selling Method of the Product..</param>
        /// <param name="unitOfMeasure">the unit of measure of the Product..</param>
        /// <param name="weight">The weight of the Product..</param>
        /// <param name="weightUOM">The weight unit of measure of the Product..</param>
        /// <param name="active">whether the Product is active or not..</param>
        /// <param name="catalogId">the id of the catalog to which the product belongs..</param>
        /// <param name="definitionName">the product definition name that represents the Product (its properties)..</param>
        /// <param name="description">description.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="includeInSearch">Whether or not the Product should be included in the front-end search result..</param>
        /// <param name="isOverridden">whether the product has overridden values in the current Sales scope..</param>
        /// <param name="lastPublishedDate">the last published date of the Product..</param>
        /// <param name="listPrice">the default price for the Product.</param>
        /// <param name="mediaSet">the list of media of the Product.</param>
        /// <param name="newProductDate">the number of days the Product is flagged as a new product introduction..</param>
        /// <param name="parentCategoryIds">the business key (id) of the primary Category..</param>
        /// <param name="prices">a list of ProductPriceEntry..</param>
        /// <param name="primaryParentCategoryId">the business key (id) of the primary Category..</param>
        /// <param name="publicationStatus">the publication status of the Product. Currently supported values are &#39;InProgress&#39;, &#39;Rejected&#39;, &#39;PendingApproval&#39;, &#39;ReadyToCompose&#39;, &#39;Published&#39;.</param>
        /// <param name="relationships">The list of related entities (Product, Category or Variant) related to the Product..</param>
        /// <param name="sequenceNumber">the number used for ordering the Product in a list..</param>
        /// <param name="sku">the stock keeping unit code (SKU) of the Product..</param>
        /// <param name="taxCategory">the tax category of the Product..</param>
        /// <param name="variantMediaSet">the media list of key variants of the Product.</param>
        /// <param name="variants">the list of Variant of the Product.</param>
        /// <param name="idsOfOverriddenVariants">idsOfOverriddenVariants.</param>
        /// <param name="overriddenProperties">overriddenProperties.</param>
        public Product(string id = default(string), Dictionary<string, Object> propertyBag = default(Dictionary<string, Object>), DateTime created = default(DateTime), string createdBy = default(string), DateTime lastModified = default(DateTime), string lastModifiedBy = default(string), bool activationOverridden = default(bool), bool allowVariantActivationSchedule = default(bool), string brand = default(string), double itemFormat = default(double), DateTime scheduledActivation = default(DateTime), DateTime scheduledDeactivation = default(DateTime), string sellingMethod = default(string), string unitOfMeasure = default(string), double weight = default(double), string weightUOM = default(string), bool active = default(bool), string catalogId = default(string), string definitionName = default(string), Dictionary<string, string> description = default(Dictionary<string, string>), Dictionary<string, string> displayName = default(Dictionary<string, string>), bool includeInSearch = default(bool), bool isOverridden = default(bool), DateTime lastPublishedDate = default(DateTime), double listPrice = default(double), List<ProductMedia> mediaSet = default(List<ProductMedia>), DateTime newProductDate = default(DateTime), List<string> parentCategoryIds = default(List<string>), List<ProductPriceEntry> prices = default(List<ProductPriceEntry>), string primaryParentCategoryId = default(string), string publicationStatus = default(string), List<Relationship> relationships = default(List<Relationship>), int sequenceNumber = default(int), string sku = default(string), string taxCategory = default(string), List<VariantMediaSet> variantMediaSet = default(List<VariantMediaSet>), List<Variant> variants = default(List<Variant>), List<string> idsOfOverriddenVariants = default(List<string>), List<string> overriddenProperties = default(List<string>))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for Product and cannot be null");
            this.PropertyBag = propertyBag;
            this.Created = created;
            this.CreatedBy = createdBy;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.ActivationOverridden = activationOverridden;
            this.AllowVariantActivationSchedule = allowVariantActivationSchedule;
            this.Brand = brand;
            this.ItemFormat = itemFormat;
            this.ScheduledActivation = scheduledActivation;
            this.ScheduledDeactivation = scheduledDeactivation;
            this.SellingMethod = sellingMethod;
            this.UnitOfMeasure = unitOfMeasure;
            this.Weight = weight;
            this.WeightUOM = weightUOM;
            this.Active = active;
            this.CatalogId = catalogId;
            this.DefinitionName = definitionName;
            this.Description = description;
            this.DisplayName = displayName;
            this.IncludeInSearch = includeInSearch;
            this.IsOverridden = isOverridden;
            this.LastPublishedDate = lastPublishedDate;
            this.ListPrice = listPrice;
            this.MediaSet = mediaSet;
            this.NewProductDate = newProductDate;
            this.ParentCategoryIds = parentCategoryIds;
            this.Prices = prices;
            this.PrimaryParentCategoryId = primaryParentCategoryId;
            this.PublicationStatus = publicationStatus;
            this.Relationships = relationships;
            this.SequenceNumber = sequenceNumber;
            this.Sku = sku;
            this.TaxCategory = taxCategory;
            this.VariantMediaSet = variantMediaSet;
            this.Variants = variants;
            this.IdsOfOverriddenVariants = idsOfOverriddenVariants;
            this.OverriddenProperties = overriddenProperties;
        }

        /// <summary>
        /// The unique identifier of the entity.
        /// </summary>
        /// <value>The unique identifier of the entity.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PropertyBag
        /// </summary>
        [DataMember(Name = "propertyBag", EmitDefaultValue = false)]
        public Dictionary<string, Object> PropertyBag { get; set; }

        /// <summary>
        /// Date the entity was created
        /// </summary>
        /// <value>Date the entity was created</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Identifier of the operator who created the entity
        /// </summary>
        /// <value>Identifier of the operator who created the entity</value>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Date that the last modification was applied to the entity
        /// </summary>
        /// <value>Date that the last modification was applied to the entity</value>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Identifier of the operator who last modified the entity
        /// </summary>
        /// <value>Identifier of the operator who last modified the entity</value>
        [DataMember(Name = "lastModifiedBy", EmitDefaultValue = false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Allow overriding the Active flag and the activation schedule at a descendent scope level.
        /// </summary>
        /// <value>Allow overriding the Active flag and the activation schedule at a descendent scope level.</value>
        [DataMember(Name = "activationOverridden", EmitDefaultValue = true)]
        public bool ActivationOverridden { get; set; }

        /// <summary>
        /// Allow overriding the activation schedule at the variant level.
        /// </summary>
        /// <value>Allow overriding the activation schedule at the variant level.</value>
        [DataMember(Name = "allowVariantActivationSchedule", EmitDefaultValue = true)]
        public bool AllowVariantActivationSchedule { get; set; }

        /// <summary>
        /// the Brand of the Product.
        /// </summary>
        /// <value>the Brand of the Product.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// the ItemFormat of the Product (must be mg, mm, mm2, mm3 or Unit quantity).
        /// </summary>
        /// <value>the ItemFormat of the Product (must be mg, mm, mm2, mm3 or Unit quantity).</value>
        [DataMember(Name = "itemFormat", EmitDefaultValue = false)]
        public double ItemFormat { get; set; }

        /// <summary>
        /// The date on which the product becomes active.
        /// </summary>
        /// <value>The date on which the product becomes active.</value>
        [DataMember(Name = "scheduledActivation", EmitDefaultValue = false)]
        public DateTime ScheduledActivation { get; set; }

        /// <summary>
        /// The date on which the product becomes inactive.
        /// </summary>
        /// <value>The date on which the product becomes inactive.</value>
        [DataMember(Name = "scheduledDeactivation", EmitDefaultValue = false)]
        public DateTime ScheduledDeactivation { get; set; }

        /// <summary>
        /// the Selling Method of the Product.
        /// </summary>
        /// <value>the Selling Method of the Product.</value>
        [DataMember(Name = "sellingMethod", EmitDefaultValue = false)]
        public string SellingMethod { get; set; }

        /// <summary>
        /// the unit of measure of the Product.
        /// </summary>
        /// <value>the unit of measure of the Product.</value>
        [DataMember(Name = "unitOfMeasure", EmitDefaultValue = false)]
        public string UnitOfMeasure { get; set; }

        /// <summary>
        /// The weight of the Product.
        /// </summary>
        /// <value>The weight of the Product.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public double Weight { get; set; }

        /// <summary>
        /// The weight unit of measure of the Product.
        /// </summary>
        /// <value>The weight unit of measure of the Product.</value>
        [DataMember(Name = "weightUOM", EmitDefaultValue = false)]
        public string WeightUOM { get; set; }

        /// <summary>
        /// whether the Product is active or not.
        /// </summary>
        /// <value>whether the Product is active or not.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// the id of the catalog to which the product belongs.
        /// </summary>
        /// <value>the id of the catalog to which the product belongs.</value>
        [DataMember(Name = "catalogId", EmitDefaultValue = false)]
        public string CatalogId { get; set; }

        /// <summary>
        /// the product definition name that represents the Product (its properties).
        /// </summary>
        /// <value>the product definition name that represents the Product (its properties).</value>
        [DataMember(Name = "definitionName", EmitDefaultValue = false)]
        public string DefinitionName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public Dictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public Dictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Whether or not the Product should be included in the front-end search result.
        /// </summary>
        /// <value>Whether or not the Product should be included in the front-end search result.</value>
        [DataMember(Name = "includeInSearch", EmitDefaultValue = true)]
        public bool IncludeInSearch { get; set; }

        /// <summary>
        /// whether the product has overridden values in the current Sales scope.
        /// </summary>
        /// <value>whether the product has overridden values in the current Sales scope.</value>
        [DataMember(Name = "isOverridden", EmitDefaultValue = true)]
        public bool IsOverridden { get; set; }

        /// <summary>
        /// the last published date of the Product.
        /// </summary>
        /// <value>the last published date of the Product.</value>
        [DataMember(Name = "lastPublishedDate", EmitDefaultValue = false)]
        public DateTime LastPublishedDate { get; set; }

        /// <summary>
        /// the default price for the Product
        /// </summary>
        /// <value>the default price for the Product</value>
        [DataMember(Name = "listPrice", EmitDefaultValue = false)]
        public double ListPrice { get; set; }

        /// <summary>
        /// the list of media of the Product
        /// </summary>
        /// <value>the list of media of the Product</value>
        [DataMember(Name = "mediaSet", EmitDefaultValue = false)]
        public List<ProductMedia> MediaSet { get; set; }

        /// <summary>
        /// the number of days the Product is flagged as a new product introduction.
        /// </summary>
        /// <value>the number of days the Product is flagged as a new product introduction.</value>
        [DataMember(Name = "newProductDate", EmitDefaultValue = false)]
        public DateTime NewProductDate { get; set; }

        /// <summary>
        /// the business key (id) of the primary Category.
        /// </summary>
        /// <value>the business key (id) of the primary Category.</value>
        [DataMember(Name = "parentCategoryIds", EmitDefaultValue = false)]
        public List<string> ParentCategoryIds { get; set; }

        /// <summary>
        /// a list of ProductPriceEntry.
        /// </summary>
        /// <value>a list of ProductPriceEntry.</value>
        [DataMember(Name = "prices", EmitDefaultValue = false)]
        public List<ProductPriceEntry> Prices { get; set; }

        /// <summary>
        /// the business key (id) of the primary Category.
        /// </summary>
        /// <value>the business key (id) of the primary Category.</value>
        [DataMember(Name = "primaryParentCategoryId", EmitDefaultValue = false)]
        public string PrimaryParentCategoryId { get; set; }

        /// <summary>
        /// the publication status of the Product. Currently supported values are &#39;InProgress&#39;, &#39;Rejected&#39;, &#39;PendingApproval&#39;, &#39;ReadyToCompose&#39;, &#39;Published&#39;
        /// </summary>
        /// <value>the publication status of the Product. Currently supported values are &#39;InProgress&#39;, &#39;Rejected&#39;, &#39;PendingApproval&#39;, &#39;ReadyToCompose&#39;, &#39;Published&#39;</value>
        [DataMember(Name = "publicationStatus", EmitDefaultValue = false)]
        public string PublicationStatus { get; set; }

        /// <summary>
        /// The list of related entities (Product, Category or Variant) related to the Product.
        /// </summary>
        /// <value>The list of related entities (Product, Category or Variant) related to the Product.</value>
        [DataMember(Name = "relationships", EmitDefaultValue = false)]
        public List<Relationship> Relationships { get; set; }

        /// <summary>
        /// the number used for ordering the Product in a list.
        /// </summary>
        /// <value>the number used for ordering the Product in a list.</value>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// the stock keeping unit code (SKU) of the Product.
        /// </summary>
        /// <value>the stock keeping unit code (SKU) of the Product.</value>
        [DataMember(Name = "sku", EmitDefaultValue = false)]
        public string Sku { get; set; }

        /// <summary>
        /// the tax category of the Product.
        /// </summary>
        /// <value>the tax category of the Product.</value>
        [DataMember(Name = "taxCategory", EmitDefaultValue = false)]
        public string TaxCategory { get; set; }

        /// <summary>
        /// the media list of key variants of the Product
        /// </summary>
        /// <value>the media list of key variants of the Product</value>
        [DataMember(Name = "variantMediaSet", EmitDefaultValue = false)]
        public List<VariantMediaSet> VariantMediaSet { get; set; }

        /// <summary>
        /// the list of Variant of the Product
        /// </summary>
        /// <value>the list of Variant of the Product</value>
        [DataMember(Name = "variants", EmitDefaultValue = false)]
        public List<Variant> Variants { get; set; }

        /// <summary>
        /// Gets or Sets IdsOfOverriddenVariants
        /// </summary>
        [DataMember(Name = "idsOfOverriddenVariants", EmitDefaultValue = false)]
        public List<string> IdsOfOverriddenVariants { get; set; }

        /// <summary>
        /// Gets or Sets OverriddenProperties
        /// </summary>
        [DataMember(Name = "overriddenProperties", EmitDefaultValue = false)]
        public List<string> OverriddenProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PropertyBag: ").Append(PropertyBag).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  ActivationOverridden: ").Append(ActivationOverridden).Append("\n");
            sb.Append("  AllowVariantActivationSchedule: ").Append(AllowVariantActivationSchedule).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ItemFormat: ").Append(ItemFormat).Append("\n");
            sb.Append("  ScheduledActivation: ").Append(ScheduledActivation).Append("\n");
            sb.Append("  ScheduledDeactivation: ").Append(ScheduledDeactivation).Append("\n");
            sb.Append("  SellingMethod: ").Append(SellingMethod).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightUOM: ").Append(WeightUOM).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CatalogId: ").Append(CatalogId).Append("\n");
            sb.Append("  DefinitionName: ").Append(DefinitionName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  IncludeInSearch: ").Append(IncludeInSearch).Append("\n");
            sb.Append("  IsOverridden: ").Append(IsOverridden).Append("\n");
            sb.Append("  LastPublishedDate: ").Append(LastPublishedDate).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  MediaSet: ").Append(MediaSet).Append("\n");
            sb.Append("  NewProductDate: ").Append(NewProductDate).Append("\n");
            sb.Append("  ParentCategoryIds: ").Append(ParentCategoryIds).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  PrimaryParentCategoryId: ").Append(PrimaryParentCategoryId).Append("\n");
            sb.Append("  PublicationStatus: ").Append(PublicationStatus).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  VariantMediaSet: ").Append(VariantMediaSet).Append("\n");
            sb.Append("  Variants: ").Append(Variants).Append("\n");
            sb.Append("  IdsOfOverriddenVariants: ").Append(IdsOfOverriddenVariants).Append("\n");
            sb.Append("  OverriddenProperties: ").Append(OverriddenProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PropertyBag == input.PropertyBag ||
                    this.PropertyBag != null &&
                    input.PropertyBag != null &&
                    this.PropertyBag.SequenceEqual(input.PropertyBag)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.ActivationOverridden == input.ActivationOverridden ||
                    this.ActivationOverridden.Equals(input.ActivationOverridden)
                ) && 
                (
                    this.AllowVariantActivationSchedule == input.AllowVariantActivationSchedule ||
                    this.AllowVariantActivationSchedule.Equals(input.AllowVariantActivationSchedule)
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.ItemFormat == input.ItemFormat ||
                    this.ItemFormat.Equals(input.ItemFormat)
                ) && 
                (
                    this.ScheduledActivation == input.ScheduledActivation ||
                    (this.ScheduledActivation != null &&
                    this.ScheduledActivation.Equals(input.ScheduledActivation))
                ) && 
                (
                    this.ScheduledDeactivation == input.ScheduledDeactivation ||
                    (this.ScheduledDeactivation != null &&
                    this.ScheduledDeactivation.Equals(input.ScheduledDeactivation))
                ) && 
                (
                    this.SellingMethod == input.SellingMethod ||
                    (this.SellingMethod != null &&
                    this.SellingMethod.Equals(input.SellingMethod))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                ) && 
                (
                    this.WeightUOM == input.WeightUOM ||
                    (this.WeightUOM != null &&
                    this.WeightUOM.Equals(input.WeightUOM))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.CatalogId == input.CatalogId ||
                    (this.CatalogId != null &&
                    this.CatalogId.Equals(input.CatalogId))
                ) && 
                (
                    this.DefinitionName == input.DefinitionName ||
                    (this.DefinitionName != null &&
                    this.DefinitionName.Equals(input.DefinitionName))
                ) && 
                (
                    this.Description == input.Description ||
                    this.Description != null &&
                    input.Description != null &&
                    this.Description.SequenceEqual(input.Description)
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    this.DisplayName != null &&
                    input.DisplayName != null &&
                    this.DisplayName.SequenceEqual(input.DisplayName)
                ) && 
                (
                    this.IncludeInSearch == input.IncludeInSearch ||
                    this.IncludeInSearch.Equals(input.IncludeInSearch)
                ) && 
                (
                    this.IsOverridden == input.IsOverridden ||
                    this.IsOverridden.Equals(input.IsOverridden)
                ) && 
                (
                    this.LastPublishedDate == input.LastPublishedDate ||
                    (this.LastPublishedDate != null &&
                    this.LastPublishedDate.Equals(input.LastPublishedDate))
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    this.ListPrice.Equals(input.ListPrice)
                ) && 
                (
                    this.MediaSet == input.MediaSet ||
                    this.MediaSet != null &&
                    input.MediaSet != null &&
                    this.MediaSet.SequenceEqual(input.MediaSet)
                ) && 
                (
                    this.NewProductDate == input.NewProductDate ||
                    (this.NewProductDate != null &&
                    this.NewProductDate.Equals(input.NewProductDate))
                ) && 
                (
                    this.ParentCategoryIds == input.ParentCategoryIds ||
                    this.ParentCategoryIds != null &&
                    input.ParentCategoryIds != null &&
                    this.ParentCategoryIds.SequenceEqual(input.ParentCategoryIds)
                ) && 
                (
                    this.Prices == input.Prices ||
                    this.Prices != null &&
                    input.Prices != null &&
                    this.Prices.SequenceEqual(input.Prices)
                ) && 
                (
                    this.PrimaryParentCategoryId == input.PrimaryParentCategoryId ||
                    (this.PrimaryParentCategoryId != null &&
                    this.PrimaryParentCategoryId.Equals(input.PrimaryParentCategoryId))
                ) && 
                (
                    this.PublicationStatus == input.PublicationStatus ||
                    (this.PublicationStatus != null &&
                    this.PublicationStatus.Equals(input.PublicationStatus))
                ) && 
                (
                    this.Relationships == input.Relationships ||
                    this.Relationships != null &&
                    input.Relationships != null &&
                    this.Relationships.SequenceEqual(input.Relationships)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.Sku == input.Sku ||
                    (this.Sku != null &&
                    this.Sku.Equals(input.Sku))
                ) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                ) && 
                (
                    this.VariantMediaSet == input.VariantMediaSet ||
                    this.VariantMediaSet != null &&
                    input.VariantMediaSet != null &&
                    this.VariantMediaSet.SequenceEqual(input.VariantMediaSet)
                ) && 
                (
                    this.Variants == input.Variants ||
                    this.Variants != null &&
                    input.Variants != null &&
                    this.Variants.SequenceEqual(input.Variants)
                ) && 
                (
                    this.IdsOfOverriddenVariants == input.IdsOfOverriddenVariants ||
                    this.IdsOfOverriddenVariants != null &&
                    input.IdsOfOverriddenVariants != null &&
                    this.IdsOfOverriddenVariants.SequenceEqual(input.IdsOfOverriddenVariants)
                ) && 
                (
                    this.OverriddenProperties == input.OverriddenProperties ||
                    this.OverriddenProperties != null &&
                    input.OverriddenProperties != null &&
                    this.OverriddenProperties.SequenceEqual(input.OverriddenProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PropertyBag != null)
                    hashCode = hashCode * 59 + this.PropertyBag.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                hashCode = hashCode * 59 + this.ActivationOverridden.GetHashCode();
                hashCode = hashCode * 59 + this.AllowVariantActivationSchedule.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                hashCode = hashCode * 59 + this.ItemFormat.GetHashCode();
                if (this.ScheduledActivation != null)
                    hashCode = hashCode * 59 + this.ScheduledActivation.GetHashCode();
                if (this.ScheduledDeactivation != null)
                    hashCode = hashCode * 59 + this.ScheduledDeactivation.GetHashCode();
                if (this.SellingMethod != null)
                    hashCode = hashCode * 59 + this.SellingMethod.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightUOM != null)
                    hashCode = hashCode * 59 + this.WeightUOM.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.CatalogId != null)
                    hashCode = hashCode * 59 + this.CatalogId.GetHashCode();
                if (this.DefinitionName != null)
                    hashCode = hashCode * 59 + this.DefinitionName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeInSearch.GetHashCode();
                hashCode = hashCode * 59 + this.IsOverridden.GetHashCode();
                if (this.LastPublishedDate != null)
                    hashCode = hashCode * 59 + this.LastPublishedDate.GetHashCode();
                hashCode = hashCode * 59 + this.ListPrice.GetHashCode();
                if (this.MediaSet != null)
                    hashCode = hashCode * 59 + this.MediaSet.GetHashCode();
                if (this.NewProductDate != null)
                    hashCode = hashCode * 59 + this.NewProductDate.GetHashCode();
                if (this.ParentCategoryIds != null)
                    hashCode = hashCode * 59 + this.ParentCategoryIds.GetHashCode();
                if (this.Prices != null)
                    hashCode = hashCode * 59 + this.Prices.GetHashCode();
                if (this.PrimaryParentCategoryId != null)
                    hashCode = hashCode * 59 + this.PrimaryParentCategoryId.GetHashCode();
                if (this.PublicationStatus != null)
                    hashCode = hashCode * 59 + this.PublicationStatus.GetHashCode();
                if (this.Relationships != null)
                    hashCode = hashCode * 59 + this.Relationships.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.Sku != null)
                    hashCode = hashCode * 59 + this.Sku.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                if (this.VariantMediaSet != null)
                    hashCode = hashCode * 59 + this.VariantMediaSet.GetHashCode();
                if (this.Variants != null)
                    hashCode = hashCode * 59 + this.Variants.GetHashCode();
                if (this.IdsOfOverriddenVariants != null)
                    hashCode = hashCode * 59 + this.IdsOfOverriddenVariants.GetHashCode();
                if (this.OverriddenProperties != null)
                    hashCode = hashCode * 59 + this.OverriddenProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
