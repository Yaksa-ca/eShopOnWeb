/*
 * Overture API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Yaksa.OrckestraCommerce.Client.Client.OpenAPIDateConverter;

namespace Yaksa.OrckestraCommerce.Client.Model
{
    /// <summary>
    /// Integration resources dedicated to data exchanges across system boundaries or other systems.
    /// </summary>
    [DataContract(Name = "ImportInventoryItemsRequest")]
    public partial class ImportInventoryItemsRequest : IEquatable<ImportInventoryItemsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportInventoryItemsRequest" /> class.
        /// </summary>
        /// <param name="correlationId">The correlation id for the durable task..</param>
        /// <param name="ignoreReservedItems">Indicates to ignore or not the reserved Items..</param>
        /// <param name="path">the path of the file(s) to import.</param>
        /// <param name="taskId">the task id. Use this to query the system for the state of the task..</param>
        public ImportInventoryItemsRequest(string correlationId = default(string), bool ignoreReservedItems = default(bool), string path = default(string), string taskId = default(string))
        {
            this.CorrelationId = correlationId;
            this.IgnoreReservedItems = ignoreReservedItems;
            this.Path = path;
            this.TaskId = taskId;
        }

        /// <summary>
        /// The correlation id for the durable task.
        /// </summary>
        /// <value>The correlation id for the durable task.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// Indicates to ignore or not the reserved Items.
        /// </summary>
        /// <value>Indicates to ignore or not the reserved Items.</value>
        [DataMember(Name = "ignoreReservedItems", EmitDefaultValue = true)]
        public bool IgnoreReservedItems { get; set; }

        /// <summary>
        /// the path of the file(s) to import
        /// </summary>
        /// <value>the path of the file(s) to import</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// the task id. Use this to query the system for the state of the task.
        /// </summary>
        /// <value>the task id. Use this to query the system for the state of the task.</value>
        [DataMember(Name = "taskId", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportInventoryItemsRequest {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  IgnoreReservedItems: ").Append(IgnoreReservedItems).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImportInventoryItemsRequest);
        }

        /// <summary>
        /// Returns true if ImportInventoryItemsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ImportInventoryItemsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportInventoryItemsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.IgnoreReservedItems == input.IgnoreReservedItems ||
                    this.IgnoreReservedItems.Equals(input.IgnoreReservedItems)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    (this.TaskId != null &&
                    this.TaskId.Equals(input.TaskId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                hashCode = hashCode * 59 + this.IgnoreReservedItems.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.TaskId != null)
                    hashCode = hashCode * 59 + this.TaskId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
